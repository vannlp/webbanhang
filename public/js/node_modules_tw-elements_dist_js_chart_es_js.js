"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_tw-elements_dist_js_chart_es_js"],{

/***/ "./node_modules/tw-elements/dist/js/chart.es.js":
/*!******************************************************!*\
  !*** ./node_modules/tw-elements/dist/js/chart.es.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ ye),\n/* harmony export */   B: () => (/* binding */ Me),\n/* harmony export */   P: () => (/* binding */ ve),\n/* harmony export */   a: () => (/* binding */ K),\n/* harmony export */   b: () => (/* binding */ D),\n/* harmony export */   c: () => (/* binding */ I),\n/* harmony export */   d: () => (/* binding */ O),\n/* harmony export */   e: () => (/* binding */ E),\n/* harmony export */   f: () => (/* binding */ Yc),\n/* harmony export */   i: () => (/* binding */ T),\n/* harmony export */   m: () => (/* binding */ ne),\n/* harmony export */   r: () => (/* binding */ Zt),\n/* harmony export */   t: () => (/* binding */ $),\n/* harmony export */   v: () => (/* binding */ C)\n/* harmony export */ });\n/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nfunction ct() {\n}\nconst _o = function() {\n  let i = 0;\n  return function() {\n    return i++;\n  };\n}();\nfunction T(i) {\n  return i === null || typeof i > \"u\";\n}\nfunction z(i) {\n  if (Array.isArray && Array.isArray(i))\n    return !0;\n  const t = Object.prototype.toString.call(i);\n  return t.slice(0, 7) === \"[object\" && t.slice(-6) === \"Array]\";\n}\nfunction D(i) {\n  return i !== null && Object.prototype.toString.call(i) === \"[object Object]\";\n}\nconst N = (i) => (typeof i == \"number\" || i instanceof Number) && isFinite(+i);\nfunction Q(i, t) {\n  return N(i) ? i : t;\n}\nfunction C(i, t) {\n  return typeof i > \"u\" ? t : i;\n}\nconst yo = (i, t) => typeof i == \"string\" && i.endsWith(\"%\") ? parseFloat(i) / 100 : i / t, an = (i, t) => typeof i == \"string\" && i.endsWith(\"%\") ? parseFloat(i) / 100 * t : +i;\nfunction I(i, t, e) {\n  if (i && typeof i.call == \"function\")\n    return i.apply(e, t);\n}\nfunction E(i, t, e, s) {\n  let n, o, r;\n  if (z(i))\n    if (o = i.length, s)\n      for (n = o - 1; n >= 0; n--)\n        t.call(e, i[n], n);\n    else\n      for (n = 0; n < o; n++)\n        t.call(e, i[n], n);\n  else if (D(i))\n    for (r = Object.keys(i), o = r.length, n = 0; n < o; n++)\n      t.call(e, i[r[n]], r[n]);\n}\nfunction ze(i, t) {\n  let e, s, n, o;\n  if (!i || !t || i.length !== t.length)\n    return !1;\n  for (e = 0, s = i.length; e < s; ++e)\n    if (n = i[e], o = t[e], n.datasetIndex !== o.datasetIndex || n.index !== o.index)\n      return !1;\n  return !0;\n}\nfunction Be(i) {\n  if (z(i))\n    return i.map(Be);\n  if (D(i)) {\n    const t = /* @__PURE__ */ Object.create(null), e = Object.keys(i), s = e.length;\n    let n = 0;\n    for (; n < s; ++n)\n      t[e[n]] = Be(i[e[n]]);\n    return t;\n  }\n  return i;\n}\nfunction ln(i) {\n  return [\"__proto__\", \"prototype\", \"constructor\"].indexOf(i) === -1;\n}\nfunction vo(i, t, e, s) {\n  if (!ln(i))\n    return;\n  const n = t[i], o = e[i];\n  D(n) && D(o) ? ne(n, o, s) : t[i] = Be(o);\n}\nfunction ne(i, t, e) {\n  const s = z(t) ? t : [t], n = s.length;\n  if (!D(i))\n    return i;\n  e = e || {};\n  const o = e.merger || vo;\n  for (let r = 0; r < n; ++r) {\n    if (t = s[r], !D(t))\n      continue;\n    const a = Object.keys(t);\n    for (let l = 0, c = a.length; l < c; ++l)\n      o(a[l], i, t, e);\n  }\n  return i;\n}\nfunction Qt(i, t) {\n  return ne(i, t, { merger: Mo });\n}\nfunction Mo(i, t, e) {\n  if (!ln(i))\n    return;\n  const s = t[i], n = e[i];\n  D(s) && D(n) ? Qt(s, n) : Object.prototype.hasOwnProperty.call(t, i) || (t[i] = Be(n));\n}\nconst Xi = {\n  \"\": (i) => i,\n  x: (i) => i.x,\n  y: (i) => i.y\n};\nfunction _t(i, t) {\n  return (Xi[t] || (Xi[t] = ko(t)))(i);\n}\nfunction ko(i) {\n  const t = wo(i);\n  return (e) => {\n    for (const s of t) {\n      if (s === \"\")\n        break;\n      e = e && e[s];\n    }\n    return e;\n  };\n}\nfunction wo(i) {\n  const t = i.split(\".\"), e = [];\n  let s = \"\";\n  for (const n of t)\n    s += n, s.endsWith(\"\\\\\") ? s = s.slice(0, -1) + \".\" : (e.push(s), s = \"\");\n  return e;\n}\nfunction Oi(i) {\n  return i.charAt(0).toUpperCase() + i.slice(1);\n}\nconst et = (i) => typeof i < \"u\", yt = (i) => typeof i == \"function\", Ui = (i, t) => {\n  if (i.size !== t.size)\n    return !1;\n  for (const e of i)\n    if (!t.has(e))\n      return !1;\n  return !0;\n};\nfunction So(i) {\n  return i.type === \"mouseup\" || i.type === \"click\" || i.type === \"contextmenu\";\n}\nconst B = Math.PI, F = 2 * B, Po = F + B, Ve = Number.POSITIVE_INFINITY, Co = B / 180, V = B / 2, $t = B / 4, Ki = B * 2 / 3, tt = Math.log10, lt = Math.sign;\nfunction qi(i) {\n  const t = Math.round(i);\n  i = te(i, t, i / 1e3) ? t : i;\n  const e = Math.pow(10, Math.floor(tt(i))), s = i / e;\n  return (s <= 1 ? 1 : s <= 2 ? 2 : s <= 5 ? 5 : 10) * e;\n}\nfunction Do(i) {\n  const t = [], e = Math.sqrt(i);\n  let s;\n  for (s = 1; s < e; s++)\n    i % s === 0 && (t.push(s), t.push(i / s));\n  return e === (e | 0) && t.push(e), t.sort((n, o) => n - o).pop(), t;\n}\nfunction Bt(i) {\n  return !isNaN(parseFloat(i)) && isFinite(i);\n}\nfunction te(i, t, e) {\n  return Math.abs(i - t) < e;\n}\nfunction Oo(i, t) {\n  const e = Math.round(i);\n  return e - t <= i && e + t >= i;\n}\nfunction cn(i, t, e) {\n  let s, n, o;\n  for (s = 0, n = i.length; s < n; s++)\n    o = i[s][e], isNaN(o) || (t.min = Math.min(t.min, o), t.max = Math.max(t.max, o));\n}\nfunction nt(i) {\n  return i * (B / 180);\n}\nfunction Ai(i) {\n  return i * (180 / B);\n}\nfunction Gi(i) {\n  if (!N(i))\n    return;\n  let t = 1, e = 0;\n  for (; Math.round(i * t) / t !== i; )\n    t *= 10, e++;\n  return e;\n}\nfunction hn(i, t) {\n  const e = t.x - i.x, s = t.y - i.y, n = Math.sqrt(e * e + s * s);\n  let o = Math.atan2(s, e);\n  return o < -0.5 * B && (o += F), {\n    angle: o,\n    distance: n\n  };\n}\nfunction bi(i, t) {\n  return Math.sqrt(Math.pow(t.x - i.x, 2) + Math.pow(t.y - i.y, 2));\n}\nfunction Ao(i, t) {\n  return (i - t + Po) % F - B;\n}\nfunction Z(i) {\n  return (i % F + F) % F;\n}\nfunction oe(i, t, e, s) {\n  const n = Z(i), o = Z(t), r = Z(e), a = Z(o - n), l = Z(r - n), c = Z(n - o), h = Z(n - r);\n  return n === o || n === r || s && o === r || a > l && c < h;\n}\nfunction Y(i, t, e) {\n  return Math.max(t, Math.min(e, i));\n}\nfunction To(i) {\n  return Y(i, -32768, 32767);\n}\nfunction ut(i, t, e, s = 1e-6) {\n  return i >= Math.min(t, e) - s && i <= Math.max(t, e) + s;\n}\nfunction Ti(i, t, e) {\n  e = e || ((r) => i[r] < t);\n  let s = i.length - 1, n = 0, o;\n  for (; s - n > 1; )\n    o = n + s >> 1, e(o) ? n = o : s = o;\n  return { lo: n, hi: s };\n}\nconst ft = (i, t, e, s) => Ti(i, e, s ? (n) => i[n][t] <= e : (n) => i[n][t] < e), Lo = (i, t, e) => Ti(i, e, (s) => i[s][t] >= e);\nfunction Ro(i, t, e) {\n  let s = 0, n = i.length;\n  for (; s < n && i[s] < t; )\n    s++;\n  for (; n > s && i[n - 1] > e; )\n    n--;\n  return s > 0 || n < i.length ? i.slice(s, n) : i;\n}\nconst dn = [\"push\", \"pop\", \"shift\", \"splice\", \"unshift\"];\nfunction Eo(i, t) {\n  if (i._chartjs) {\n    i._chartjs.listeners.push(t);\n    return;\n  }\n  Object.defineProperty(i, \"_chartjs\", {\n    configurable: !0,\n    enumerable: !1,\n    value: {\n      listeners: [t]\n    }\n  }), dn.forEach((e) => {\n    const s = \"_onData\" + Oi(e), n = i[e];\n    Object.defineProperty(i, e, {\n      configurable: !0,\n      enumerable: !1,\n      value(...o) {\n        const r = n.apply(this, o);\n        return i._chartjs.listeners.forEach((a) => {\n          typeof a[s] == \"function\" && a[s](...o);\n        }), r;\n      }\n    });\n  });\n}\nfunction Zi(i, t) {\n  const e = i._chartjs;\n  if (!e)\n    return;\n  const s = e.listeners, n = s.indexOf(t);\n  n !== -1 && s.splice(n, 1), !(s.length > 0) && (dn.forEach((o) => {\n    delete i[o];\n  }), delete i._chartjs);\n}\nfunction un(i) {\n  const t = /* @__PURE__ */ new Set();\n  let e, s;\n  for (e = 0, s = i.length; e < s; ++e)\n    t.add(i[e]);\n  return t.size === s ? i : Array.from(t);\n}\nconst fn = function() {\n  return typeof window > \"u\" ? function(i) {\n    return i();\n  } : window.requestAnimationFrame;\n}();\nfunction gn(i, t, e) {\n  const s = e || ((r) => Array.prototype.slice.call(r));\n  let n = !1, o = [];\n  return function(...r) {\n    o = s(r), n || (n = !0, fn.call(window, () => {\n      n = !1, i.apply(t, o);\n    }));\n  };\n}\nfunction Fo(i, t) {\n  let e;\n  return function(...s) {\n    return t ? (clearTimeout(e), e = setTimeout(i, t, s)) : i.apply(this, s), t;\n  };\n}\nconst Li = (i) => i === \"start\" ? \"left\" : i === \"end\" ? \"right\" : \"center\", U = (i, t, e) => i === \"start\" ? t : i === \"end\" ? e : (t + e) / 2, Io = (i, t, e, s) => i === (s ? \"left\" : \"right\") ? e : i === \"center\" ? (t + e) / 2 : t;\nfunction pn(i, t, e) {\n  const s = t.length;\n  let n = 0, o = s;\n  if (i._sorted) {\n    const { iScale: r, _parsed: a } = i, l = r.axis, { min: c, max: h, minDefined: d, maxDefined: u } = r.getUserBounds();\n    d && (n = Y(\n      Math.min(\n        ft(a, r.axis, c).lo,\n        e ? s : ft(t, l, r.getPixelForValue(c)).lo\n      ),\n      0,\n      s - 1\n    )), u ? o = Y(\n      Math.max(\n        ft(a, r.axis, h, !0).hi + 1,\n        e ? 0 : ft(t, l, r.getPixelForValue(h), !0).hi + 1\n      ),\n      n,\n      s\n    ) - n : o = s - n;\n  }\n  return { start: n, count: o };\n}\nfunction mn(i) {\n  const { xScale: t, yScale: e, _scaleRanges: s } = i, n = {\n    xmin: t.min,\n    xmax: t.max,\n    ymin: e.min,\n    ymax: e.max\n  };\n  if (!s)\n    return i._scaleRanges = n, !0;\n  const o = s.xmin !== t.min || s.xmax !== t.max || s.ymin !== e.min || s.ymax !== e.max;\n  return Object.assign(s, n), o;\n}\nconst we = (i) => i === 0 || i === 1, Ji = (i, t, e) => -(Math.pow(2, 10 * (i -= 1)) * Math.sin((i - t) * F / e)), Qi = (i, t, e) => Math.pow(2, -10 * i) * Math.sin((i - t) * F / e) + 1, ee = {\n  linear: (i) => i,\n  easeInQuad: (i) => i * i,\n  easeOutQuad: (i) => -i * (i - 2),\n  easeInOutQuad: (i) => (i /= 0.5) < 1 ? 0.5 * i * i : -0.5 * (--i * (i - 2) - 1),\n  easeInCubic: (i) => i * i * i,\n  easeOutCubic: (i) => (i -= 1) * i * i + 1,\n  easeInOutCubic: (i) => (i /= 0.5) < 1 ? 0.5 * i * i * i : 0.5 * ((i -= 2) * i * i + 2),\n  easeInQuart: (i) => i * i * i * i,\n  easeOutQuart: (i) => -((i -= 1) * i * i * i - 1),\n  easeInOutQuart: (i) => (i /= 0.5) < 1 ? 0.5 * i * i * i * i : -0.5 * ((i -= 2) * i * i * i - 2),\n  easeInQuint: (i) => i * i * i * i * i,\n  easeOutQuint: (i) => (i -= 1) * i * i * i * i + 1,\n  easeInOutQuint: (i) => (i /= 0.5) < 1 ? 0.5 * i * i * i * i * i : 0.5 * ((i -= 2) * i * i * i * i + 2),\n  easeInSine: (i) => -Math.cos(i * V) + 1,\n  easeOutSine: (i) => Math.sin(i * V),\n  easeInOutSine: (i) => -0.5 * (Math.cos(B * i) - 1),\n  easeInExpo: (i) => i === 0 ? 0 : Math.pow(2, 10 * (i - 1)),\n  easeOutExpo: (i) => i === 1 ? 1 : -Math.pow(2, -10 * i) + 1,\n  easeInOutExpo: (i) => we(i) ? i : i < 0.5 ? 0.5 * Math.pow(2, 10 * (i * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (i * 2 - 1)) + 2),\n  easeInCirc: (i) => i >= 1 ? i : -(Math.sqrt(1 - i * i) - 1),\n  easeOutCirc: (i) => Math.sqrt(1 - (i -= 1) * i),\n  easeInOutCirc: (i) => (i /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - i * i) - 1) : 0.5 * (Math.sqrt(1 - (i -= 2) * i) + 1),\n  easeInElastic: (i) => we(i) ? i : Ji(i, 0.075, 0.3),\n  easeOutElastic: (i) => we(i) ? i : Qi(i, 0.075, 0.3),\n  easeInOutElastic(i) {\n    return we(i) ? i : i < 0.5 ? 0.5 * Ji(i * 2, 0.1125, 0.45) : 0.5 + 0.5 * Qi(i * 2 - 1, 0.1125, 0.45);\n  },\n  easeInBack(i) {\n    return i * i * ((1.70158 + 1) * i - 1.70158);\n  },\n  easeOutBack(i) {\n    return (i -= 1) * i * ((1.70158 + 1) * i + 1.70158) + 1;\n  },\n  easeInOutBack(i) {\n    let t = 1.70158;\n    return (i /= 0.5) < 1 ? 0.5 * (i * i * (((t *= 1.525) + 1) * i - t)) : 0.5 * ((i -= 2) * i * (((t *= 1.525) + 1) * i + t) + 2);\n  },\n  easeInBounce: (i) => 1 - ee.easeOutBounce(1 - i),\n  easeOutBounce(i) {\n    return i < 1 / 2.75 ? 7.5625 * i * i : i < 2 / 2.75 ? 7.5625 * (i -= 1.5 / 2.75) * i + 0.75 : i < 2.5 / 2.75 ? 7.5625 * (i -= 2.25 / 2.75) * i + 0.9375 : 7.5625 * (i -= 2.625 / 2.75) * i + 0.984375;\n  },\n  easeInOutBounce: (i) => i < 0.5 ? ee.easeInBounce(i * 2) * 0.5 : ee.easeOutBounce(i * 2 - 1) * 0.5 + 0.5\n};\n/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */\nfunction he(i) {\n  return i + 0.5 | 0;\n}\nconst mt = (i, t, e) => Math.max(Math.min(i, e), t);\nfunction Gt(i) {\n  return mt(he(i * 2.55), 0, 255);\n}\nfunction xt(i) {\n  return mt(he(i * 255), 0, 255);\n}\nfunction dt(i) {\n  return mt(he(i / 2.55) / 100, 0, 1);\n}\nfunction ts(i) {\n  return mt(he(i * 100), 0, 100);\n}\nconst J = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 }, xi = [...\"0123456789ABCDEF\"], zo = (i) => xi[i & 15], Bo = (i) => xi[(i & 240) >> 4] + xi[i & 15], Se = (i) => (i & 240) >> 4 === (i & 15), Vo = (i) => Se(i.r) && Se(i.g) && Se(i.b) && Se(i.a);\nfunction Wo(i) {\n  var t = i.length, e;\n  return i[0] === \"#\" && (t === 4 || t === 5 ? e = {\n    r: 255 & J[i[1]] * 17,\n    g: 255 & J[i[2]] * 17,\n    b: 255 & J[i[3]] * 17,\n    a: t === 5 ? J[i[4]] * 17 : 255\n  } : (t === 7 || t === 9) && (e = {\n    r: J[i[1]] << 4 | J[i[2]],\n    g: J[i[3]] << 4 | J[i[4]],\n    b: J[i[5]] << 4 | J[i[6]],\n    a: t === 9 ? J[i[7]] << 4 | J[i[8]] : 255\n  })), e;\n}\nconst No = (i, t) => i < 255 ? t(i) : \"\";\nfunction Ho(i) {\n  var t = Vo(i) ? zo : Bo;\n  return i ? \"#\" + t(i.r) + t(i.g) + t(i.b) + No(i.a, t) : void 0;\n}\nconst jo = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction bn(i, t, e) {\n  const s = t * Math.min(e, 1 - e), n = (o, r = (o + i / 30) % 12) => e - s * Math.max(Math.min(r - 3, 9 - r, 1), -1);\n  return [n(0), n(8), n(4)];\n}\nfunction $o(i, t, e) {\n  const s = (n, o = (n + i / 60) % 6) => e - e * t * Math.max(Math.min(o, 4 - o, 1), 0);\n  return [s(5), s(3), s(1)];\n}\nfunction Yo(i, t, e) {\n  const s = bn(i, 1, 0.5);\n  let n;\n  for (t + e > 1 && (n = 1 / (t + e), t *= n, e *= n), n = 0; n < 3; n++)\n    s[n] *= 1 - t - e, s[n] += t;\n  return s;\n}\nfunction Xo(i, t, e, s, n) {\n  return i === n ? (t - e) / s + (t < e ? 6 : 0) : t === n ? (e - i) / s + 2 : (i - t) / s + 4;\n}\nfunction Ri(i) {\n  const e = i.r / 255, s = i.g / 255, n = i.b / 255, o = Math.max(e, s, n), r = Math.min(e, s, n), a = (o + r) / 2;\n  let l, c, h;\n  return o !== r && (h = o - r, c = a > 0.5 ? h / (2 - o - r) : h / (o + r), l = Xo(e, s, n, h, o), l = l * 60 + 0.5), [l | 0, c || 0, a];\n}\nfunction Ei(i, t, e, s) {\n  return (Array.isArray(t) ? i(t[0], t[1], t[2]) : i(t, e, s)).map(xt);\n}\nfunction Fi(i, t, e) {\n  return Ei(bn, i, t, e);\n}\nfunction Uo(i, t, e) {\n  return Ei(Yo, i, t, e);\n}\nfunction Ko(i, t, e) {\n  return Ei($o, i, t, e);\n}\nfunction xn(i) {\n  return (i % 360 + 360) % 360;\n}\nfunction qo(i) {\n  const t = jo.exec(i);\n  let e = 255, s;\n  if (!t)\n    return;\n  t[5] !== s && (e = t[6] ? Gt(+t[5]) : xt(+t[5]));\n  const n = xn(+t[2]), o = +t[3] / 100, r = +t[4] / 100;\n  return t[1] === \"hwb\" ? s = Uo(n, o, r) : t[1] === \"hsv\" ? s = Ko(n, o, r) : s = Fi(n, o, r), {\n    r: s[0],\n    g: s[1],\n    b: s[2],\n    a: e\n  };\n}\nfunction Go(i, t) {\n  var e = Ri(i);\n  e[0] = xn(e[0] + t), e = Fi(e), i.r = e[0], i.g = e[1], i.b = e[2];\n}\nfunction Zo(i) {\n  if (!i)\n    return;\n  const t = Ri(i), e = t[0], s = ts(t[1]), n = ts(t[2]);\n  return i.a < 255 ? `hsla(${e}, ${s}%, ${n}%, ${dt(i.a)})` : `hsl(${e}, ${s}%, ${n}%)`;\n}\nconst es = {\n  x: \"dark\",\n  Z: \"light\",\n  Y: \"re\",\n  X: \"blu\",\n  W: \"gr\",\n  V: \"medium\",\n  U: \"slate\",\n  A: \"ee\",\n  T: \"ol\",\n  S: \"or\",\n  B: \"ra\",\n  C: \"lateg\",\n  D: \"ights\",\n  R: \"in\",\n  Q: \"turquois\",\n  E: \"hi\",\n  P: \"ro\",\n  O: \"al\",\n  N: \"le\",\n  M: \"de\",\n  L: \"yello\",\n  F: \"en\",\n  K: \"ch\",\n  G: \"arks\",\n  H: \"ea\",\n  I: \"ightg\",\n  J: \"wh\"\n}, is = {\n  OiceXe: \"f0f8ff\",\n  antiquewEte: \"faebd7\",\n  aqua: \"ffff\",\n  aquamarRe: \"7fffd4\",\n  azuY: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"0\",\n  blanKedOmond: \"ffebcd\",\n  Xe: \"ff\",\n  XeviTet: \"8a2be2\",\n  bPwn: \"a52a2a\",\n  burlywood: \"deb887\",\n  caMtXe: \"5f9ea0\",\n  KartYuse: \"7fff00\",\n  KocTate: \"d2691e\",\n  cSO: \"ff7f50\",\n  cSnflowerXe: \"6495ed\",\n  cSnsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"ffff\",\n  xXe: \"8b\",\n  xcyan: \"8b8b\",\n  xgTMnPd: \"b8860b\",\n  xWay: \"a9a9a9\",\n  xgYF: \"6400\",\n  xgYy: \"a9a9a9\",\n  xkhaki: \"bdb76b\",\n  xmagFta: \"8b008b\",\n  xTivegYF: \"556b2f\",\n  xSange: \"ff8c00\",\n  xScEd: \"9932cc\",\n  xYd: \"8b0000\",\n  xsOmon: \"e9967a\",\n  xsHgYF: \"8fbc8f\",\n  xUXe: \"483d8b\",\n  xUWay: \"2f4f4f\",\n  xUgYy: \"2f4f4f\",\n  xQe: \"ced1\",\n  xviTet: \"9400d3\",\n  dAppRk: \"ff1493\",\n  dApskyXe: \"bfff\",\n  dimWay: \"696969\",\n  dimgYy: \"696969\",\n  dodgerXe: \"1e90ff\",\n  fiYbrick: \"b22222\",\n  flSOwEte: \"fffaf0\",\n  foYstWAn: \"228b22\",\n  fuKsia: \"ff00ff\",\n  gaRsbSo: \"dcdcdc\",\n  ghostwEte: \"f8f8ff\",\n  gTd: \"ffd700\",\n  gTMnPd: \"daa520\",\n  Way: \"808080\",\n  gYF: \"8000\",\n  gYFLw: \"adff2f\",\n  gYy: \"808080\",\n  honeyMw: \"f0fff0\",\n  hotpRk: \"ff69b4\",\n  RdianYd: \"cd5c5c\",\n  Rdigo: \"4b0082\",\n  ivSy: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavFMr: \"e6e6fa\",\n  lavFMrXsh: \"fff0f5\",\n  lawngYF: \"7cfc00\",\n  NmoncEffon: \"fffacd\",\n  ZXe: \"add8e6\",\n  ZcSO: \"f08080\",\n  Zcyan: \"e0ffff\",\n  ZgTMnPdLw: \"fafad2\",\n  ZWay: \"d3d3d3\",\n  ZgYF: \"90ee90\",\n  ZgYy: \"d3d3d3\",\n  ZpRk: \"ffb6c1\",\n  ZsOmon: \"ffa07a\",\n  ZsHgYF: \"20b2aa\",\n  ZskyXe: \"87cefa\",\n  ZUWay: \"778899\",\n  ZUgYy: \"778899\",\n  ZstAlXe: \"b0c4de\",\n  ZLw: \"ffffe0\",\n  lime: \"ff00\",\n  limegYF: \"32cd32\",\n  lRF: \"faf0e6\",\n  magFta: \"ff00ff\",\n  maPon: \"800000\",\n  VaquamarRe: \"66cdaa\",\n  VXe: \"cd\",\n  VScEd: \"ba55d3\",\n  VpurpN: \"9370db\",\n  VsHgYF: \"3cb371\",\n  VUXe: \"7b68ee\",\n  VsprRggYF: \"fa9a\",\n  VQe: \"48d1cc\",\n  VviTetYd: \"c71585\",\n  midnightXe: \"191970\",\n  mRtcYam: \"f5fffa\",\n  mistyPse: \"ffe4e1\",\n  moccasR: \"ffe4b5\",\n  navajowEte: \"ffdead\",\n  navy: \"80\",\n  Tdlace: \"fdf5e6\",\n  Tive: \"808000\",\n  TivedBb: \"6b8e23\",\n  Sange: \"ffa500\",\n  SangeYd: \"ff4500\",\n  ScEd: \"da70d6\",\n  pOegTMnPd: \"eee8aa\",\n  pOegYF: \"98fb98\",\n  pOeQe: \"afeeee\",\n  pOeviTetYd: \"db7093\",\n  papayawEp: \"ffefd5\",\n  pHKpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pRk: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powMrXe: \"b0e0e6\",\n  purpN: \"800080\",\n  YbeccapurpN: \"663399\",\n  Yd: \"ff0000\",\n  Psybrown: \"bc8f8f\",\n  PyOXe: \"4169e1\",\n  saddNbPwn: \"8b4513\",\n  sOmon: \"fa8072\",\n  sandybPwn: \"f4a460\",\n  sHgYF: \"2e8b57\",\n  sHshell: \"fff5ee\",\n  siFna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyXe: \"87ceeb\",\n  UXe: \"6a5acd\",\n  UWay: \"708090\",\n  UgYy: \"708090\",\n  snow: \"fffafa\",\n  sprRggYF: \"ff7f\",\n  stAlXe: \"4682b4\",\n  tan: \"d2b48c\",\n  teO: \"8080\",\n  tEstN: \"d8bfd8\",\n  tomato: \"ff6347\",\n  Qe: \"40e0d0\",\n  viTet: \"ee82ee\",\n  JHt: \"f5deb3\",\n  wEte: \"ffffff\",\n  wEtesmoke: \"f5f5f5\",\n  Lw: \"ffff00\",\n  LwgYF: \"9acd32\"\n};\nfunction Jo() {\n  const i = {}, t = Object.keys(is), e = Object.keys(es);\n  let s, n, o, r, a;\n  for (s = 0; s < t.length; s++) {\n    for (r = a = t[s], n = 0; n < e.length; n++)\n      o = e[n], a = a.replace(o, es[o]);\n    o = parseInt(is[r], 16), i[a] = [o >> 16 & 255, o >> 8 & 255, o & 255];\n  }\n  return i;\n}\nlet Pe;\nfunction Qo(i) {\n  Pe || (Pe = Jo(), Pe.transparent = [0, 0, 0, 0]);\n  const t = Pe[i.toLowerCase()];\n  return t && {\n    r: t[0],\n    g: t[1],\n    b: t[2],\n    a: t.length === 4 ? t[3] : 255\n  };\n}\nconst tr = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction er(i) {\n  const t = tr.exec(i);\n  let e = 255, s, n, o;\n  if (t) {\n    if (t[7] !== s) {\n      const r = +t[7];\n      e = t[8] ? Gt(r) : mt(r * 255, 0, 255);\n    }\n    return s = +t[1], n = +t[3], o = +t[5], s = 255 & (t[2] ? Gt(s) : mt(s, 0, 255)), n = 255 & (t[4] ? Gt(n) : mt(n, 0, 255)), o = 255 & (t[6] ? Gt(o) : mt(o, 0, 255)), {\n      r: s,\n      g: n,\n      b: o,\n      a: e\n    };\n  }\n}\nfunction ir(i) {\n  return i && (i.a < 255 ? `rgba(${i.r}, ${i.g}, ${i.b}, ${dt(i.a)})` : `rgb(${i.r}, ${i.g}, ${i.b})`);\n}\nconst ni = (i) => i <= 31308e-7 ? i * 12.92 : Math.pow(i, 1 / 2.4) * 1.055 - 0.055, Ft = (i) => i <= 0.04045 ? i / 12.92 : Math.pow((i + 0.055) / 1.055, 2.4);\nfunction sr(i, t, e) {\n  const s = Ft(dt(i.r)), n = Ft(dt(i.g)), o = Ft(dt(i.b));\n  return {\n    r: xt(ni(s + e * (Ft(dt(t.r)) - s))),\n    g: xt(ni(n + e * (Ft(dt(t.g)) - n))),\n    b: xt(ni(o + e * (Ft(dt(t.b)) - o))),\n    a: i.a + e * (t.a - i.a)\n  };\n}\nfunction Ce(i, t, e) {\n  if (i) {\n    let s = Ri(i);\n    s[t] = Math.max(0, Math.min(s[t] + s[t] * e, t === 0 ? 360 : 1)), s = Fi(s), i.r = s[0], i.g = s[1], i.b = s[2];\n  }\n}\nfunction _n(i, t) {\n  return i && Object.assign(t || {}, i);\n}\nfunction ss(i) {\n  var t = { r: 0, g: 0, b: 0, a: 255 };\n  return Array.isArray(i) ? i.length >= 3 && (t = { r: i[0], g: i[1], b: i[2], a: 255 }, i.length > 3 && (t.a = xt(i[3]))) : (t = _n(i, { r: 0, g: 0, b: 0, a: 1 }), t.a = xt(t.a)), t;\n}\nfunction nr(i) {\n  return i.charAt(0) === \"r\" ? er(i) : qo(i);\n}\nclass We {\n  constructor(t) {\n    if (t instanceof We)\n      return t;\n    const e = typeof t;\n    let s;\n    e === \"object\" ? s = ss(t) : e === \"string\" && (s = Wo(t) || Qo(t) || nr(t)), this._rgb = s, this._valid = !!s;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var t = _n(this._rgb);\n    return t && (t.a = dt(t.a)), t;\n  }\n  set rgb(t) {\n    this._rgb = ss(t);\n  }\n  rgbString() {\n    return this._valid ? ir(this._rgb) : void 0;\n  }\n  hexString() {\n    return this._valid ? Ho(this._rgb) : void 0;\n  }\n  hslString() {\n    return this._valid ? Zo(this._rgb) : void 0;\n  }\n  mix(t, e) {\n    if (t) {\n      const s = this.rgb, n = t.rgb;\n      let o;\n      const r = e === o ? 0.5 : e, a = 2 * r - 1, l = s.a - n.a, c = ((a * l === -1 ? a : (a + l) / (1 + a * l)) + 1) / 2;\n      o = 1 - c, s.r = 255 & c * s.r + o * n.r + 0.5, s.g = 255 & c * s.g + o * n.g + 0.5, s.b = 255 & c * s.b + o * n.b + 0.5, s.a = r * s.a + (1 - r) * n.a, this.rgb = s;\n    }\n    return this;\n  }\n  interpolate(t, e) {\n    return t && (this._rgb = sr(this._rgb, t._rgb, e)), this;\n  }\n  clone() {\n    return new We(this.rgb);\n  }\n  alpha(t) {\n    return this._rgb.a = xt(t), this;\n  }\n  clearer(t) {\n    const e = this._rgb;\n    return e.a *= 1 - t, this;\n  }\n  greyscale() {\n    const t = this._rgb, e = he(t.r * 0.3 + t.g * 0.59 + t.b * 0.11);\n    return t.r = t.g = t.b = e, this;\n  }\n  opaquer(t) {\n    const e = this._rgb;\n    return e.a *= 1 + t, this;\n  }\n  negate() {\n    const t = this._rgb;\n    return t.r = 255 - t.r, t.g = 255 - t.g, t.b = 255 - t.b, this;\n  }\n  lighten(t) {\n    return Ce(this._rgb, 2, t), this;\n  }\n  darken(t) {\n    return Ce(this._rgb, 2, -t), this;\n  }\n  saturate(t) {\n    return Ce(this._rgb, 1, t), this;\n  }\n  desaturate(t) {\n    return Ce(this._rgb, 1, -t), this;\n  }\n  rotate(t) {\n    return Go(this._rgb, t), this;\n  }\n}\nfunction yn(i) {\n  return new We(i);\n}\nfunction vn(i) {\n  if (i && typeof i == \"object\") {\n    const t = i.toString();\n    return t === \"[object CanvasPattern]\" || t === \"[object CanvasGradient]\";\n  }\n  return !1;\n}\nfunction ns(i) {\n  return vn(i) ? i : yn(i);\n}\nfunction oi(i) {\n  return vn(i) ? i : yn(i).saturate(0.5).darken(0.1).hexString();\n}\nconst At = /* @__PURE__ */ Object.create(null), _i = /* @__PURE__ */ Object.create(null);\nfunction ie(i, t) {\n  if (!t)\n    return i;\n  const e = t.split(\".\");\n  for (let s = 0, n = e.length; s < n; ++s) {\n    const o = e[s];\n    i = i[o] || (i[o] = /* @__PURE__ */ Object.create(null));\n  }\n  return i;\n}\nfunction ri(i, t, e) {\n  return typeof t == \"string\" ? ne(ie(i, t), e) : ne(ie(i, \"\"), t);\n}\nclass or {\n  constructor(t) {\n    this.animation = void 0, this.backgroundColor = \"rgba(0,0,0,0.1)\", this.borderColor = \"rgba(0,0,0,0.1)\", this.color = \"#666\", this.datasets = {}, this.devicePixelRatio = (e) => e.chart.platform.getDevicePixelRatio(), this.elements = {}, this.events = [\n      \"mousemove\",\n      \"mouseout\",\n      \"click\",\n      \"touchstart\",\n      \"touchmove\"\n    ], this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: \"normal\",\n      lineHeight: 1.2,\n      weight: null\n    }, this.hover = {}, this.hoverBackgroundColor = (e, s) => oi(s.backgroundColor), this.hoverBorderColor = (e, s) => oi(s.borderColor), this.hoverColor = (e, s) => oi(s.color), this.indexAxis = \"x\", this.interaction = {\n      mode: \"nearest\",\n      intersect: !0,\n      includeInvisible: !1\n    }, this.maintainAspectRatio = !0, this.onHover = null, this.onClick = null, this.parsing = !0, this.plugins = {}, this.responsive = !0, this.scale = void 0, this.scales = {}, this.showLine = !0, this.drawActiveElementsOnTop = !0, this.describe(t);\n  }\n  set(t, e) {\n    return ri(this, t, e);\n  }\n  get(t) {\n    return ie(this, t);\n  }\n  describe(t, e) {\n    return ri(_i, t, e);\n  }\n  override(t, e) {\n    return ri(At, t, e);\n  }\n  route(t, e, s, n) {\n    const o = ie(this, t), r = ie(this, s), a = \"_\" + e;\n    Object.defineProperties(o, {\n      [a]: {\n        value: o[e],\n        writable: !0\n      },\n      [e]: {\n        enumerable: !0,\n        get() {\n          const l = this[a], c = r[n];\n          return D(l) ? Object.assign({}, c, l) : C(l, c);\n        },\n        set(l) {\n          this[a] = l;\n        }\n      }\n    });\n  }\n}\nvar O = new or({\n  _scriptable: (i) => !i.startsWith(\"on\"),\n  _indexable: (i) => i !== \"events\",\n  hover: {\n    _fallback: \"interaction\"\n  },\n  interaction: {\n    _scriptable: !1,\n    _indexable: !1\n  }\n});\nfunction rr(i) {\n  return !i || T(i.size) || T(i.family) ? null : (i.style ? i.style + \" \" : \"\") + (i.weight ? i.weight + \" \" : \"\") + i.size + \"px \" + i.family;\n}\nfunction Ne(i, t, e, s, n) {\n  let o = t[n];\n  return o || (o = t[n] = i.measureText(n).width, e.push(n)), o > s && (s = o), s;\n}\nfunction ar(i, t, e, s) {\n  s = s || {};\n  let n = s.data = s.data || {}, o = s.garbageCollect = s.garbageCollect || [];\n  s.font !== t && (n = s.data = {}, o = s.garbageCollect = [], s.font = t), i.save(), i.font = t;\n  let r = 0;\n  const a = e.length;\n  let l, c, h, d, u;\n  for (l = 0; l < a; l++)\n    if (d = e[l], d != null && z(d) !== !0)\n      r = Ne(i, n, o, r, d);\n    else if (z(d))\n      for (c = 0, h = d.length; c < h; c++)\n        u = d[c], u != null && !z(u) && (r = Ne(i, n, o, r, u));\n  i.restore();\n  const f = o.length / 2;\n  if (f > e.length) {\n    for (l = 0; l < f; l++)\n      delete n[o[l]];\n    o.splice(0, f);\n  }\n  return r;\n}\nfunction wt(i, t, e) {\n  const s = i.currentDevicePixelRatio, n = e !== 0 ? Math.max(e / 2, 0.5) : 0;\n  return Math.round((t - n) * s) / s + n;\n}\nfunction os(i, t) {\n  t = t || i.getContext(\"2d\"), t.save(), t.resetTransform(), t.clearRect(0, 0, i.width, i.height), t.restore();\n}\nfunction yi(i, t, e, s) {\n  Mn(i, t, e, s, null);\n}\nfunction Mn(i, t, e, s, n) {\n  let o, r, a, l, c, h;\n  const d = t.pointStyle, u = t.rotation, f = t.radius;\n  let g = (u || 0) * Co;\n  if (d && typeof d == \"object\" && (o = d.toString(), o === \"[object HTMLImageElement]\" || o === \"[object HTMLCanvasElement]\")) {\n    i.save(), i.translate(e, s), i.rotate(g), i.drawImage(d, -d.width / 2, -d.height / 2, d.width, d.height), i.restore();\n    return;\n  }\n  if (!(isNaN(f) || f <= 0)) {\n    switch (i.beginPath(), d) {\n      default:\n        n ? i.ellipse(e, s, n / 2, f, 0, 0, F) : i.arc(e, s, f, 0, F), i.closePath();\n        break;\n      case \"triangle\":\n        i.moveTo(e + Math.sin(g) * f, s - Math.cos(g) * f), g += Ki, i.lineTo(e + Math.sin(g) * f, s - Math.cos(g) * f), g += Ki, i.lineTo(e + Math.sin(g) * f, s - Math.cos(g) * f), i.closePath();\n        break;\n      case \"rectRounded\":\n        c = f * 0.516, l = f - c, r = Math.cos(g + $t) * l, a = Math.sin(g + $t) * l, i.arc(e - r, s - a, c, g - B, g - V), i.arc(e + a, s - r, c, g - V, g), i.arc(e + r, s + a, c, g, g + V), i.arc(e - a, s + r, c, g + V, g + B), i.closePath();\n        break;\n      case \"rect\":\n        if (!u) {\n          l = Math.SQRT1_2 * f, h = n ? n / 2 : l, i.rect(e - h, s - l, 2 * h, 2 * l);\n          break;\n        }\n        g += $t;\n      case \"rectRot\":\n        r = Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + a, s - r), i.lineTo(e + r, s + a), i.lineTo(e - a, s + r), i.closePath();\n        break;\n      case \"crossRot\":\n        g += $t;\n      case \"cross\":\n        r = Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + r, s + a), i.moveTo(e + a, s - r), i.lineTo(e - a, s + r);\n        break;\n      case \"star\":\n        r = Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + r, s + a), i.moveTo(e + a, s - r), i.lineTo(e - a, s + r), g += $t, r = Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + r, s + a), i.moveTo(e + a, s - r), i.lineTo(e - a, s + r);\n        break;\n      case \"line\":\n        r = n ? n / 2 : Math.cos(g) * f, a = Math.sin(g) * f, i.moveTo(e - r, s - a), i.lineTo(e + r, s + a);\n        break;\n      case \"dash\":\n        i.moveTo(e, s), i.lineTo(e + Math.cos(g) * f, s + Math.sin(g) * f);\n        break;\n    }\n    i.fill(), t.borderWidth > 0 && i.stroke();\n  }\n}\nfunction re(i, t, e) {\n  return e = e || 0.5, !t || i && i.x > t.left - e && i.x < t.right + e && i.y > t.top - e && i.y < t.bottom + e;\n}\nfunction Xe(i, t) {\n  i.save(), i.beginPath(), i.rect(t.left, t.top, t.right - t.left, t.bottom - t.top), i.clip();\n}\nfunction Ue(i) {\n  i.restore();\n}\nfunction lr(i, t, e, s, n) {\n  if (!t)\n    return i.lineTo(e.x, e.y);\n  if (n === \"middle\") {\n    const o = (t.x + e.x) / 2;\n    i.lineTo(o, t.y), i.lineTo(o, e.y);\n  } else\n    n === \"after\" != !!s ? i.lineTo(t.x, e.y) : i.lineTo(e.x, t.y);\n  i.lineTo(e.x, e.y);\n}\nfunction cr(i, t, e, s) {\n  if (!t)\n    return i.lineTo(e.x, e.y);\n  i.bezierCurveTo(\n    s ? t.cp1x : t.cp2x,\n    s ? t.cp1y : t.cp2y,\n    s ? e.cp2x : e.cp1x,\n    s ? e.cp2y : e.cp1y,\n    e.x,\n    e.y\n  );\n}\nfunction Tt(i, t, e, s, n, o = {}) {\n  const r = z(t) ? t : [t], a = o.strokeWidth > 0 && o.strokeColor !== \"\";\n  let l, c;\n  for (i.save(), i.font = n.string, hr(i, o), l = 0; l < r.length; ++l)\n    c = r[l], a && (o.strokeColor && (i.strokeStyle = o.strokeColor), T(o.strokeWidth) || (i.lineWidth = o.strokeWidth), i.strokeText(c, e, s, o.maxWidth)), i.fillText(c, e, s, o.maxWidth), dr(i, e, s, c, o), s += n.lineHeight;\n  i.restore();\n}\nfunction hr(i, t) {\n  t.translation && i.translate(t.translation[0], t.translation[1]), T(t.rotation) || i.rotate(t.rotation), t.color && (i.fillStyle = t.color), t.textAlign && (i.textAlign = t.textAlign), t.textBaseline && (i.textBaseline = t.textBaseline);\n}\nfunction dr(i, t, e, s, n) {\n  if (n.strikethrough || n.underline) {\n    const o = i.measureText(s), r = t - o.actualBoundingBoxLeft, a = t + o.actualBoundingBoxRight, l = e - o.actualBoundingBoxAscent, c = e + o.actualBoundingBoxDescent, h = n.strikethrough ? (l + c) / 2 : c;\n    i.strokeStyle = i.fillStyle, i.beginPath(), i.lineWidth = n.decorationWidth || 2, i.moveTo(r, h), i.lineTo(a, h), i.stroke();\n  }\n}\nfunction ae(i, t) {\n  const { x: e, y: s, w: n, h: o, radius: r } = t;\n  i.arc(e + r.topLeft, s + r.topLeft, r.topLeft, -V, B, !0), i.lineTo(e, s + o - r.bottomLeft), i.arc(e + r.bottomLeft, s + o - r.bottomLeft, r.bottomLeft, B, V, !0), i.lineTo(e + n - r.bottomRight, s + o), i.arc(e + n - r.bottomRight, s + o - r.bottomRight, r.bottomRight, V, 0, !0), i.lineTo(e + n, s + r.topRight), i.arc(e + n - r.topRight, s + r.topRight, r.topRight, 0, -V, !0), i.lineTo(e + r.topLeft, s);\n}\nconst ur = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/), fr = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\nfunction gr(i, t) {\n  const e = (\"\" + i).match(ur);\n  if (!e || e[1] === \"normal\")\n    return t * 1.2;\n  switch (i = +e[2], e[3]) {\n    case \"px\":\n      return i;\n    case \"%\":\n      i /= 100;\n      break;\n  }\n  return t * i;\n}\nconst pr = (i) => +i || 0;\nfunction Ii(i, t) {\n  const e = {}, s = D(t), n = s ? Object.keys(t) : t, o = D(i) ? s ? (r) => C(i[r], i[t[r]]) : (r) => i[r] : () => i;\n  for (const r of n)\n    e[r] = pr(o(r));\n  return e;\n}\nfunction kn(i) {\n  return Ii(i, { top: \"y\", right: \"x\", bottom: \"y\", left: \"x\" });\n}\nfunction Dt(i) {\n  return Ii(i, [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]);\n}\nfunction K(i) {\n  const t = kn(i);\n  return t.width = t.left + t.right, t.height = t.top + t.bottom, t;\n}\nfunction $(i, t) {\n  i = i || {}, t = t || O.font;\n  let e = C(i.size, t.size);\n  typeof e == \"string\" && (e = parseInt(e, 10));\n  let s = C(i.style, t.style);\n  s && !(\"\" + s).match(fr) && (console.warn('Invalid font style specified: \"' + s + '\"'), s = \"\");\n  const n = {\n    family: C(i.family, t.family),\n    lineHeight: gr(C(i.lineHeight, t.lineHeight), e),\n    size: e,\n    style: s,\n    weight: C(i.weight, t.weight),\n    string: \"\"\n  };\n  return n.string = rr(n), n;\n}\nfunction Zt(i, t, e, s) {\n  let n = !0, o, r, a;\n  for (o = 0, r = i.length; o < r; ++o)\n    if (a = i[o], a !== void 0 && (t !== void 0 && typeof a == \"function\" && (a = a(t), n = !1), e !== void 0 && z(a) && (a = a[e % a.length], n = !1), a !== void 0))\n      return s && !n && (s.cacheable = !1), a;\n}\nfunction mr(i, t, e) {\n  const { min: s, max: n } = i, o = an(t, (n - s) / 2), r = (a, l) => e && a === 0 ? 0 : a + l;\n  return {\n    min: r(s, -Math.abs(o)),\n    max: r(n, o)\n  };\n}\nfunction vt(i, t) {\n  return Object.assign(Object.create(i), t);\n}\nfunction zi(i, t = [\"\"], e = i, s, n = () => i[0]) {\n  et(s) || (s = Cn(\"_fallback\", i));\n  const o = {\n    [Symbol.toStringTag]: \"Object\",\n    _cacheable: !0,\n    _scopes: i,\n    _rootScopes: e,\n    _fallback: s,\n    _getTarget: n,\n    override: (r) => zi([r, ...i], t, e, s)\n  };\n  return new Proxy(o, {\n    deleteProperty(r, a) {\n      return delete r[a], delete r._keys, delete i[0][a], !0;\n    },\n    get(r, a) {\n      return Sn(\n        r,\n        a,\n        () => wr(a, t, i, r)\n      );\n    },\n    getOwnPropertyDescriptor(r, a) {\n      return Reflect.getOwnPropertyDescriptor(r._scopes[0], a);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(i[0]);\n    },\n    has(r, a) {\n      return as(r).includes(a);\n    },\n    ownKeys(r) {\n      return as(r);\n    },\n    set(r, a, l) {\n      const c = r._storage || (r._storage = n());\n      return r[a] = c[a] = l, delete r._keys, !0;\n    }\n  });\n}\nfunction Vt(i, t, e, s) {\n  const n = {\n    _cacheable: !1,\n    _proxy: i,\n    _context: t,\n    _subProxy: e,\n    _stack: /* @__PURE__ */ new Set(),\n    _descriptors: wn(i, s),\n    setContext: (o) => Vt(i, o, e, s),\n    override: (o) => Vt(i.override(o), t, e, s)\n  };\n  return new Proxy(n, {\n    deleteProperty(o, r) {\n      return delete o[r], delete i[r], !0;\n    },\n    get(o, r, a) {\n      return Sn(\n        o,\n        r,\n        () => xr(o, r, a)\n      );\n    },\n    getOwnPropertyDescriptor(o, r) {\n      return o._descriptors.allKeys ? Reflect.has(i, r) ? { enumerable: !0, configurable: !0 } : void 0 : Reflect.getOwnPropertyDescriptor(i, r);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(i);\n    },\n    has(o, r) {\n      return Reflect.has(i, r);\n    },\n    ownKeys() {\n      return Reflect.ownKeys(i);\n    },\n    set(o, r, a) {\n      return i[r] = a, delete o[r], !0;\n    }\n  });\n}\nfunction wn(i, t = { scriptable: !0, indexable: !0 }) {\n  const { _scriptable: e = t.scriptable, _indexable: s = t.indexable, _allKeys: n = t.allKeys } = i;\n  return {\n    allKeys: n,\n    scriptable: e,\n    indexable: s,\n    isScriptable: yt(e) ? e : () => e,\n    isIndexable: yt(s) ? s : () => s\n  };\n}\nconst br = (i, t) => i ? i + Oi(t) : t, Bi = (i, t) => D(t) && i !== \"adapters\" && (Object.getPrototypeOf(t) === null || t.constructor === Object);\nfunction Sn(i, t, e) {\n  if (Object.prototype.hasOwnProperty.call(i, t))\n    return i[t];\n  const s = e();\n  return i[t] = s, s;\n}\nfunction xr(i, t, e) {\n  const { _proxy: s, _context: n, _subProxy: o, _descriptors: r } = i;\n  let a = s[t];\n  return yt(a) && r.isScriptable(t) && (a = _r(t, a, i, e)), z(a) && a.length && (a = yr(t, a, i, r.isIndexable)), Bi(t, a) && (a = Vt(a, n, o && o[t], r)), a;\n}\nfunction _r(i, t, e, s) {\n  const { _proxy: n, _context: o, _subProxy: r, _stack: a } = e;\n  if (a.has(i))\n    throw new Error(\"Recursion detected: \" + Array.from(a).join(\"->\") + \"->\" + i);\n  return a.add(i), t = t(o, r || s), a.delete(i), Bi(i, t) && (t = Vi(n._scopes, n, i, t)), t;\n}\nfunction yr(i, t, e, s) {\n  const { _proxy: n, _context: o, _subProxy: r, _descriptors: a } = e;\n  if (et(o.index) && s(i))\n    t = t[o.index % t.length];\n  else if (D(t[0])) {\n    const l = t, c = n._scopes.filter((h) => h !== l);\n    t = [];\n    for (const h of l) {\n      const d = Vi(c, n, i, h);\n      t.push(Vt(d, o, r && r[i], a));\n    }\n  }\n  return t;\n}\nfunction Pn(i, t, e) {\n  return yt(i) ? i(t, e) : i;\n}\nconst vr = (i, t) => i === !0 ? t : typeof i == \"string\" ? _t(t, i) : void 0;\nfunction Mr(i, t, e, s, n) {\n  for (const o of t) {\n    const r = vr(e, o);\n    if (r) {\n      i.add(r);\n      const a = Pn(r._fallback, e, n);\n      if (et(a) && a !== e && a !== s)\n        return a;\n    } else if (r === !1 && et(s) && e !== s)\n      return null;\n  }\n  return !1;\n}\nfunction Vi(i, t, e, s) {\n  const n = t._rootScopes, o = Pn(t._fallback, e, s), r = [...i, ...n], a = /* @__PURE__ */ new Set();\n  a.add(s);\n  let l = rs(a, r, e, o || e, s);\n  return l === null || et(o) && o !== e && (l = rs(a, r, o, l, s), l === null) ? !1 : zi(\n    Array.from(a),\n    [\"\"],\n    n,\n    o,\n    () => kr(t, e, s)\n  );\n}\nfunction rs(i, t, e, s, n) {\n  for (; e; )\n    e = Mr(i, t, e, s, n);\n  return e;\n}\nfunction kr(i, t, e) {\n  const s = i._getTarget();\n  t in s || (s[t] = {});\n  const n = s[t];\n  return z(n) && D(e) ? e : n;\n}\nfunction wr(i, t, e, s) {\n  let n;\n  for (const o of t)\n    if (n = Cn(br(o, i), e), et(n))\n      return Bi(i, n) ? Vi(e, s, i, n) : n;\n}\nfunction Cn(i, t) {\n  for (const e of t) {\n    if (!e)\n      continue;\n    const s = e[i];\n    if (et(s))\n      return s;\n  }\n}\nfunction as(i) {\n  let t = i._keys;\n  return t || (t = i._keys = Sr(i._scopes)), t;\n}\nfunction Sr(i) {\n  const t = /* @__PURE__ */ new Set();\n  for (const e of i)\n    for (const s of Object.keys(e).filter((n) => !n.startsWith(\"_\")))\n      t.add(s);\n  return Array.from(t);\n}\nfunction Dn(i, t, e, s) {\n  const { iScale: n } = i, { key: o = \"r\" } = this._parsing, r = new Array(s);\n  let a, l, c, h;\n  for (a = 0, l = s; a < l; ++a)\n    c = a + e, h = t[c], r[a] = {\n      r: n.parse(_t(h, o), c)\n    };\n  return r;\n}\nconst Pr = Number.EPSILON || 1e-14, Wt = (i, t) => t < i.length && !i[t].skip && i[t], On = (i) => i === \"x\" ? \"y\" : \"x\";\nfunction Cr(i, t, e, s) {\n  const n = i.skip ? t : i, o = t, r = e.skip ? t : e, a = bi(o, n), l = bi(r, o);\n  let c = a / (a + l), h = l / (a + l);\n  c = isNaN(c) ? 0 : c, h = isNaN(h) ? 0 : h;\n  const d = s * c, u = s * h;\n  return {\n    previous: {\n      x: o.x - d * (r.x - n.x),\n      y: o.y - d * (r.y - n.y)\n    },\n    next: {\n      x: o.x + u * (r.x - n.x),\n      y: o.y + u * (r.y - n.y)\n    }\n  };\n}\nfunction Dr(i, t, e) {\n  const s = i.length;\n  let n, o, r, a, l, c = Wt(i, 0);\n  for (let h = 0; h < s - 1; ++h)\n    if (l = c, c = Wt(i, h + 1), !(!l || !c)) {\n      if (te(t[h], 0, Pr)) {\n        e[h] = e[h + 1] = 0;\n        continue;\n      }\n      n = e[h] / t[h], o = e[h + 1] / t[h], a = Math.pow(n, 2) + Math.pow(o, 2), !(a <= 9) && (r = 3 / Math.sqrt(a), e[h] = n * r * t[h], e[h + 1] = o * r * t[h]);\n    }\n}\nfunction Or(i, t, e = \"x\") {\n  const s = On(e), n = i.length;\n  let o, r, a, l = Wt(i, 0);\n  for (let c = 0; c < n; ++c) {\n    if (r = a, a = l, l = Wt(i, c + 1), !a)\n      continue;\n    const h = a[e], d = a[s];\n    r && (o = (h - r[e]) / 3, a[`cp1${e}`] = h - o, a[`cp1${s}`] = d - o * t[c]), l && (o = (l[e] - h) / 3, a[`cp2${e}`] = h + o, a[`cp2${s}`] = d + o * t[c]);\n  }\n}\nfunction Ar(i, t = \"x\") {\n  const e = On(t), s = i.length, n = Array(s).fill(0), o = Array(s);\n  let r, a, l, c = Wt(i, 0);\n  for (r = 0; r < s; ++r)\n    if (a = l, l = c, c = Wt(i, r + 1), !!l) {\n      if (c) {\n        const h = c[t] - l[t];\n        n[r] = h !== 0 ? (c[e] - l[e]) / h : 0;\n      }\n      o[r] = a ? c ? lt(n[r - 1]) !== lt(n[r]) ? 0 : (n[r - 1] + n[r]) / 2 : n[r - 1] : n[r];\n    }\n  Dr(i, n, o), Or(i, o, t);\n}\nfunction De(i, t, e) {\n  return Math.max(Math.min(i, e), t);\n}\nfunction Tr(i, t) {\n  let e, s, n, o, r, a = re(i[0], t);\n  for (e = 0, s = i.length; e < s; ++e)\n    r = o, o = a, a = e < s - 1 && re(i[e + 1], t), o && (n = i[e], r && (n.cp1x = De(n.cp1x, t.left, t.right), n.cp1y = De(n.cp1y, t.top, t.bottom)), a && (n.cp2x = De(n.cp2x, t.left, t.right), n.cp2y = De(n.cp2y, t.top, t.bottom)));\n}\nfunction Lr(i, t, e, s, n) {\n  let o, r, a, l;\n  if (t.spanGaps && (i = i.filter((c) => !c.skip)), t.cubicInterpolationMode === \"monotone\")\n    Ar(i, n);\n  else {\n    let c = s ? i[i.length - 1] : i[0];\n    for (o = 0, r = i.length; o < r; ++o)\n      a = i[o], l = Cr(\n        c,\n        a,\n        i[Math.min(o + 1, r - (s ? 0 : 1)) % r],\n        t.tension\n      ), a.cp1x = l.previous.x, a.cp1y = l.previous.y, a.cp2x = l.next.x, a.cp2y = l.next.y, c = a;\n  }\n  t.capBezierPoints && Tr(i, e);\n}\nfunction An() {\n  return typeof window < \"u\" && typeof document < \"u\";\n}\nfunction Wi(i) {\n  let t = i.parentNode;\n  return t && t.toString() === \"[object ShadowRoot]\" && (t = t.host), t;\n}\nfunction He(i, t, e) {\n  let s;\n  return typeof i == \"string\" ? (s = parseInt(i, 10), i.indexOf(\"%\") !== -1 && (s = s / 100 * t.parentNode[e])) : s = i, s;\n}\nconst Ke = (i) => window.getComputedStyle(i, null);\nfunction Rr(i, t) {\n  return Ke(i).getPropertyValue(t);\n}\nconst Er = [\"top\", \"right\", \"bottom\", \"left\"];\nfunction Ot(i, t, e) {\n  const s = {};\n  e = e ? \"-\" + e : \"\";\n  for (let n = 0; n < 4; n++) {\n    const o = Er[n];\n    s[o] = parseFloat(i[t + \"-\" + o + e]) || 0;\n  }\n  return s.width = s.left + s.right, s.height = s.top + s.bottom, s;\n}\nconst Fr = (i, t, e) => (i > 0 || t > 0) && (!e || !e.shadowRoot);\nfunction Ir(i, t) {\n  const e = i.touches, s = e && e.length ? e[0] : i, { offsetX: n, offsetY: o } = s;\n  let r = !1, a, l;\n  if (Fr(n, o, i.target))\n    a = n, l = o;\n  else {\n    const c = t.getBoundingClientRect();\n    a = s.clientX - c.left, l = s.clientY - c.top, r = !0;\n  }\n  return { x: a, y: l, box: r };\n}\nfunction Pt(i, t) {\n  if (\"native\" in i)\n    return i;\n  const { canvas: e, currentDevicePixelRatio: s } = t, n = Ke(e), o = n.boxSizing === \"border-box\", r = Ot(n, \"padding\"), a = Ot(n, \"border\", \"width\"), { x: l, y: c, box: h } = Ir(i, e), d = r.left + (h && a.left), u = r.top + (h && a.top);\n  let { width: f, height: g } = t;\n  return o && (f -= r.width + a.width, g -= r.height + a.height), {\n    x: Math.round((l - d) / f * e.width / s),\n    y: Math.round((c - u) / g * e.height / s)\n  };\n}\nfunction zr(i, t, e) {\n  let s, n;\n  if (t === void 0 || e === void 0) {\n    const o = Wi(i);\n    if (!o)\n      t = i.clientWidth, e = i.clientHeight;\n    else {\n      const r = o.getBoundingClientRect(), a = Ke(o), l = Ot(a, \"border\", \"width\"), c = Ot(a, \"padding\");\n      t = r.width - c.width - l.width, e = r.height - c.height - l.height, s = He(a.maxWidth, o, \"clientWidth\"), n = He(a.maxHeight, o, \"clientHeight\");\n    }\n  }\n  return {\n    width: t,\n    height: e,\n    maxWidth: s || Ve,\n    maxHeight: n || Ve\n  };\n}\nconst ai = (i) => Math.round(i * 10) / 10;\nfunction Br(i, t, e, s) {\n  const n = Ke(i), o = Ot(n, \"margin\"), r = He(n.maxWidth, i, \"clientWidth\") || Ve, a = He(n.maxHeight, i, \"clientHeight\") || Ve, l = zr(i, t, e);\n  let { width: c, height: h } = l;\n  if (n.boxSizing === \"content-box\") {\n    const d = Ot(n, \"border\", \"width\"), u = Ot(n, \"padding\");\n    c -= u.width + d.width, h -= u.height + d.height;\n  }\n  return c = Math.max(0, c - o.width), h = Math.max(0, s ? Math.floor(c / s) : h - o.height), c = ai(Math.min(c, r, l.maxWidth)), h = ai(Math.min(h, a, l.maxHeight)), c && !h && (h = ai(c / 2)), {\n    width: c,\n    height: h\n  };\n}\nfunction ls(i, t, e) {\n  const s = t || 1, n = Math.floor(i.height * s), o = Math.floor(i.width * s);\n  i.height = n / s, i.width = o / s;\n  const r = i.canvas;\n  return r.style && (e || !r.style.height && !r.style.width) && (r.style.height = `${i.height}px`, r.style.width = `${i.width}px`), i.currentDevicePixelRatio !== s || r.height !== n || r.width !== o ? (i.currentDevicePixelRatio = s, r.height = n, r.width = o, i.ctx.setTransform(s, 0, 0, s, 0, 0), !0) : !1;\n}\nconst Vr = function() {\n  let i = !1;\n  try {\n    const t = {\n      get passive() {\n        return i = !0, !1;\n      }\n    };\n    window.addEventListener(\"test\", null, t), window.removeEventListener(\"test\", null, t);\n  } catch {\n  }\n  return i;\n}();\nfunction cs(i, t) {\n  const e = Rr(i, t), s = e && e.match(/^(\\d+)(\\.\\d+)?px$/);\n  return s ? +s[1] : void 0;\n}\nfunction Ct(i, t, e, s) {\n  return {\n    x: i.x + e * (t.x - i.x),\n    y: i.y + e * (t.y - i.y)\n  };\n}\nfunction Wr(i, t, e, s) {\n  return {\n    x: i.x + e * (t.x - i.x),\n    y: s === \"middle\" ? e < 0.5 ? i.y : t.y : s === \"after\" ? e < 1 ? i.y : t.y : e > 0 ? t.y : i.y\n  };\n}\nfunction Nr(i, t, e, s) {\n  const n = { x: i.cp2x, y: i.cp2y }, o = { x: t.cp1x, y: t.cp1y }, r = Ct(i, n, e), a = Ct(n, o, e), l = Ct(o, t, e), c = Ct(r, a, e), h = Ct(a, l, e);\n  return Ct(c, h, e);\n}\nconst hs = /* @__PURE__ */ new Map();\nfunction Hr(i, t) {\n  t = t || {};\n  const e = i + JSON.stringify(t);\n  let s = hs.get(e);\n  return s || (s = new Intl.NumberFormat(i, t), hs.set(e, s)), s;\n}\nfunction de(i, t, e) {\n  return Hr(t, e).format(i);\n}\nconst jr = function(i, t) {\n  return {\n    x(e) {\n      return i + i + t - e;\n    },\n    setWidth(e) {\n      t = e;\n    },\n    textAlign(e) {\n      return e === \"center\" ? e : e === \"right\" ? \"left\" : \"right\";\n    },\n    xPlus(e, s) {\n      return e - s;\n    },\n    leftForLtr(e, s) {\n      return e - s;\n    }\n  };\n}, $r = function() {\n  return {\n    x(i) {\n      return i;\n    },\n    setWidth(i) {\n    },\n    textAlign(i) {\n      return i;\n    },\n    xPlus(i, t) {\n      return i + t;\n    },\n    leftForLtr(i, t) {\n      return i;\n    }\n  };\n};\nfunction zt(i, t, e) {\n  return i ? jr(t, e) : $r();\n}\nfunction Tn(i, t) {\n  let e, s;\n  (t === \"ltr\" || t === \"rtl\") && (e = i.canvas.style, s = [\n    e.getPropertyValue(\"direction\"),\n    e.getPropertyPriority(\"direction\")\n  ], e.setProperty(\"direction\", t, \"important\"), i.prevTextDirection = s);\n}\nfunction Ln(i, t) {\n  t !== void 0 && (delete i.prevTextDirection, i.canvas.style.setProperty(\"direction\", t[0], t[1]));\n}\nfunction Rn(i) {\n  return i === \"angle\" ? {\n    between: oe,\n    compare: Ao,\n    normalize: Z\n  } : {\n    between: ut,\n    compare: (t, e) => t - e,\n    normalize: (t) => t\n  };\n}\nfunction ds({ start: i, end: t, count: e, loop: s, style: n }) {\n  return {\n    start: i % e,\n    end: t % e,\n    loop: s && (t - i + 1) % e === 0,\n    style: n\n  };\n}\nfunction Yr(i, t, e) {\n  const { property: s, start: n, end: o } = e, { between: r, normalize: a } = Rn(s), l = t.length;\n  let { start: c, end: h, loop: d } = i, u, f;\n  if (d) {\n    for (c += l, h += l, u = 0, f = l; u < f && r(a(t[c % l][s]), n, o); ++u)\n      c--, h--;\n    c %= l, h %= l;\n  }\n  return h < c && (h += l), { start: c, end: h, loop: d, style: i.style };\n}\nfunction En(i, t, e) {\n  if (!e)\n    return [i];\n  const { property: s, start: n, end: o } = e, r = t.length, { compare: a, between: l, normalize: c } = Rn(s), { start: h, end: d, loop: u, style: f } = Yr(i, t, e), g = [];\n  let p = !1, m = null, b, x, v;\n  const y = () => l(n, v, b) && a(n, v) !== 0, _ = () => a(o, b) === 0 || l(o, v, b), M = () => p || y(), k = () => !p || _();\n  for (let S = h, w = h; S <= d; ++S)\n    x = t[S % r], !x.skip && (b = c(x[s]), b !== v && (p = l(b, n, o), m === null && M() && (m = a(b, n) === 0 ? S : w), m !== null && k() && (g.push(ds({ start: m, end: S, loop: u, count: r, style: f })), m = null), w = S, v = b));\n  return m !== null && g.push(ds({ start: m, end: d, loop: u, count: r, style: f })), g;\n}\nfunction Fn(i, t) {\n  const e = [], s = i.segments;\n  for (let n = 0; n < s.length; n++) {\n    const o = En(s[n], i.points, t);\n    o.length && e.push(...o);\n  }\n  return e;\n}\nfunction Xr(i, t, e, s) {\n  let n = 0, o = t - 1;\n  if (e && !s)\n    for (; n < t && !i[n].skip; )\n      n++;\n  for (; n < t && i[n].skip; )\n    n++;\n  for (n %= t, e && (o += n); o > n && i[o % t].skip; )\n    o--;\n  return o %= t, { start: n, end: o };\n}\nfunction Ur(i, t, e, s) {\n  const n = i.length, o = [];\n  let r = t, a = i[t], l;\n  for (l = t + 1; l <= e; ++l) {\n    const c = i[l % n];\n    c.skip || c.stop ? a.skip || (s = !1, o.push({ start: t % n, end: (l - 1) % n, loop: s }), t = r = c.stop ? l : null) : (r = l, a.skip && (t = l)), a = c;\n  }\n  return r !== null && o.push({ start: t % n, end: r % n, loop: s }), o;\n}\nfunction Kr(i, t) {\n  const e = i.points, s = i.options.spanGaps, n = e.length;\n  if (!n)\n    return [];\n  const o = !!i._loop, { start: r, end: a } = Xr(e, n, o, s);\n  if (s === !0)\n    return us(i, [{ start: r, end: a, loop: o }], e, t);\n  const l = a < r ? a + n : a, c = !!i._fullLoop && r === 0 && a === n - 1;\n  return us(i, Ur(e, r, l, c), e, t);\n}\nfunction us(i, t, e, s) {\n  return !s || !s.setContext || !e ? t : qr(i, t, e, s);\n}\nfunction qr(i, t, e, s) {\n  const n = i._chart.getContext(), o = fs(i.options), { _datasetIndex: r, options: { spanGaps: a } } = i, l = e.length, c = [];\n  let h = o, d = t[0].start, u = d;\n  function f(g, p, m, b) {\n    const x = a ? -1 : 1;\n    if (g !== p) {\n      for (g += l; e[g % l].skip; )\n        g -= x;\n      for (; e[p % l].skip; )\n        p += x;\n      g % l !== p % l && (c.push({ start: g % l, end: p % l, loop: m, style: b }), h = b, d = p % l);\n    }\n  }\n  for (const g of t) {\n    d = a ? d : g.start;\n    let p = e[d % l], m;\n    for (u = d + 1; u <= g.end; u++) {\n      const b = e[u % l];\n      m = fs(s.setContext(vt(n, {\n        type: \"segment\",\n        p0: p,\n        p1: b,\n        p0DataIndex: (u - 1) % l,\n        p1DataIndex: u % l,\n        datasetIndex: r\n      }))), Gr(m, h) && f(d, u - 1, g.loop, h), p = b, h = m;\n    }\n    d < u - 1 && f(d, u - 1, g.loop, h);\n  }\n  return c;\n}\nfunction fs(i) {\n  return {\n    backgroundColor: i.backgroundColor,\n    borderCapStyle: i.borderCapStyle,\n    borderDash: i.borderDash,\n    borderDashOffset: i.borderDashOffset,\n    borderJoinStyle: i.borderJoinStyle,\n    borderWidth: i.borderWidth,\n    borderColor: i.borderColor\n  };\n}\nfunction Gr(i, t) {\n  return t && JSON.stringify(i) !== JSON.stringify(t);\n}\n/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nclass Zr {\n  constructor() {\n    this._request = null, this._charts = /* @__PURE__ */ new Map(), this._running = !1, this._lastDate = void 0;\n  }\n  _notify(t, e, s, n) {\n    const o = e.listeners[n], r = e.duration;\n    o.forEach((a) => a({\n      chart: t,\n      initial: e.initial,\n      numSteps: r,\n      currentStep: Math.min(s - e.start, r)\n    }));\n  }\n  _refresh() {\n    this._request || (this._running = !0, this._request = fn.call(window, () => {\n      this._update(), this._request = null, this._running && this._refresh();\n    }));\n  }\n  _update(t = Date.now()) {\n    let e = 0;\n    this._charts.forEach((s, n) => {\n      if (!s.running || !s.items.length)\n        return;\n      const o = s.items;\n      let r = o.length - 1, a = !1, l;\n      for (; r >= 0; --r)\n        l = o[r], l._active ? (l._total > s.duration && (s.duration = l._total), l.tick(t), a = !0) : (o[r] = o[o.length - 1], o.pop());\n      a && (n.draw(), this._notify(n, s, t, \"progress\")), o.length || (s.running = !1, this._notify(n, s, t, \"complete\"), s.initial = !1), e += o.length;\n    }), this._lastDate = t, e === 0 && (this._running = !1);\n  }\n  _getAnims(t) {\n    const e = this._charts;\n    let s = e.get(t);\n    return s || (s = {\n      running: !1,\n      initial: !0,\n      items: [],\n      listeners: {\n        complete: [],\n        progress: []\n      }\n    }, e.set(t, s)), s;\n  }\n  listen(t, e, s) {\n    this._getAnims(t).listeners[e].push(s);\n  }\n  add(t, e) {\n    !e || !e.length || this._getAnims(t).items.push(...e);\n  }\n  has(t) {\n    return this._getAnims(t).items.length > 0;\n  }\n  start(t) {\n    const e = this._charts.get(t);\n    e && (e.running = !0, e.start = Date.now(), e.duration = e.items.reduce((s, n) => Math.max(s, n._duration), 0), this._refresh());\n  }\n  running(t) {\n    if (!this._running)\n      return !1;\n    const e = this._charts.get(t);\n    return !(!e || !e.running || !e.items.length);\n  }\n  stop(t) {\n    const e = this._charts.get(t);\n    if (!e || !e.items.length)\n      return;\n    const s = e.items;\n    let n = s.length - 1;\n    for (; n >= 0; --n)\n      s[n].cancel();\n    e.items = [], this._notify(t, e, Date.now(), \"complete\");\n  }\n  remove(t) {\n    return this._charts.delete(t);\n  }\n}\nvar at = new Zr();\nconst gs = \"transparent\", Jr = {\n  boolean(i, t, e) {\n    return e > 0.5 ? t : i;\n  },\n  color(i, t, e) {\n    const s = ns(i || gs), n = s.valid && ns(t || gs);\n    return n && n.valid ? n.mix(s, e).hexString() : t;\n  },\n  number(i, t, e) {\n    return i + (t - i) * e;\n  }\n};\nclass In {\n  constructor(t, e, s, n) {\n    const o = e[s];\n    n = Zt([t.to, n, o, t.from]);\n    const r = Zt([t.from, o, n]);\n    this._active = !0, this._fn = t.fn || Jr[t.type || typeof r], this._easing = ee[t.easing] || ee.linear, this._start = Math.floor(Date.now() + (t.delay || 0)), this._duration = this._total = Math.floor(t.duration), this._loop = !!t.loop, this._target = e, this._prop = s, this._from = r, this._to = n, this._promises = void 0;\n  }\n  active() {\n    return this._active;\n  }\n  update(t, e, s) {\n    if (this._active) {\n      this._notify(!1);\n      const n = this._target[this._prop], o = s - this._start, r = this._duration - o;\n      this._start = s, this._duration = Math.floor(Math.max(r, t.duration)), this._total += o, this._loop = !!t.loop, this._to = Zt([t.to, e, n, t.from]), this._from = Zt([t.from, n, e]);\n    }\n  }\n  cancel() {\n    this._active && (this.tick(Date.now()), this._active = !1, this._notify(!1));\n  }\n  tick(t) {\n    const e = t - this._start, s = this._duration, n = this._prop, o = this._from, r = this._loop, a = this._to;\n    let l;\n    if (this._active = o !== a && (r || e < s), !this._active) {\n      this._target[n] = a, this._notify(!0);\n      return;\n    }\n    if (e < 0) {\n      this._target[n] = o;\n      return;\n    }\n    l = e / s % 2, l = r && l > 1 ? 2 - l : l, l = this._easing(Math.min(1, Math.max(0, l))), this._target[n] = this._fn(o, a, l);\n  }\n  wait() {\n    const t = this._promises || (this._promises = []);\n    return new Promise((e, s) => {\n      t.push({ res: e, rej: s });\n    });\n  }\n  _notify(t) {\n    const e = t ? \"res\" : \"rej\", s = this._promises || [];\n    for (let n = 0; n < s.length; n++)\n      s[n][e]();\n  }\n}\nconst Qr = [\"x\", \"y\", \"borderWidth\", \"radius\", \"tension\"], ta = [\"color\", \"borderColor\", \"backgroundColor\"];\nO.set(\"animation\", {\n  delay: void 0,\n  duration: 1e3,\n  easing: \"easeOutQuart\",\n  fn: void 0,\n  from: void 0,\n  loop: void 0,\n  to: void 0,\n  type: void 0\n});\nconst ea = Object.keys(O.animation);\nO.describe(\"animation\", {\n  _fallback: !1,\n  _indexable: !1,\n  _scriptable: (i) => i !== \"onProgress\" && i !== \"onComplete\" && i !== \"fn\"\n});\nO.set(\"animations\", {\n  colors: {\n    type: \"color\",\n    properties: ta\n  },\n  numbers: {\n    type: \"number\",\n    properties: Qr\n  }\n});\nO.describe(\"animations\", {\n  _fallback: \"animation\"\n});\nO.set(\"transitions\", {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: \"transparent\"\n      },\n      visible: {\n        type: \"boolean\",\n        duration: 0\n      }\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: \"transparent\"\n      },\n      visible: {\n        type: \"boolean\",\n        easing: \"linear\",\n        fn: (i) => i | 0\n      }\n    }\n  }\n});\nclass Ni {\n  constructor(t, e) {\n    this._chart = t, this._properties = /* @__PURE__ */ new Map(), this.configure(e);\n  }\n  configure(t) {\n    if (!D(t))\n      return;\n    const e = this._properties;\n    Object.getOwnPropertyNames(t).forEach((s) => {\n      const n = t[s];\n      if (!D(n))\n        return;\n      const o = {};\n      for (const r of ea)\n        o[r] = n[r];\n      (z(n.properties) && n.properties || [s]).forEach((r) => {\n        (r === s || !e.has(r)) && e.set(r, o);\n      });\n    });\n  }\n  _animateOptions(t, e) {\n    const s = e.options, n = sa(t, s);\n    if (!n)\n      return [];\n    const o = this._createAnimations(n, s);\n    return s.$shared && ia(t.options.$animations, s).then(() => {\n      t.options = s;\n    }, () => {\n    }), o;\n  }\n  _createAnimations(t, e) {\n    const s = this._properties, n = [], o = t.$animations || (t.$animations = {}), r = Object.keys(e), a = Date.now();\n    let l;\n    for (l = r.length - 1; l >= 0; --l) {\n      const c = r[l];\n      if (c.charAt(0) === \"$\")\n        continue;\n      if (c === \"options\") {\n        n.push(...this._animateOptions(t, e));\n        continue;\n      }\n      const h = e[c];\n      let d = o[c];\n      const u = s.get(c);\n      if (d)\n        if (u && d.active()) {\n          d.update(u, h, a);\n          continue;\n        } else\n          d.cancel();\n      if (!u || !u.duration) {\n        t[c] = h;\n        continue;\n      }\n      o[c] = d = new In(u, t, c, h), n.push(d);\n    }\n    return n;\n  }\n  update(t, e) {\n    if (this._properties.size === 0) {\n      Object.assign(t, e);\n      return;\n    }\n    const s = this._createAnimations(t, e);\n    if (s.length)\n      return at.add(this._chart, s), !0;\n  }\n}\nfunction ia(i, t) {\n  const e = [], s = Object.keys(t);\n  for (let n = 0; n < s.length; n++) {\n    const o = i[s[n]];\n    o && o.active() && e.push(o.wait());\n  }\n  return Promise.all(e);\n}\nfunction sa(i, t) {\n  if (!t)\n    return;\n  let e = i.options;\n  if (!e) {\n    i.options = t;\n    return;\n  }\n  return e.$shared && (i.options = e = Object.assign({}, e, { $shared: !1, $animations: {} })), e;\n}\nfunction ps(i, t) {\n  const e = i && i.options || {}, s = e.reverse, n = e.min === void 0 ? t : 0, o = e.max === void 0 ? t : 0;\n  return {\n    start: s ? o : n,\n    end: s ? n : o\n  };\n}\nfunction na(i, t, e) {\n  if (e === !1)\n    return !1;\n  const s = ps(i, e), n = ps(t, e);\n  return {\n    top: n.end,\n    right: s.end,\n    bottom: n.start,\n    left: s.start\n  };\n}\nfunction oa(i) {\n  let t, e, s, n;\n  return D(i) ? (t = i.top, e = i.right, s = i.bottom, n = i.left) : t = e = s = n = i, {\n    top: t,\n    right: e,\n    bottom: s,\n    left: n,\n    disabled: i === !1\n  };\n}\nfunction zn(i, t) {\n  const e = [], s = i._getSortedDatasetMetas(t);\n  let n, o;\n  for (n = 0, o = s.length; n < o; ++n)\n    e.push(s[n].index);\n  return e;\n}\nfunction ms(i, t, e, s = {}) {\n  const n = i.keys, o = s.mode === \"single\";\n  let r, a, l, c;\n  if (t !== null) {\n    for (r = 0, a = n.length; r < a; ++r) {\n      if (l = +n[r], l === e) {\n        if (s.all)\n          continue;\n        break;\n      }\n      c = i.values[l], N(c) && (o || t === 0 || lt(t) === lt(c)) && (t += c);\n    }\n    return t;\n  }\n}\nfunction ra(i) {\n  const t = Object.keys(i), e = new Array(t.length);\n  let s, n, o;\n  for (s = 0, n = t.length; s < n; ++s)\n    o = t[s], e[s] = {\n      x: o,\n      y: i[o]\n    };\n  return e;\n}\nfunction bs(i, t) {\n  const e = i && i.options.stacked;\n  return e || e === void 0 && t.stack !== void 0;\n}\nfunction aa(i, t, e) {\n  return `${i.id}.${t.id}.${e.stack || e.type}`;\n}\nfunction la(i) {\n  const { min: t, max: e, minDefined: s, maxDefined: n } = i.getUserBounds();\n  return {\n    min: s ? t : Number.NEGATIVE_INFINITY,\n    max: n ? e : Number.POSITIVE_INFINITY\n  };\n}\nfunction ca(i, t, e) {\n  const s = i[t] || (i[t] = {});\n  return s[e] || (s[e] = {});\n}\nfunction xs(i, t, e, s) {\n  for (const n of t.getMatchingVisibleMetas(s).reverse()) {\n    const o = i[n.index];\n    if (e && o > 0 || !e && o < 0)\n      return n.index;\n  }\n  return null;\n}\nfunction _s(i, t) {\n  const { chart: e, _cachedMeta: s } = i, n = e._stacks || (e._stacks = {}), { iScale: o, vScale: r, index: a } = s, l = o.axis, c = r.axis, h = aa(o, r, s), d = t.length;\n  let u;\n  for (let f = 0; f < d; ++f) {\n    const g = t[f], { [l]: p, [c]: m } = g, b = g._stacks || (g._stacks = {});\n    u = b[c] = ca(n, h, p), u[a] = m, u._top = xs(u, r, !0, s.type), u._bottom = xs(u, r, !1, s.type);\n  }\n}\nfunction li(i, t) {\n  const e = i.scales;\n  return Object.keys(e).filter((s) => e[s].axis === t).shift();\n}\nfunction ha(i, t) {\n  return vt(\n    i,\n    {\n      active: !1,\n      dataset: void 0,\n      datasetIndex: t,\n      index: t,\n      mode: \"default\",\n      type: \"dataset\"\n    }\n  );\n}\nfunction da(i, t, e) {\n  return vt(i, {\n    active: !1,\n    dataIndex: t,\n    parsed: void 0,\n    raw: void 0,\n    element: e,\n    index: t,\n    mode: \"default\",\n    type: \"data\"\n  });\n}\nfunction Yt(i, t) {\n  const e = i.controller.index, s = i.vScale && i.vScale.axis;\n  if (s) {\n    t = t || i._parsed;\n    for (const n of t) {\n      const o = n._stacks;\n      if (!o || o[s] === void 0 || o[s][e] === void 0)\n        return;\n      delete o[s][e];\n    }\n  }\n}\nconst ci = (i) => i === \"reset\" || i === \"none\", ys = (i, t) => t ? i : Object.assign({}, i), ua = (i, t, e) => i && !t.hidden && t._stacked && { keys: zn(e, !0), values: null };\nclass it {\n  constructor(t, e) {\n    this.chart = t, this._ctx = t.ctx, this.index = e, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = void 0, this._parsing = !1, this._data = void 0, this._objectData = void 0, this._sharedOptions = void 0, this._drawStart = void 0, this._drawCount = void 0, this.enableOptionSharing = !1, this.supportsDecimation = !1, this.$context = void 0, this._syncList = [], this.initialize();\n  }\n  initialize() {\n    const t = this._cachedMeta;\n    this.configure(), this.linkScales(), t._stacked = bs(t.vScale, t), this.addElements();\n  }\n  updateIndex(t) {\n    this.index !== t && Yt(this._cachedMeta), this.index = t;\n  }\n  linkScales() {\n    const t = this.chart, e = this._cachedMeta, s = this.getDataset(), n = (d, u, f, g) => d === \"x\" ? u : d === \"r\" ? g : f, o = e.xAxisID = C(s.xAxisID, li(t, \"x\")), r = e.yAxisID = C(s.yAxisID, li(t, \"y\")), a = e.rAxisID = C(s.rAxisID, li(t, \"r\")), l = e.indexAxis, c = e.iAxisID = n(l, o, r, a), h = e.vAxisID = n(l, r, o, a);\n    e.xScale = this.getScaleForId(o), e.yScale = this.getScaleForId(r), e.rScale = this.getScaleForId(a), e.iScale = this.getScaleForId(c), e.vScale = this.getScaleForId(h);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(t) {\n    return this.chart.scales[t];\n  }\n  _getOtherScale(t) {\n    const e = this._cachedMeta;\n    return t === e.iScale ? e.vScale : e.iScale;\n  }\n  reset() {\n    this._update(\"reset\");\n  }\n  _destroy() {\n    const t = this._cachedMeta;\n    this._data && Zi(this._data, this), t._stacked && Yt(t);\n  }\n  _dataCheck() {\n    const t = this.getDataset(), e = t.data || (t.data = []), s = this._data;\n    if (D(e))\n      this._data = ra(e);\n    else if (s !== e) {\n      if (s) {\n        Zi(s, this);\n        const n = this._cachedMeta;\n        Yt(n), n._parsed = [];\n      }\n      e && Object.isExtensible(e) && Eo(e, this), this._syncList = [], this._data = e;\n    }\n  }\n  addElements() {\n    const t = this._cachedMeta;\n    this._dataCheck(), this.datasetElementType && (t.dataset = new this.datasetElementType());\n  }\n  buildOrUpdateElements(t) {\n    const e = this._cachedMeta, s = this.getDataset();\n    let n = !1;\n    this._dataCheck();\n    const o = e._stacked;\n    e._stacked = bs(e.vScale, e), e.stack !== s.stack && (n = !0, Yt(e), e.stack = s.stack), this._resyncElements(t), (n || o !== e._stacked) && _s(this, e._parsed);\n  }\n  configure() {\n    const t = this.chart.config, e = t.datasetScopeKeys(this._type), s = t.getOptionScopes(this.getDataset(), e, !0);\n    this.options = t.createResolver(s, this.getContext()), this._parsing = this.options.parsing, this._cachedDataOpts = {};\n  }\n  parse(t, e) {\n    const { _cachedMeta: s, _data: n } = this, { iScale: o, _stacked: r } = s, a = o.axis;\n    let l = t === 0 && e === n.length ? !0 : s._sorted, c = t > 0 && s._parsed[t - 1], h, d, u;\n    if (this._parsing === !1)\n      s._parsed = n, s._sorted = !0, u = n;\n    else {\n      z(n[t]) ? u = this.parseArrayData(s, n, t, e) : D(n[t]) ? u = this.parseObjectData(s, n, t, e) : u = this.parsePrimitiveData(s, n, t, e);\n      const f = () => d[a] === null || c && d[a] < c[a];\n      for (h = 0; h < e; ++h)\n        s._parsed[h + t] = d = u[h], l && (f() && (l = !1), c = d);\n      s._sorted = l;\n    }\n    r && _s(this, u);\n  }\n  parsePrimitiveData(t, e, s, n) {\n    const { iScale: o, vScale: r } = t, a = o.axis, l = r.axis, c = o.getLabels(), h = o === r, d = new Array(n);\n    let u, f, g;\n    for (u = 0, f = n; u < f; ++u)\n      g = u + s, d[u] = {\n        [a]: h || o.parse(c[g], g),\n        [l]: r.parse(e[g], g)\n      };\n    return d;\n  }\n  parseArrayData(t, e, s, n) {\n    const { xScale: o, yScale: r } = t, a = new Array(n);\n    let l, c, h, d;\n    for (l = 0, c = n; l < c; ++l)\n      h = l + s, d = e[h], a[l] = {\n        x: o.parse(d[0], h),\n        y: r.parse(d[1], h)\n      };\n    return a;\n  }\n  parseObjectData(t, e, s, n) {\n    const { xScale: o, yScale: r } = t, { xAxisKey: a = \"x\", yAxisKey: l = \"y\" } = this._parsing, c = new Array(n);\n    let h, d, u, f;\n    for (h = 0, d = n; h < d; ++h)\n      u = h + s, f = e[u], c[h] = {\n        x: o.parse(_t(f, a), u),\n        y: r.parse(_t(f, l), u)\n      };\n    return c;\n  }\n  getParsed(t) {\n    return this._cachedMeta._parsed[t];\n  }\n  getDataElement(t) {\n    return this._cachedMeta.data[t];\n  }\n  applyStack(t, e, s) {\n    const n = this.chart, o = this._cachedMeta, r = e[t.axis], a = {\n      keys: zn(n, !0),\n      values: e._stacks[t.axis]\n    };\n    return ms(a, r, o.index, { mode: s });\n  }\n  updateRangeFromParsed(t, e, s, n) {\n    const o = s[e.axis];\n    let r = o === null ? NaN : o;\n    const a = n && s._stacks[e.axis];\n    n && a && (n.values = a, r = ms(n, o, this._cachedMeta.index)), t.min = Math.min(t.min, r), t.max = Math.max(t.max, r);\n  }\n  getMinMax(t, e) {\n    const s = this._cachedMeta, n = s._parsed, o = s._sorted && t === s.iScale, r = n.length, a = this._getOtherScale(t), l = ua(e, s, this.chart), c = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY }, { min: h, max: d } = la(a);\n    let u, f;\n    function g() {\n      f = n[u];\n      const p = f[a.axis];\n      return !N(f[t.axis]) || h > p || d < p;\n    }\n    for (u = 0; u < r && !(!g() && (this.updateRangeFromParsed(c, t, f, l), o)); ++u)\n      ;\n    if (o) {\n      for (u = r - 1; u >= 0; --u)\n        if (!g()) {\n          this.updateRangeFromParsed(c, t, f, l);\n          break;\n        }\n    }\n    return c;\n  }\n  getAllParsedValues(t) {\n    const e = this._cachedMeta._parsed, s = [];\n    let n, o, r;\n    for (n = 0, o = e.length; n < o; ++n)\n      r = e[n][t.axis], N(r) && s.push(r);\n    return s;\n  }\n  getMaxOverflow() {\n    return !1;\n  }\n  getLabelAndValue(t) {\n    const e = this._cachedMeta, s = e.iScale, n = e.vScale, o = this.getParsed(t);\n    return {\n      label: s ? \"\" + s.getLabelForValue(o[s.axis]) : \"\",\n      value: n ? \"\" + n.getLabelForValue(o[n.axis]) : \"\"\n    };\n  }\n  _update(t) {\n    const e = this._cachedMeta;\n    this.update(t || \"default\"), e._clip = oa(C(this.options.clip, na(e.xScale, e.yScale, this.getMaxOverflow())));\n  }\n  update(t) {\n  }\n  draw() {\n    const t = this._ctx, e = this.chart, s = this._cachedMeta, n = s.data || [], o = e.chartArea, r = [], a = this._drawStart || 0, l = this._drawCount || n.length - a, c = this.options.drawActiveElementsOnTop;\n    let h;\n    for (s.dataset && s.dataset.draw(t, o, a, l), h = a; h < a + l; ++h) {\n      const d = n[h];\n      d.hidden || (d.active && c ? r.push(d) : d.draw(t, o));\n    }\n    for (h = 0; h < r.length; ++h)\n      r[h].draw(t, o);\n  }\n  getStyle(t, e) {\n    const s = e ? \"active\" : \"default\";\n    return t === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(s) : this.resolveDataElementOptions(t || 0, s);\n  }\n  getContext(t, e, s) {\n    const n = this.getDataset();\n    let o;\n    if (t >= 0 && t < this._cachedMeta.data.length) {\n      const r = this._cachedMeta.data[t];\n      o = r.$context || (r.$context = da(this.getContext(), t, r)), o.parsed = this.getParsed(t), o.raw = n.data[t], o.index = o.dataIndex = t;\n    } else\n      o = this.$context || (this.$context = ha(this.chart.getContext(), this.index)), o.dataset = n, o.index = o.datasetIndex = this.index;\n    return o.active = !!e, o.mode = s, o;\n  }\n  resolveDatasetElementOptions(t) {\n    return this._resolveElementOptions(this.datasetElementType.id, t);\n  }\n  resolveDataElementOptions(t, e) {\n    return this._resolveElementOptions(this.dataElementType.id, e, t);\n  }\n  _resolveElementOptions(t, e = \"default\", s) {\n    const n = e === \"active\", o = this._cachedDataOpts, r = t + \"-\" + e, a = o[r], l = this.enableOptionSharing && et(s);\n    if (a)\n      return ys(a, l);\n    const c = this.chart.config, h = c.datasetElementScopeKeys(this._type, t), d = n ? [`${t}Hover`, \"hover\", t, \"\"] : [t, \"\"], u = c.getOptionScopes(this.getDataset(), h), f = Object.keys(O.elements[t]), g = () => this.getContext(s, n), p = c.resolveNamedOptions(u, f, g, d);\n    return p.$shared && (p.$shared = l, o[r] = Object.freeze(ys(p, l))), p;\n  }\n  _resolveAnimations(t, e, s) {\n    const n = this.chart, o = this._cachedDataOpts, r = `animation-${e}`, a = o[r];\n    if (a)\n      return a;\n    let l;\n    if (n.options.animation !== !1) {\n      const h = this.chart.config, d = h.datasetAnimationScopeKeys(this._type, e), u = h.getOptionScopes(this.getDataset(), d);\n      l = h.createResolver(u, this.getContext(t, s, e));\n    }\n    const c = new Ni(n, l && l.animations);\n    return l && l._cacheable && (o[r] = Object.freeze(c)), c;\n  }\n  getSharedOptions(t) {\n    if (t.$shared)\n      return this._sharedOptions || (this._sharedOptions = Object.assign({}, t));\n  }\n  includeOptions(t, e) {\n    return !e || ci(t) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(t, e) {\n    const s = this.resolveDataElementOptions(t, e), n = this._sharedOptions, o = this.getSharedOptions(s), r = this.includeOptions(e, o) || o !== n;\n    return this.updateSharedOptions(o, e, s), { sharedOptions: o, includeOptions: r };\n  }\n  updateElement(t, e, s, n) {\n    ci(n) ? Object.assign(t, s) : this._resolveAnimations(e, n).update(t, s);\n  }\n  updateSharedOptions(t, e, s) {\n    t && !ci(e) && this._resolveAnimations(void 0, e).update(t, s);\n  }\n  _setStyle(t, e, s, n) {\n    t.active = n;\n    const o = this.getStyle(e, n);\n    this._resolveAnimations(e, s, n).update(t, {\n      options: !n && this.getSharedOptions(o) || o\n    });\n  }\n  removeHoverStyle(t, e, s) {\n    this._setStyle(t, s, \"active\", !1);\n  }\n  setHoverStyle(t, e, s) {\n    this._setStyle(t, s, \"active\", !0);\n  }\n  _removeDatasetHoverStyle() {\n    const t = this._cachedMeta.dataset;\n    t && this._setStyle(t, void 0, \"active\", !1);\n  }\n  _setDatasetHoverStyle() {\n    const t = this._cachedMeta.dataset;\n    t && this._setStyle(t, void 0, \"active\", !0);\n  }\n  _resyncElements(t) {\n    const e = this._data, s = this._cachedMeta.data;\n    for (const [a, l, c] of this._syncList)\n      this[a](l, c);\n    this._syncList = [];\n    const n = s.length, o = e.length, r = Math.min(o, n);\n    r && this.parse(0, r), o > n ? this._insertElements(n, o - n, t) : o < n && this._removeElements(o, n - o);\n  }\n  _insertElements(t, e, s = !0) {\n    const n = this._cachedMeta, o = n.data, r = t + e;\n    let a;\n    const l = (c) => {\n      for (c.length += e, a = c.length - 1; a >= r; a--)\n        c[a] = c[a - e];\n    };\n    for (l(o), a = t; a < r; ++a)\n      o[a] = new this.dataElementType();\n    this._parsing && l(n._parsed), this.parse(t, e), s && this.updateElements(o, t, e, \"reset\");\n  }\n  updateElements(t, e, s, n) {\n  }\n  _removeElements(t, e) {\n    const s = this._cachedMeta;\n    if (this._parsing) {\n      const n = s._parsed.splice(t, e);\n      s._stacked && Yt(s, n);\n    }\n    s.data.splice(t, e);\n  }\n  _sync(t) {\n    if (this._parsing)\n      this._syncList.push(t);\n    else {\n      const [e, s, n] = t;\n      this[e](s, n);\n    }\n    this.chart._dataChanges.push([this.index, ...t]);\n  }\n  _onDataPush() {\n    const t = arguments.length;\n    this._sync([\"_insertElements\", this.getDataset().data.length - t, t]);\n  }\n  _onDataPop() {\n    this._sync([\"_removeElements\", this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync([\"_removeElements\", 0, 1]);\n  }\n  _onDataSplice(t, e) {\n    e && this._sync([\"_removeElements\", t, e]);\n    const s = arguments.length - 2;\n    s && this._sync([\"_insertElements\", t, s]);\n  }\n  _onDataUnshift() {\n    this._sync([\"_insertElements\", 0, arguments.length]);\n  }\n}\nit.defaults = {};\nit.prototype.datasetElementType = null;\nit.prototype.dataElementType = null;\nfunction fa(i, t) {\n  if (!i._cache.$bar) {\n    const e = i.getMatchingVisibleMetas(t);\n    let s = [];\n    for (let n = 0, o = e.length; n < o; n++)\n      s = s.concat(e[n].controller.getAllParsedValues(i));\n    i._cache.$bar = un(s.sort((n, o) => n - o));\n  }\n  return i._cache.$bar;\n}\nfunction ga(i) {\n  const t = i.iScale, e = fa(t, i.type);\n  let s = t._length, n, o, r, a;\n  const l = () => {\n    r === 32767 || r === -32768 || (et(a) && (s = Math.min(s, Math.abs(r - a) || s)), a = r);\n  };\n  for (n = 0, o = e.length; n < o; ++n)\n    r = t.getPixelForValue(e[n]), l();\n  for (a = void 0, n = 0, o = t.ticks.length; n < o; ++n)\n    r = t.getPixelForTick(n), l();\n  return s;\n}\nfunction pa(i, t, e, s) {\n  const n = e.barThickness;\n  let o, r;\n  return T(n) ? (o = t.min * e.categoryPercentage, r = e.barPercentage) : (o = n * s, r = 1), {\n    chunk: o / s,\n    ratio: r,\n    start: t.pixels[i] - o / 2\n  };\n}\nfunction ma(i, t, e, s) {\n  const n = t.pixels, o = n[i];\n  let r = i > 0 ? n[i - 1] : null, a = i < n.length - 1 ? n[i + 1] : null;\n  const l = e.categoryPercentage;\n  r === null && (r = o - (a === null ? t.end - t.start : a - o)), a === null && (a = o + o - r);\n  const c = o - (o - Math.min(r, a)) / 2 * l;\n  return {\n    chunk: Math.abs(a - r) / 2 * l / s,\n    ratio: e.barPercentage,\n    start: c\n  };\n}\nfunction ba(i, t, e, s) {\n  const n = e.parse(i[0], s), o = e.parse(i[1], s), r = Math.min(n, o), a = Math.max(n, o);\n  let l = r, c = a;\n  Math.abs(r) > Math.abs(a) && (l = a, c = r), t[e.axis] = c, t._custom = {\n    barStart: l,\n    barEnd: c,\n    start: n,\n    end: o,\n    min: r,\n    max: a\n  };\n}\nfunction Bn(i, t, e, s) {\n  return z(i) ? ba(i, t, e, s) : t[e.axis] = e.parse(i, s), t;\n}\nfunction vs(i, t, e, s) {\n  const n = i.iScale, o = i.vScale, r = n.getLabels(), a = n === o, l = [];\n  let c, h, d, u;\n  for (c = e, h = e + s; c < h; ++c)\n    u = t[c], d = {}, d[n.axis] = a || n.parse(r[c], c), l.push(Bn(u, d, o, c));\n  return l;\n}\nfunction hi(i) {\n  return i && i.barStart !== void 0 && i.barEnd !== void 0;\n}\nfunction xa(i, t, e) {\n  return i !== 0 ? lt(i) : (t.isHorizontal() ? 1 : -1) * (t.min >= e ? 1 : -1);\n}\nfunction _a(i) {\n  let t, e, s, n, o;\n  return i.horizontal ? (t = i.base > i.x, e = \"left\", s = \"right\") : (t = i.base < i.y, e = \"bottom\", s = \"top\"), t ? (n = \"end\", o = \"start\") : (n = \"start\", o = \"end\"), { start: e, end: s, reverse: t, top: n, bottom: o };\n}\nfunction ya(i, t, e, s) {\n  let n = t.borderSkipped;\n  const o = {};\n  if (!n) {\n    i.borderSkipped = o;\n    return;\n  }\n  if (n === !0) {\n    i.borderSkipped = { top: !0, right: !0, bottom: !0, left: !0 };\n    return;\n  }\n  const { start: r, end: a, reverse: l, top: c, bottom: h } = _a(i);\n  n === \"middle\" && e && (i.enableBorderRadius = !0, (e._top || 0) === s ? n = c : (e._bottom || 0) === s ? n = h : (o[Ms(h, r, a, l)] = !0, n = c)), o[Ms(n, r, a, l)] = !0, i.borderSkipped = o;\n}\nfunction Ms(i, t, e, s) {\n  return s ? (i = va(i, t, e), i = ks(i, e, t)) : i = ks(i, t, e), i;\n}\nfunction va(i, t, e) {\n  return i === t ? e : i === e ? t : i;\n}\nfunction ks(i, t, e) {\n  return i === \"start\" ? t : i === \"end\" ? e : i;\n}\nfunction Ma(i, { inflateAmount: t }, e) {\n  i.inflateAmount = t === \"auto\" ? e === 1 ? 0.33 : 0 : t;\n}\nclass ue extends it {\n  parsePrimitiveData(t, e, s, n) {\n    return vs(t, e, s, n);\n  }\n  parseArrayData(t, e, s, n) {\n    return vs(t, e, s, n);\n  }\n  parseObjectData(t, e, s, n) {\n    const { iScale: o, vScale: r } = t, { xAxisKey: a = \"x\", yAxisKey: l = \"y\" } = this._parsing, c = o.axis === \"x\" ? a : l, h = r.axis === \"x\" ? a : l, d = [];\n    let u, f, g, p;\n    for (u = s, f = s + n; u < f; ++u)\n      p = e[u], g = {}, g[o.axis] = o.parse(_t(p, c), u), d.push(Bn(_t(p, h), g, r, u));\n    return d;\n  }\n  updateRangeFromParsed(t, e, s, n) {\n    super.updateRangeFromParsed(t, e, s, n);\n    const o = s._custom;\n    o && e === this._cachedMeta.vScale && (t.min = Math.min(t.min, o.min), t.max = Math.max(t.max, o.max));\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(t) {\n    const e = this._cachedMeta, { iScale: s, vScale: n } = e, o = this.getParsed(t), r = o._custom, a = hi(r) ? \"[\" + r.start + \", \" + r.end + \"]\" : \"\" + n.getLabelForValue(o[n.axis]);\n    return {\n      label: \"\" + s.getLabelForValue(o[s.axis]),\n      value: a\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = !0, super.initialize();\n    const t = this._cachedMeta;\n    t.stack = this.getDataset().stack;\n  }\n  update(t) {\n    const e = this._cachedMeta;\n    this.updateElements(e.data, 0, e.data.length, t);\n  }\n  updateElements(t, e, s, n) {\n    const o = n === \"reset\", { index: r, _cachedMeta: { vScale: a } } = this, l = a.getBasePixel(), c = a.isHorizontal(), h = this._getRuler(), { sharedOptions: d, includeOptions: u } = this._getSharedOptions(e, n);\n    for (let f = e; f < e + s; f++) {\n      const g = this.getParsed(f), p = o || T(g[a.axis]) ? { base: l, head: l } : this._calculateBarValuePixels(f), m = this._calculateBarIndexPixels(f, h), b = (g._stacks || {})[a.axis], x = {\n        horizontal: c,\n        base: p.base,\n        enableBorderRadius: !b || hi(g._custom) || r === b._top || r === b._bottom,\n        x: c ? p.head : m.center,\n        y: c ? m.center : p.head,\n        height: c ? m.size : Math.abs(p.size),\n        width: c ? Math.abs(p.size) : m.size\n      };\n      u && (x.options = d || this.resolveDataElementOptions(f, t[f].active ? \"active\" : n));\n      const v = x.options || t[f].options;\n      ya(x, v, b, r), Ma(x, v, h.ratio), this.updateElement(t[f], f, x, n);\n    }\n  }\n  _getStacks(t, e) {\n    const { iScale: s } = this._cachedMeta, n = s.getMatchingVisibleMetas(this._type).filter((l) => l.controller.options.grouped), o = s.options.stacked, r = [], a = (l) => {\n      const c = l.controller.getParsed(e), h = c && c[l.vScale.axis];\n      if (T(h) || isNaN(h))\n        return !0;\n    };\n    for (const l of n)\n      if (!(e !== void 0 && a(l)) && ((o === !1 || r.indexOf(l.stack) === -1 || o === void 0 && l.stack === void 0) && r.push(l.stack), l.index === t))\n        break;\n    return r.length || r.push(void 0), r;\n  }\n  _getStackCount(t) {\n    return this._getStacks(void 0, t).length;\n  }\n  _getStackIndex(t, e, s) {\n    const n = this._getStacks(t, s), o = e !== void 0 ? n.indexOf(e) : -1;\n    return o === -1 ? n.length - 1 : o;\n  }\n  _getRuler() {\n    const t = this.options, e = this._cachedMeta, s = e.iScale, n = [];\n    let o, r;\n    for (o = 0, r = e.data.length; o < r; ++o)\n      n.push(s.getPixelForValue(this.getParsed(o)[s.axis], o));\n    const a = t.barThickness;\n    return {\n      min: a || ga(e),\n      pixels: n,\n      start: s._startPixel,\n      end: s._endPixel,\n      stackCount: this._getStackCount(),\n      scale: s,\n      grouped: t.grouped,\n      ratio: a ? 1 : t.categoryPercentage * t.barPercentage\n    };\n  }\n  _calculateBarValuePixels(t) {\n    const { _cachedMeta: { vScale: e, _stacked: s }, options: { base: n, minBarLength: o } } = this, r = n || 0, a = this.getParsed(t), l = a._custom, c = hi(l);\n    let h = a[e.axis], d = 0, u = s ? this.applyStack(e, a, s) : h, f, g;\n    u !== h && (d = u - h, u = h), c && (h = l.barStart, u = l.barEnd - l.barStart, h !== 0 && lt(h) !== lt(l.barEnd) && (d = 0), d += h);\n    const p = !T(n) && !c ? n : d;\n    let m = e.getPixelForValue(p);\n    if (this.chart.getDataVisibility(t) ? f = e.getPixelForValue(d + u) : f = m, g = f - m, Math.abs(g) < o) {\n      g = xa(g, e, r) * o, h === r && (m -= g / 2);\n      const b = e.getPixelForDecimal(0), x = e.getPixelForDecimal(1), v = Math.min(b, x), y = Math.max(b, x);\n      m = Math.max(Math.min(m, y), v), f = m + g;\n    }\n    if (m === e.getPixelForValue(r)) {\n      const b = lt(g) * e.getLineWidthForValue(r) / 2;\n      m += b, g -= b;\n    }\n    return {\n      size: g,\n      base: m,\n      head: f,\n      center: f + g / 2\n    };\n  }\n  _calculateBarIndexPixels(t, e) {\n    const s = e.scale, n = this.options, o = n.skipNull, r = C(n.maxBarThickness, 1 / 0);\n    let a, l;\n    if (e.grouped) {\n      const c = o ? this._getStackCount(t) : e.stackCount, h = n.barThickness === \"flex\" ? ma(t, e, n, c) : pa(t, e, n, c), d = this._getStackIndex(this.index, this._cachedMeta.stack, o ? t : void 0);\n      a = h.start + h.chunk * d + h.chunk / 2, l = Math.min(r, h.chunk * h.ratio);\n    } else\n      a = s.getPixelForValue(this.getParsed(t)[s.axis], t), l = Math.min(r, e.min * e.ratio);\n    return {\n      base: a - l / 2,\n      head: a + l / 2,\n      center: a,\n      size: l\n    };\n  }\n  draw() {\n    const t = this._cachedMeta, e = t.vScale, s = t.data, n = s.length;\n    let o = 0;\n    for (; o < n; ++o)\n      this.getParsed(o)[e.axis] !== null && s[o].draw(this._ctx);\n  }\n}\nue.id = \"bar\";\nue.defaults = {\n  datasetElementType: !1,\n  dataElementType: \"bar\",\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: !0,\n  animations: {\n    numbers: {\n      type: \"number\",\n      properties: [\"x\", \"y\", \"base\", \"width\", \"height\"]\n    }\n  }\n};\nue.overrides = {\n  scales: {\n    _index_: {\n      type: \"category\",\n      offset: !0,\n      grid: {\n        offset: !0\n      }\n    },\n    _value_: {\n      type: \"linear\",\n      beginAtZero: !0\n    }\n  }\n};\nclass fe extends it {\n  initialize() {\n    this.enableOptionSharing = !0, super.initialize();\n  }\n  parsePrimitiveData(t, e, s, n) {\n    const o = super.parsePrimitiveData(t, e, s, n);\n    for (let r = 0; r < o.length; r++)\n      o[r]._custom = this.resolveDataElementOptions(r + s).radius;\n    return o;\n  }\n  parseArrayData(t, e, s, n) {\n    const o = super.parseArrayData(t, e, s, n);\n    for (let r = 0; r < o.length; r++) {\n      const a = e[s + r];\n      o[r]._custom = C(a[2], this.resolveDataElementOptions(r + s).radius);\n    }\n    return o;\n  }\n  parseObjectData(t, e, s, n) {\n    const o = super.parseObjectData(t, e, s, n);\n    for (let r = 0; r < o.length; r++) {\n      const a = e[s + r];\n      o[r]._custom = C(a && a.r && +a.r, this.resolveDataElementOptions(r + s).radius);\n    }\n    return o;\n  }\n  getMaxOverflow() {\n    const t = this._cachedMeta.data;\n    let e = 0;\n    for (let s = t.length - 1; s >= 0; --s)\n      e = Math.max(e, t[s].size(this.resolveDataElementOptions(s)) / 2);\n    return e > 0 && e;\n  }\n  getLabelAndValue(t) {\n    const e = this._cachedMeta, { xScale: s, yScale: n } = e, o = this.getParsed(t), r = s.getLabelForValue(o.x), a = n.getLabelForValue(o.y), l = o._custom;\n    return {\n      label: e.label,\n      value: \"(\" + r + \", \" + a + (l ? \", \" + l : \"\") + \")\"\n    };\n  }\n  update(t) {\n    const e = this._cachedMeta.data;\n    this.updateElements(e, 0, e.length, t);\n  }\n  updateElements(t, e, s, n) {\n    const o = n === \"reset\", { iScale: r, vScale: a } = this._cachedMeta, { sharedOptions: l, includeOptions: c } = this._getSharedOptions(e, n), h = r.axis, d = a.axis;\n    for (let u = e; u < e + s; u++) {\n      const f = t[u], g = !o && this.getParsed(u), p = {}, m = p[h] = o ? r.getPixelForDecimal(0.5) : r.getPixelForValue(g[h]), b = p[d] = o ? a.getBasePixel() : a.getPixelForValue(g[d]);\n      p.skip = isNaN(m) || isNaN(b), c && (p.options = l || this.resolveDataElementOptions(u, f.active ? \"active\" : n), o && (p.options.radius = 0)), this.updateElement(f, u, p, n);\n    }\n  }\n  resolveDataElementOptions(t, e) {\n    const s = this.getParsed(t);\n    let n = super.resolveDataElementOptions(t, e);\n    n.$shared && (n = Object.assign({}, n, { $shared: !1 }));\n    const o = n.radius;\n    return e !== \"active\" && (n.radius = 0), n.radius += C(s && s._custom, o), n;\n  }\n}\nfe.id = \"bubble\";\nfe.defaults = {\n  datasetElementType: !1,\n  dataElementType: \"point\",\n  animations: {\n    numbers: {\n      type: \"number\",\n      properties: [\"x\", \"y\", \"borderWidth\", \"radius\"]\n    }\n  }\n};\nfe.overrides = {\n  scales: {\n    x: {\n      type: \"linear\"\n    },\n    y: {\n      type: \"linear\"\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return \"\";\n        }\n      }\n    }\n  }\n};\nfunction ka(i, t, e) {\n  let s = 1, n = 1, o = 0, r = 0;\n  if (t < F) {\n    const a = i, l = a + t, c = Math.cos(a), h = Math.sin(a), d = Math.cos(l), u = Math.sin(l), f = (v, y, _) => oe(v, a, l, !0) ? 1 : Math.max(y, y * e, _, _ * e), g = (v, y, _) => oe(v, a, l, !0) ? -1 : Math.min(y, y * e, _, _ * e), p = f(0, c, d), m = f(V, h, u), b = g(B, c, d), x = g(B + V, h, u);\n    s = (p - b) / 2, n = (m - x) / 2, o = -(p + b) / 2, r = -(m + x) / 2;\n  }\n  return { ratioX: s, ratioY: n, offsetX: o, offsetY: r };\n}\nclass Lt extends it {\n  constructor(t, e) {\n    super(t, e), this.enableOptionSharing = !0, this.innerRadius = void 0, this.outerRadius = void 0, this.offsetX = void 0, this.offsetY = void 0;\n  }\n  linkScales() {\n  }\n  parse(t, e) {\n    const s = this.getDataset().data, n = this._cachedMeta;\n    if (this._parsing === !1)\n      n._parsed = s;\n    else {\n      let o = (l) => +s[l];\n      if (D(s[t])) {\n        const { key: l = \"value\" } = this._parsing;\n        o = (c) => +_t(s[c], l);\n      }\n      let r, a;\n      for (r = t, a = t + e; r < a; ++r)\n        n._parsed[r] = o(r);\n    }\n  }\n  _getRotation() {\n    return nt(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return nt(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let t = F, e = -F;\n    for (let s = 0; s < this.chart.data.datasets.length; ++s)\n      if (this.chart.isDatasetVisible(s)) {\n        const n = this.chart.getDatasetMeta(s).controller, o = n._getRotation(), r = n._getCircumference();\n        t = Math.min(t, o), e = Math.max(e, o + r);\n      }\n    return {\n      rotation: t,\n      circumference: e - t\n    };\n  }\n  update(t) {\n    const e = this.chart, { chartArea: s } = e, n = this._cachedMeta, o = n.data, r = this.getMaxBorderWidth() + this.getMaxOffset(o) + this.options.spacing, a = Math.max((Math.min(s.width, s.height) - r) / 2, 0), l = Math.min(yo(this.options.cutout, a), 1), c = this._getRingWeight(this.index), { circumference: h, rotation: d } = this._getRotationExtents(), { ratioX: u, ratioY: f, offsetX: g, offsetY: p } = ka(d, h, l), m = (s.width - r) / u, b = (s.height - r) / f, x = Math.max(Math.min(m, b) / 2, 0), v = an(this.options.radius, x), y = Math.max(v * l, 0), _ = (v - y) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = g * v, this.offsetY = p * v, n.total = this.calculateTotal(), this.outerRadius = v - _ * this._getRingWeightOffset(this.index), this.innerRadius = Math.max(this.outerRadius - _ * c, 0), this.updateElements(o, 0, o.length, t);\n  }\n  _circumference(t, e) {\n    const s = this.options, n = this._cachedMeta, o = this._getCircumference();\n    return e && s.animation.animateRotate || !this.chart.getDataVisibility(t) || n._parsed[t] === null || n.data[t].hidden ? 0 : this.calculateCircumference(n._parsed[t] * o / F);\n  }\n  updateElements(t, e, s, n) {\n    const o = n === \"reset\", r = this.chart, a = r.chartArea, c = r.options.animation, h = (a.left + a.right) / 2, d = (a.top + a.bottom) / 2, u = o && c.animateScale, f = u ? 0 : this.innerRadius, g = u ? 0 : this.outerRadius, { sharedOptions: p, includeOptions: m } = this._getSharedOptions(e, n);\n    let b = this._getRotation(), x;\n    for (x = 0; x < e; ++x)\n      b += this._circumference(x, o);\n    for (x = e; x < e + s; ++x) {\n      const v = this._circumference(x, o), y = t[x], _ = {\n        x: h + this.offsetX,\n        y: d + this.offsetY,\n        startAngle: b,\n        endAngle: b + v,\n        circumference: v,\n        outerRadius: g,\n        innerRadius: f\n      };\n      m && (_.options = p || this.resolveDataElementOptions(x, y.active ? \"active\" : n)), b += v, this.updateElement(y, x, _, n);\n    }\n  }\n  calculateTotal() {\n    const t = this._cachedMeta, e = t.data;\n    let s = 0, n;\n    for (n = 0; n < e.length; n++) {\n      const o = t._parsed[n];\n      o !== null && !isNaN(o) && this.chart.getDataVisibility(n) && !e[n].hidden && (s += Math.abs(o));\n    }\n    return s;\n  }\n  calculateCircumference(t) {\n    const e = this._cachedMeta.total;\n    return e > 0 && !isNaN(t) ? F * (Math.abs(t) / e) : 0;\n  }\n  getLabelAndValue(t) {\n    const e = this._cachedMeta, s = this.chart, n = s.data.labels || [], o = de(e._parsed[t], s.options.locale);\n    return {\n      label: n[t] || \"\",\n      value: o\n    };\n  }\n  getMaxBorderWidth(t) {\n    let e = 0;\n    const s = this.chart;\n    let n, o, r, a, l;\n    if (!t) {\n      for (n = 0, o = s.data.datasets.length; n < o; ++n)\n        if (s.isDatasetVisible(n)) {\n          r = s.getDatasetMeta(n), t = r.data, a = r.controller;\n          break;\n        }\n    }\n    if (!t)\n      return 0;\n    for (n = 0, o = t.length; n < o; ++n)\n      l = a.resolveDataElementOptions(n), l.borderAlign !== \"inner\" && (e = Math.max(e, l.borderWidth || 0, l.hoverBorderWidth || 0));\n    return e;\n  }\n  getMaxOffset(t) {\n    let e = 0;\n    for (let s = 0, n = t.length; s < n; ++s) {\n      const o = this.resolveDataElementOptions(s);\n      e = Math.max(e, o.offset || 0, o.hoverOffset || 0);\n    }\n    return e;\n  }\n  _getRingWeightOffset(t) {\n    let e = 0;\n    for (let s = 0; s < t; ++s)\n      this.chart.isDatasetVisible(s) && (e += this._getRingWeight(s));\n    return e;\n  }\n  _getRingWeight(t) {\n    return Math.max(C(this.chart.data.datasets[t].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nLt.id = \"doughnut\";\nLt.defaults = {\n  datasetElementType: !1,\n  dataElementType: \"arc\",\n  animation: {\n    animateRotate: !0,\n    animateScale: !1\n  },\n  animations: {\n    numbers: {\n      type: \"number\",\n      properties: [\"circumference\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"startAngle\", \"x\", \"y\", \"offset\", \"borderWidth\", \"spacing\"]\n    }\n  },\n  cutout: \"50%\",\n  rotation: 0,\n  circumference: 360,\n  radius: \"100%\",\n  spacing: 0,\n  indexAxis: \"r\"\n};\nLt.descriptors = {\n  _scriptable: (i) => i !== \"spacing\",\n  _indexable: (i) => i !== \"spacing\"\n};\nLt.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(i) {\n          const t = i.data;\n          if (t.labels.length && t.datasets.length) {\n            const { labels: { pointStyle: e } } = i.legend.options;\n            return t.labels.map((s, n) => {\n              const r = i.getDatasetMeta(0).controller.getStyle(n);\n              return {\n                text: s,\n                fillStyle: r.backgroundColor,\n                strokeStyle: r.borderColor,\n                lineWidth: r.borderWidth,\n                pointStyle: e,\n                hidden: !i.getDataVisibility(n),\n                index: n\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(i, t, e) {\n        e.chart.toggleDataVisibility(t.index), e.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return \"\";\n        },\n        label(i) {\n          let t = i.label;\n          const e = \": \" + i.formattedValue;\n          return z(t) ? (t = t.slice(), t[0] += e) : t += e, t;\n        }\n      }\n    }\n  }\n};\nclass ge extends it {\n  initialize() {\n    this.enableOptionSharing = !0, this.supportsDecimation = !0, super.initialize();\n  }\n  update(t) {\n    const e = this._cachedMeta, { dataset: s, data: n = [], _dataset: o } = e, r = this.chart._animationsDisabled;\n    let { start: a, count: l } = pn(e, n, r);\n    this._drawStart = a, this._drawCount = l, mn(e) && (a = 0, l = n.length), s._chart = this.chart, s._datasetIndex = this.index, s._decimated = !!o._decimated, s.points = n;\n    const c = this.resolveDatasetElementOptions(t);\n    this.options.showLine || (c.borderWidth = 0), c.segment = this.options.segment, this.updateElement(s, void 0, {\n      animated: !r,\n      options: c\n    }, t), this.updateElements(n, a, l, t);\n  }\n  updateElements(t, e, s, n) {\n    const o = n === \"reset\", { iScale: r, vScale: a, _stacked: l, _dataset: c } = this._cachedMeta, { sharedOptions: h, includeOptions: d } = this._getSharedOptions(e, n), u = r.axis, f = a.axis, { spanGaps: g, segment: p } = this.options, m = Bt(g) ? g : Number.POSITIVE_INFINITY, b = this.chart._animationsDisabled || o || n === \"none\";\n    let x = e > 0 && this.getParsed(e - 1);\n    for (let v = e; v < e + s; ++v) {\n      const y = t[v], _ = this.getParsed(v), M = b ? y : {}, k = T(_[f]), S = M[u] = r.getPixelForValue(_[u], v), w = M[f] = o || k ? a.getBasePixel() : a.getPixelForValue(l ? this.applyStack(a, _, l) : _[f], v);\n      M.skip = isNaN(S) || isNaN(w) || k, M.stop = v > 0 && Math.abs(_[u] - x[u]) > m, p && (M.parsed = _, M.raw = c.data[v]), d && (M.options = h || this.resolveDataElementOptions(v, y.active ? \"active\" : n)), b || this.updateElement(y, v, M, n), x = _;\n    }\n  }\n  getMaxOverflow() {\n    const t = this._cachedMeta, e = t.dataset, s = e.options && e.options.borderWidth || 0, n = t.data || [];\n    if (!n.length)\n      return s;\n    const o = n[0].size(this.resolveDataElementOptions(0)), r = n[n.length - 1].size(this.resolveDataElementOptions(n.length - 1));\n    return Math.max(s, o, r) / 2;\n  }\n  draw() {\n    const t = this._cachedMeta;\n    t.dataset.updateControlPoints(this.chart.chartArea, t.iScale.axis), super.draw();\n  }\n}\nge.id = \"line\";\nge.defaults = {\n  datasetElementType: \"line\",\n  dataElementType: \"point\",\n  showLine: !0,\n  spanGaps: !1\n};\nge.overrides = {\n  scales: {\n    _index_: {\n      type: \"category\"\n    },\n    _value_: {\n      type: \"linear\"\n    }\n  }\n};\nclass pe extends it {\n  constructor(t, e) {\n    super(t, e), this.innerRadius = void 0, this.outerRadius = void 0;\n  }\n  getLabelAndValue(t) {\n    const e = this._cachedMeta, s = this.chart, n = s.data.labels || [], o = de(e._parsed[t].r, s.options.locale);\n    return {\n      label: n[t] || \"\",\n      value: o\n    };\n  }\n  parseObjectData(t, e, s, n) {\n    return Dn.bind(this)(t, e, s, n);\n  }\n  update(t) {\n    const e = this._cachedMeta.data;\n    this._updateRadius(), this.updateElements(e, 0, e.length, t);\n  }\n  getMinMax() {\n    const t = this._cachedMeta, e = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY };\n    return t.data.forEach((s, n) => {\n      const o = this.getParsed(n).r;\n      !isNaN(o) && this.chart.getDataVisibility(n) && (o < e.min && (e.min = o), o > e.max && (e.max = o));\n    }), e;\n  }\n  _updateRadius() {\n    const t = this.chart, e = t.chartArea, s = t.options, n = Math.min(e.right - e.left, e.bottom - e.top), o = Math.max(n / 2, 0), r = Math.max(s.cutoutPercentage ? o / 100 * s.cutoutPercentage : 1, 0), a = (o - r) / t.getVisibleDatasetCount();\n    this.outerRadius = o - a * this.index, this.innerRadius = this.outerRadius - a;\n  }\n  updateElements(t, e, s, n) {\n    const o = n === \"reset\", r = this.chart, l = r.options.animation, c = this._cachedMeta.rScale, h = c.xCenter, d = c.yCenter, u = c.getIndexAngle(0) - 0.5 * B;\n    let f = u, g;\n    const p = 360 / this.countVisibleElements();\n    for (g = 0; g < e; ++g)\n      f += this._computeAngle(g, n, p);\n    for (g = e; g < e + s; g++) {\n      const m = t[g];\n      let b = f, x = f + this._computeAngle(g, n, p), v = r.getDataVisibility(g) ? c.getDistanceFromCenterForValue(this.getParsed(g).r) : 0;\n      f = x, o && (l.animateScale && (v = 0), l.animateRotate && (b = x = u));\n      const y = {\n        x: h,\n        y: d,\n        innerRadius: 0,\n        outerRadius: v,\n        startAngle: b,\n        endAngle: x,\n        options: this.resolveDataElementOptions(g, m.active ? \"active\" : n)\n      };\n      this.updateElement(m, g, y, n);\n    }\n  }\n  countVisibleElements() {\n    const t = this._cachedMeta;\n    let e = 0;\n    return t.data.forEach((s, n) => {\n      !isNaN(this.getParsed(n).r) && this.chart.getDataVisibility(n) && e++;\n    }), e;\n  }\n  _computeAngle(t, e, s) {\n    return this.chart.getDataVisibility(t) ? nt(this.resolveDataElementOptions(t, e).angle || s) : 0;\n  }\n}\npe.id = \"polarArea\";\npe.defaults = {\n  dataElementType: \"arc\",\n  animation: {\n    animateRotate: !0,\n    animateScale: !0\n  },\n  animations: {\n    numbers: {\n      type: \"number\",\n      properties: [\"x\", \"y\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\"]\n    }\n  },\n  indexAxis: \"r\",\n  startAngle: 0\n};\npe.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(i) {\n          const t = i.data;\n          if (t.labels.length && t.datasets.length) {\n            const { labels: { pointStyle: e } } = i.legend.options;\n            return t.labels.map((s, n) => {\n              const r = i.getDatasetMeta(0).controller.getStyle(n);\n              return {\n                text: s,\n                fillStyle: r.backgroundColor,\n                strokeStyle: r.borderColor,\n                lineWidth: r.borderWidth,\n                pointStyle: e,\n                hidden: !i.getDataVisibility(n),\n                index: n\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(i, t, e) {\n        e.chart.toggleDataVisibility(t.index), e.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return \"\";\n        },\n        label(i) {\n          return i.chart.data.labels[i.dataIndex] + \": \" + i.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: \"radialLinear\",\n      angleLines: {\n        display: !1\n      },\n      beginAtZero: !0,\n      grid: {\n        circular: !0\n      },\n      pointLabels: {\n        display: !1\n      },\n      startAngle: 0\n    }\n  }\n};\nclass qe extends Lt {\n}\nqe.id = \"pie\";\nqe.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: \"100%\"\n};\nclass me extends it {\n  getLabelAndValue(t) {\n    const e = this._cachedMeta.vScale, s = this.getParsed(t);\n    return {\n      label: e.getLabels()[t],\n      value: \"\" + e.getLabelForValue(s[e.axis])\n    };\n  }\n  parseObjectData(t, e, s, n) {\n    return Dn.bind(this)(t, e, s, n);\n  }\n  update(t) {\n    const e = this._cachedMeta, s = e.dataset, n = e.data || [], o = e.iScale.getLabels();\n    if (s.points = n, t !== \"resize\") {\n      const r = this.resolveDatasetElementOptions(t);\n      this.options.showLine || (r.borderWidth = 0);\n      const a = {\n        _loop: !0,\n        _fullLoop: o.length === n.length,\n        options: r\n      };\n      this.updateElement(s, void 0, a, t);\n    }\n    this.updateElements(n, 0, n.length, t);\n  }\n  updateElements(t, e, s, n) {\n    const o = this._cachedMeta.rScale, r = n === \"reset\";\n    for (let a = e; a < e + s; a++) {\n      const l = t[a], c = this.resolveDataElementOptions(a, l.active ? \"active\" : n), h = o.getPointPositionForValue(a, this.getParsed(a).r), d = r ? o.xCenter : h.x, u = r ? o.yCenter : h.y, f = {\n        x: d,\n        y: u,\n        angle: h.angle,\n        skip: isNaN(d) || isNaN(u),\n        options: c\n      };\n      this.updateElement(l, a, f, n);\n    }\n  }\n}\nme.id = \"radar\";\nme.defaults = {\n  datasetElementType: \"line\",\n  dataElementType: \"point\",\n  indexAxis: \"r\",\n  showLine: !0,\n  elements: {\n    line: {\n      fill: \"start\"\n    }\n  }\n};\nme.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: \"radialLinear\"\n    }\n  }\n};\nclass st {\n  constructor() {\n    this.x = void 0, this.y = void 0, this.active = !1, this.options = void 0, this.$animations = void 0;\n  }\n  tooltipPosition(t) {\n    const { x: e, y: s } = this.getProps([\"x\", \"y\"], t);\n    return { x: e, y: s };\n  }\n  hasValue() {\n    return Bt(this.x) && Bt(this.y);\n  }\n  getProps(t, e) {\n    const s = this.$animations;\n    if (!e || !s)\n      return this;\n    const n = {};\n    return t.forEach((o) => {\n      n[o] = s[o] && s[o].active() ? s[o]._to : this[o];\n    }), n;\n  }\n}\nst.defaults = {};\nst.defaultRoutes = void 0;\nconst Vn = {\n  values(i) {\n    return z(i) ? i : \"\" + i;\n  },\n  numeric(i, t, e) {\n    if (i === 0)\n      return \"0\";\n    const s = this.chart.options.locale;\n    let n, o = i;\n    if (e.length > 1) {\n      const c = Math.max(Math.abs(e[0].value), Math.abs(e[e.length - 1].value));\n      (c < 1e-4 || c > 1e15) && (n = \"scientific\"), o = wa(i, e);\n    }\n    const r = tt(Math.abs(o)), a = Math.max(Math.min(-1 * Math.floor(r), 20), 0), l = { notation: n, minimumFractionDigits: a, maximumFractionDigits: a };\n    return Object.assign(l, this.options.ticks.format), de(i, s, l);\n  },\n  logarithmic(i, t, e) {\n    if (i === 0)\n      return \"0\";\n    const s = i / Math.pow(10, Math.floor(tt(i)));\n    return s === 1 || s === 2 || s === 5 ? Vn.numeric.call(this, i, t, e) : \"\";\n  }\n};\nfunction wa(i, t) {\n  let e = t.length > 3 ? t[2].value - t[1].value : t[1].value - t[0].value;\n  return Math.abs(e) >= 1 && i !== Math.floor(i) && (e = i - Math.floor(i)), e;\n}\nvar be = { formatters: Vn };\nO.set(\"scale\", {\n  display: !0,\n  offset: !1,\n  reverse: !1,\n  beginAtZero: !1,\n  bounds: \"ticks\",\n  grace: 0,\n  grid: {\n    display: !0,\n    lineWidth: 1,\n    drawBorder: !0,\n    drawOnChartArea: !0,\n    drawTicks: !0,\n    tickLength: 8,\n    tickWidth: (i, t) => t.lineWidth,\n    tickColor: (i, t) => t.color,\n    offset: !1,\n    borderDash: [],\n    borderDashOffset: 0,\n    borderWidth: 1\n  },\n  title: {\n    display: !1,\n    text: \"\",\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: !1,\n    textStrokeWidth: 0,\n    textStrokeColor: \"\",\n    padding: 3,\n    display: !0,\n    autoSkip: !0,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: be.formatters.values,\n    minor: {},\n    major: {},\n    align: \"center\",\n    crossAlign: \"near\",\n    showLabelBackdrop: !1,\n    backdropColor: \"rgba(255, 255, 255, 0.75)\",\n    backdropPadding: 2\n  }\n});\nO.route(\"scale.ticks\", \"color\", \"\", \"color\");\nO.route(\"scale.grid\", \"color\", \"\", \"borderColor\");\nO.route(\"scale.grid\", \"borderColor\", \"\", \"borderColor\");\nO.route(\"scale.title\", \"color\", \"\", \"color\");\nO.describe(\"scale\", {\n  _fallback: !1,\n  _scriptable: (i) => !i.startsWith(\"before\") && !i.startsWith(\"after\") && i !== \"callback\" && i !== \"parser\",\n  _indexable: (i) => i !== \"borderDash\" && i !== \"tickBorderDash\"\n});\nO.describe(\"scales\", {\n  _fallback: \"scale\"\n});\nO.describe(\"scale.ticks\", {\n  _scriptable: (i) => i !== \"backdropPadding\" && i !== \"callback\",\n  _indexable: (i) => i !== \"backdropPadding\"\n});\nfunction Sa(i, t) {\n  const e = i.options.ticks, s = e.maxTicksLimit || Pa(i), n = e.major.enabled ? Da(t) : [], o = n.length, r = n[0], a = n[o - 1], l = [];\n  if (o > s)\n    return Oa(t, l, n, o / s), l;\n  const c = Ca(n, t, s);\n  if (o > 0) {\n    let h, d;\n    const u = o > 1 ? Math.round((a - r) / (o - 1)) : null;\n    for (Oe(t, l, c, T(u) ? 0 : r - u, r), h = 0, d = o - 1; h < d; h++)\n      Oe(t, l, c, n[h], n[h + 1]);\n    return Oe(t, l, c, a, T(u) ? t.length : a + u), l;\n  }\n  return Oe(t, l, c), l;\n}\nfunction Pa(i) {\n  const t = i.options.offset, e = i._tickSize(), s = i._length / e + (t ? 0 : 1), n = i._maxLength / e;\n  return Math.floor(Math.min(s, n));\n}\nfunction Ca(i, t, e) {\n  const s = Aa(i), n = t.length / e;\n  if (!s)\n    return Math.max(n, 1);\n  const o = Do(s);\n  for (let r = 0, a = o.length - 1; r < a; r++) {\n    const l = o[r];\n    if (l > n)\n      return l;\n  }\n  return Math.max(n, 1);\n}\nfunction Da(i) {\n  const t = [];\n  let e, s;\n  for (e = 0, s = i.length; e < s; e++)\n    i[e].major && t.push(e);\n  return t;\n}\nfunction Oa(i, t, e, s) {\n  let n = 0, o = e[0], r;\n  for (s = Math.ceil(s), r = 0; r < i.length; r++)\n    r === o && (t.push(i[r]), n++, o = e[n * s]);\n}\nfunction Oe(i, t, e, s, n) {\n  const o = C(s, 0), r = Math.min(C(n, i.length), i.length);\n  let a = 0, l, c, h;\n  for (e = Math.ceil(e), n && (l = n - s, e = l / Math.floor(l / e)), h = o; h < 0; )\n    a++, h = Math.round(o + a * e);\n  for (c = Math.max(o, 0); c < r; c++)\n    c === h && (t.push(i[c]), a++, h = Math.round(o + a * e));\n}\nfunction Aa(i) {\n  const t = i.length;\n  let e, s;\n  if (t < 2)\n    return !1;\n  for (s = i[0], e = 1; e < t; ++e)\n    if (i[e] - i[e - 1] !== s)\n      return !1;\n  return s;\n}\nconst Ta = (i) => i === \"left\" ? \"right\" : i === \"right\" ? \"left\" : i, ws = (i, t, e) => t === \"top\" || t === \"left\" ? i[t] + e : i[t] - e;\nfunction Ss(i, t) {\n  const e = [], s = i.length / t, n = i.length;\n  let o = 0;\n  for (; o < n; o += s)\n    e.push(i[Math.floor(o)]);\n  return e;\n}\nfunction La(i, t, e) {\n  const s = i.ticks.length, n = Math.min(t, s - 1), o = i._startPixel, r = i._endPixel, a = 1e-6;\n  let l = i.getPixelForTick(n), c;\n  if (!(e && (s === 1 ? c = Math.max(l - o, r - l) : t === 0 ? c = (i.getPixelForTick(1) - l) / 2 : c = (l - i.getPixelForTick(n - 1)) / 2, l += n < t ? c : -c, l < o - a || l > r + a)))\n    return l;\n}\nfunction Ra(i, t) {\n  E(i, (e) => {\n    const s = e.gc, n = s.length / 2;\n    let o;\n    if (n > t) {\n      for (o = 0; o < n; ++o)\n        delete e.data[s[o]];\n      s.splice(0, n);\n    }\n  });\n}\nfunction Xt(i) {\n  return i.drawTicks ? i.tickLength : 0;\n}\nfunction Ps(i, t) {\n  if (!i.display)\n    return 0;\n  const e = $(i.font, t), s = K(i.padding);\n  return (z(i.text) ? i.text.length : 1) * e.lineHeight + s.height;\n}\nfunction Ea(i, t) {\n  return vt(i, {\n    scale: t,\n    type: \"scale\"\n  });\n}\nfunction Fa(i, t, e) {\n  return vt(i, {\n    tick: e,\n    index: t,\n    type: \"tick\"\n  });\n}\nfunction Ia(i, t, e) {\n  let s = Li(i);\n  return (e && t !== \"right\" || !e && t === \"right\") && (s = Ta(s)), s;\n}\nfunction za(i, t, e, s) {\n  const { top: n, left: o, bottom: r, right: a, chart: l } = i, { chartArea: c, scales: h } = l;\n  let d = 0, u, f, g;\n  const p = r - n, m = a - o;\n  if (i.isHorizontal()) {\n    if (f = U(s, o, a), D(e)) {\n      const b = Object.keys(e)[0], x = e[b];\n      g = h[b].getPixelForValue(x) + p - t;\n    } else\n      e === \"center\" ? g = (c.bottom + c.top) / 2 + p - t : g = ws(i, e, t);\n    u = a - o;\n  } else {\n    if (D(e)) {\n      const b = Object.keys(e)[0], x = e[b];\n      f = h[b].getPixelForValue(x) - m + t;\n    } else\n      e === \"center\" ? f = (c.left + c.right) / 2 - m + t : f = ws(i, e, t);\n    g = U(s, r, n), d = e === \"left\" ? -V : V;\n  }\n  return { titleX: f, titleY: g, maxWidth: u, rotation: d };\n}\nclass Mt extends st {\n  constructor(t) {\n    super(), this.id = t.id, this.type = t.type, this.options = void 0, this.ctx = t.ctx, this.chart = t.chart, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, this.maxWidth = void 0, this.maxHeight = void 0, this.paddingTop = void 0, this.paddingBottom = void 0, this.paddingLeft = void 0, this.paddingRight = void 0, this.axis = void 0, this.labelRotation = void 0, this.min = void 0, this.max = void 0, this._range = void 0, this.ticks = [], this._gridLineItems = null, this._labelItems = null, this._labelSizes = null, this._length = 0, this._maxLength = 0, this._longestTextCache = {}, this._startPixel = void 0, this._endPixel = void 0, this._reversePixels = !1, this._userMax = void 0, this._userMin = void 0, this._suggestedMax = void 0, this._suggestedMin = void 0, this._ticksLength = 0, this._borderValue = 0, this._cache = {}, this._dataLimitsCached = !1, this.$context = void 0;\n  }\n  init(t) {\n    this.options = t.setContext(this.getContext()), this.axis = t.axis, this._userMin = this.parse(t.min), this._userMax = this.parse(t.max), this._suggestedMin = this.parse(t.suggestedMin), this._suggestedMax = this.parse(t.suggestedMax);\n  }\n  parse(t, e) {\n    return t;\n  }\n  getUserBounds() {\n    let { _userMin: t, _userMax: e, _suggestedMin: s, _suggestedMax: n } = this;\n    return t = Q(t, Number.POSITIVE_INFINITY), e = Q(e, Number.NEGATIVE_INFINITY), s = Q(s, Number.POSITIVE_INFINITY), n = Q(n, Number.NEGATIVE_INFINITY), {\n      min: Q(t, s),\n      max: Q(e, n),\n      minDefined: N(t),\n      maxDefined: N(e)\n    };\n  }\n  getMinMax(t) {\n    let { min: e, max: s, minDefined: n, maxDefined: o } = this.getUserBounds(), r;\n    if (n && o)\n      return { min: e, max: s };\n    const a = this.getMatchingVisibleMetas();\n    for (let l = 0, c = a.length; l < c; ++l)\n      r = a[l].controller.getMinMax(this, t), n || (e = Math.min(e, r.min)), o || (s = Math.max(s, r.max));\n    return e = o && e > s ? s : e, s = n && e > s ? e : s, {\n      min: Q(e, Q(s, e)),\n      max: Q(s, Q(e, s))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const t = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [];\n  }\n  beforeLayout() {\n    this._cache = {}, this._dataLimitsCached = !1;\n  }\n  beforeUpdate() {\n    I(this.options.beforeUpdate, [this]);\n  }\n  update(t, e, s) {\n    const { beginAtZero: n, grace: o, ticks: r } = this.options, a = r.sampleSize;\n    this.beforeUpdate(), this.maxWidth = t, this.maxHeight = e, this._margins = s = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, s), this.ticks = null, this._labelSizes = null, this._gridLineItems = null, this._labelItems = null, this.beforeSetDimensions(), this.setDimensions(), this.afterSetDimensions(), this._maxLength = this.isHorizontal() ? this.width + s.left + s.right : this.height + s.top + s.bottom, this._dataLimitsCached || (this.beforeDataLimits(), this.determineDataLimits(), this.afterDataLimits(), this._range = mr(this, o, n), this._dataLimitsCached = !0), this.beforeBuildTicks(), this.ticks = this.buildTicks() || [], this.afterBuildTicks();\n    const l = a < this.ticks.length;\n    this._convertTicksToLabels(l ? Ss(this.ticks, a) : this.ticks), this.configure(), this.beforeCalculateLabelRotation(), this.calculateLabelRotation(), this.afterCalculateLabelRotation(), r.display && (r.autoSkip || r.source === \"auto\") && (this.ticks = Sa(this, this.ticks), this._labelSizes = null, this.afterAutoSkip()), l && this._convertTicksToLabels(this.ticks), this.beforeFit(), this.fit(), this.afterFit(), this.afterUpdate();\n  }\n  configure() {\n    let t = this.options.reverse, e, s;\n    this.isHorizontal() ? (e = this.left, s = this.right) : (e = this.top, s = this.bottom, t = !t), this._startPixel = e, this._endPixel = s, this._reversePixels = t, this._length = s - e, this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    I(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    I(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    this.isHorizontal() ? (this.width = this.maxWidth, this.left = 0, this.right = this.width) : (this.height = this.maxHeight, this.top = 0, this.bottom = this.height), this.paddingLeft = 0, this.paddingTop = 0, this.paddingRight = 0, this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    I(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(t) {\n    this.chart.notifyPlugins(t, this.getContext()), I(this.options[t], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks(\"beforeDataLimits\");\n  }\n  determineDataLimits() {\n  }\n  afterDataLimits() {\n    this._callHooks(\"afterDataLimits\");\n  }\n  beforeBuildTicks() {\n    this._callHooks(\"beforeBuildTicks\");\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks(\"afterBuildTicks\");\n  }\n  beforeTickToLabelConversion() {\n    I(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(t) {\n    const e = this.options.ticks;\n    let s, n, o;\n    for (s = 0, n = t.length; s < n; s++)\n      o = t[s], o.label = I(e.callback, [o.value, s, t], this);\n  }\n  afterTickToLabelConversion() {\n    I(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    I(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const t = this.options, e = t.ticks, s = this.ticks.length, n = e.minRotation || 0, o = e.maxRotation;\n    let r = n, a, l, c;\n    if (!this._isVisible() || !e.display || n >= o || s <= 1 || !this.isHorizontal()) {\n      this.labelRotation = n;\n      return;\n    }\n    const h = this._getLabelSizes(), d = h.widest.width, u = h.highest.height, f = Y(this.chart.width - d, 0, this.maxWidth);\n    a = t.offset ? this.maxWidth / s : f / (s - 1), d + 6 > a && (a = f / (s - (t.offset ? 0.5 : 1)), l = this.maxHeight - Xt(t.grid) - e.padding - Ps(t.title, this.chart.options.font), c = Math.sqrt(d * d + u * u), r = Ai(Math.min(\n      Math.asin(Y((h.highest.height + 6) / a, -1, 1)),\n      Math.asin(Y(l / c, -1, 1)) - Math.asin(Y(u / c, -1, 1))\n    )), r = Math.max(n, Math.min(o, r))), this.labelRotation = r;\n  }\n  afterCalculateLabelRotation() {\n    I(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {\n  }\n  beforeFit() {\n    I(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const t = {\n      width: 0,\n      height: 0\n    }, { chart: e, options: { ticks: s, title: n, grid: o } } = this, r = this._isVisible(), a = this.isHorizontal();\n    if (r) {\n      const l = Ps(n, e.options.font);\n      if (a ? (t.width = this.maxWidth, t.height = Xt(o) + l) : (t.height = this.maxHeight, t.width = Xt(o) + l), s.display && this.ticks.length) {\n        const { first: c, last: h, widest: d, highest: u } = this._getLabelSizes(), f = s.padding * 2, g = nt(this.labelRotation), p = Math.cos(g), m = Math.sin(g);\n        if (a) {\n          const b = s.mirror ? 0 : m * d.width + p * u.height;\n          t.height = Math.min(this.maxHeight, t.height + b + f);\n        } else {\n          const b = s.mirror ? 0 : p * d.width + m * u.height;\n          t.width = Math.min(this.maxWidth, t.width + b + f);\n        }\n        this._calculatePadding(c, h, m, p);\n      }\n    }\n    this._handleMargins(), a ? (this.width = this._length = e.width - this._margins.left - this._margins.right, this.height = t.height) : (this.width = t.width, this.height = this._length = e.height - this._margins.top - this._margins.bottom);\n  }\n  _calculatePadding(t, e, s, n) {\n    const { ticks: { align: o, padding: r }, position: a } = this.options, l = this.labelRotation !== 0, c = a !== \"top\" && this.axis === \"x\";\n    if (this.isHorizontal()) {\n      const h = this.getPixelForTick(0) - this.left, d = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let u = 0, f = 0;\n      l ? c ? (u = n * t.width, f = s * e.height) : (u = s * t.height, f = n * e.width) : o === \"start\" ? f = e.width : o === \"end\" ? u = t.width : o !== \"inner\" && (u = t.width / 2, f = e.width / 2), this.paddingLeft = Math.max((u - h + r) * this.width / (this.width - h), 0), this.paddingRight = Math.max((f - d + r) * this.width / (this.width - d), 0);\n    } else {\n      let h = e.height / 2, d = t.height / 2;\n      o === \"start\" ? (h = 0, d = t.height) : o === \"end\" && (h = e.height, d = 0), this.paddingTop = h + r, this.paddingBottom = d + r;\n    }\n  }\n  _handleMargins() {\n    this._margins && (this._margins.left = Math.max(this.paddingLeft, this._margins.left), this._margins.top = Math.max(this.paddingTop, this._margins.top), this._margins.right = Math.max(this.paddingRight, this._margins.right), this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom));\n  }\n  afterFit() {\n    I(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const { axis: t, position: e } = this.options;\n    return e === \"top\" || e === \"bottom\" || t === \"x\";\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(t) {\n    this.beforeTickToLabelConversion(), this.generateTickLabels(t);\n    let e, s;\n    for (e = 0, s = t.length; e < s; e++)\n      T(t[e].label) && (t.splice(e, 1), s--, e--);\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let t = this._labelSizes;\n    if (!t) {\n      const e = this.options.ticks.sampleSize;\n      let s = this.ticks;\n      e < s.length && (s = Ss(s, e)), this._labelSizes = t = this._computeLabelSizes(s, s.length);\n    }\n    return t;\n  }\n  _computeLabelSizes(t, e) {\n    const { ctx: s, _longestTextCache: n } = this, o = [], r = [];\n    let a = 0, l = 0, c, h, d, u, f, g, p, m, b, x, v;\n    for (c = 0; c < e; ++c) {\n      if (u = t[c].label, f = this._resolveTickFontOptions(c), s.font = g = f.string, p = n[g] = n[g] || { data: {}, gc: [] }, m = f.lineHeight, b = x = 0, !T(u) && !z(u))\n        b = Ne(s, p.data, p.gc, b, u), x = m;\n      else if (z(u))\n        for (h = 0, d = u.length; h < d; ++h)\n          v = u[h], !T(v) && !z(v) && (b = Ne(s, p.data, p.gc, b, v), x += m);\n      o.push(b), r.push(x), a = Math.max(b, a), l = Math.max(x, l);\n    }\n    Ra(n, e);\n    const y = o.indexOf(a), _ = r.indexOf(l), M = (k) => ({ width: o[k] || 0, height: r[k] || 0 });\n    return {\n      first: M(0),\n      last: M(e - 1),\n      widest: M(y),\n      highest: M(_),\n      widths: o,\n      heights: r\n    };\n  }\n  getLabelForValue(t) {\n    return t;\n  }\n  getPixelForValue(t, e) {\n    return NaN;\n  }\n  getValueForPixel(t) {\n  }\n  getPixelForTick(t) {\n    const e = this.ticks;\n    return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);\n  }\n  getPixelForDecimal(t) {\n    this._reversePixels && (t = 1 - t);\n    const e = this._startPixel + t * this._length;\n    return To(this._alignToPixels ? wt(this.chart, e, 0) : e);\n  }\n  getDecimalForPixel(t) {\n    const e = (t - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - e : e;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const { min: t, max: e } = this;\n    return t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0;\n  }\n  getContext(t) {\n    const e = this.ticks || [];\n    if (t >= 0 && t < e.length) {\n      const s = e[t];\n      return s.$context || (s.$context = Fa(this.getContext(), t, s));\n    }\n    return this.$context || (this.$context = Ea(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const t = this.options.ticks, e = nt(this.labelRotation), s = Math.abs(Math.cos(e)), n = Math.abs(Math.sin(e)), o = this._getLabelSizes(), r = t.autoSkipPadding || 0, a = o ? o.widest.width + r : 0, l = o ? o.highest.height + r : 0;\n    return this.isHorizontal() ? l * s > a * n ? a / s : l / n : l * n < a * s ? l / s : a / n;\n  }\n  _isVisible() {\n    const t = this.options.display;\n    return t !== \"auto\" ? !!t : this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(t) {\n    const e = this.axis, s = this.chart, n = this.options, { grid: o, position: r } = n, a = o.offset, l = this.isHorizontal(), h = this.ticks.length + (a ? 1 : 0), d = Xt(o), u = [], f = o.setContext(this.getContext()), g = f.drawBorder ? f.borderWidth : 0, p = g / 2, m = function(P) {\n      return wt(s, P, g);\n    };\n    let b, x, v, y, _, M, k, S, w, L, R, A;\n    if (r === \"top\")\n      b = m(this.bottom), M = this.bottom - d, S = b - p, L = m(t.top) + p, A = t.bottom;\n    else if (r === \"bottom\")\n      b = m(this.top), L = t.top, A = m(t.bottom) - p, M = b + p, S = this.top + d;\n    else if (r === \"left\")\n      b = m(this.right), _ = this.right - d, k = b - p, w = m(t.left) + p, R = t.right;\n    else if (r === \"right\")\n      b = m(this.left), w = t.left, R = m(t.right) - p, _ = b + p, k = this.left + d;\n    else if (e === \"x\") {\n      if (r === \"center\")\n        b = m((t.top + t.bottom) / 2 + 0.5);\n      else if (D(r)) {\n        const P = Object.keys(r)[0], j = r[P];\n        b = m(this.chart.scales[P].getPixelForValue(j));\n      }\n      L = t.top, A = t.bottom, M = b + p, S = M + d;\n    } else if (e === \"y\") {\n      if (r === \"center\")\n        b = m((t.left + t.right) / 2);\n      else if (D(r)) {\n        const P = Object.keys(r)[0], j = r[P];\n        b = m(this.chart.scales[P].getPixelForValue(j));\n      }\n      _ = b - p, k = _ - d, w = t.left, R = t.right;\n    }\n    const H = C(n.ticks.maxTicksLimit, h), q = Math.max(1, Math.ceil(h / H));\n    for (x = 0; x < h; x += q) {\n      const P = o.setContext(this.getContext(x)), j = P.lineWidth, W = P.color, kt = P.borderDash || [], ti = P.borderDashOffset, Rt = P.tickWidth, ke = P.tickColor, Et = P.tickBorderDash || [], jt = P.tickBorderDashOffset;\n      v = La(this, x, a), v !== void 0 && (y = wt(s, v, j), l ? _ = k = w = R = y : M = S = L = A = y, u.push({\n        tx1: _,\n        ty1: M,\n        tx2: k,\n        ty2: S,\n        x1: w,\n        y1: L,\n        x2: R,\n        y2: A,\n        width: j,\n        color: W,\n        borderDash: kt,\n        borderDashOffset: ti,\n        tickWidth: Rt,\n        tickColor: ke,\n        tickBorderDash: Et,\n        tickBorderDashOffset: jt\n      }));\n    }\n    return this._ticksLength = h, this._borderValue = b, u;\n  }\n  _computeLabelItems(t) {\n    const e = this.axis, s = this.options, { position: n, ticks: o } = s, r = this.isHorizontal(), a = this.ticks, { align: l, crossAlign: c, padding: h, mirror: d } = o, u = Xt(s.grid), f = u + h, g = d ? -h : f, p = -nt(this.labelRotation), m = [];\n    let b, x, v, y, _, M, k, S, w, L, R, A, H = \"middle\";\n    if (n === \"top\")\n      M = this.bottom - g, k = this._getXAxisLabelAlignment();\n    else if (n === \"bottom\")\n      M = this.top + g, k = this._getXAxisLabelAlignment();\n    else if (n === \"left\") {\n      const P = this._getYAxisLabelAlignment(u);\n      k = P.textAlign, _ = P.x;\n    } else if (n === \"right\") {\n      const P = this._getYAxisLabelAlignment(u);\n      k = P.textAlign, _ = P.x;\n    } else if (e === \"x\") {\n      if (n === \"center\")\n        M = (t.top + t.bottom) / 2 + f;\n      else if (D(n)) {\n        const P = Object.keys(n)[0], j = n[P];\n        M = this.chart.scales[P].getPixelForValue(j) + f;\n      }\n      k = this._getXAxisLabelAlignment();\n    } else if (e === \"y\") {\n      if (n === \"center\")\n        _ = (t.left + t.right) / 2 - f;\n      else if (D(n)) {\n        const P = Object.keys(n)[0], j = n[P];\n        _ = this.chart.scales[P].getPixelForValue(j);\n      }\n      k = this._getYAxisLabelAlignment(u).textAlign;\n    }\n    e === \"y\" && (l === \"start\" ? H = \"top\" : l === \"end\" && (H = \"bottom\"));\n    const q = this._getLabelSizes();\n    for (b = 0, x = a.length; b < x; ++b) {\n      v = a[b], y = v.label;\n      const P = o.setContext(this.getContext(b));\n      S = this.getPixelForTick(b) + o.labelOffset, w = this._resolveTickFontOptions(b), L = w.lineHeight, R = z(y) ? y.length : 1;\n      const j = R / 2, W = P.color, kt = P.textStrokeColor, ti = P.textStrokeWidth;\n      let Rt = k;\n      r ? (_ = S, k === \"inner\" && (b === x - 1 ? Rt = this.options.reverse ? \"left\" : \"right\" : b === 0 ? Rt = this.options.reverse ? \"right\" : \"left\" : Rt = \"center\"), n === \"top\" ? c === \"near\" || p !== 0 ? A = -R * L + L / 2 : c === \"center\" ? A = -q.highest.height / 2 - j * L + L : A = -q.highest.height + L / 2 : c === \"near\" || p !== 0 ? A = L / 2 : c === \"center\" ? A = q.highest.height / 2 - j * L : A = q.highest.height - R * L, d && (A *= -1)) : (M = S, A = (1 - R) * L / 2);\n      let ke;\n      if (P.showLabelBackdrop) {\n        const Et = K(P.backdropPadding), jt = q.heights[b], ei = q.widths[b];\n        let ii = M + A - Et.top, si = _ - Et.left;\n        switch (H) {\n          case \"middle\":\n            ii -= jt / 2;\n            break;\n          case \"bottom\":\n            ii -= jt;\n            break;\n        }\n        switch (k) {\n          case \"center\":\n            si -= ei / 2;\n            break;\n          case \"right\":\n            si -= ei;\n            break;\n        }\n        ke = {\n          left: si,\n          top: ii,\n          width: ei + Et.width,\n          height: jt + Et.height,\n          color: P.backdropColor\n        };\n      }\n      m.push({\n        rotation: p,\n        label: y,\n        font: w,\n        color: W,\n        strokeColor: kt,\n        strokeWidth: ti,\n        textOffset: A,\n        textAlign: Rt,\n        textBaseline: H,\n        translation: [_, M],\n        backdrop: ke\n      });\n    }\n    return m;\n  }\n  _getXAxisLabelAlignment() {\n    const { position: t, ticks: e } = this.options;\n    if (-nt(this.labelRotation))\n      return t === \"top\" ? \"left\" : \"right\";\n    let n = \"center\";\n    return e.align === \"start\" ? n = \"left\" : e.align === \"end\" ? n = \"right\" : e.align === \"inner\" && (n = \"inner\"), n;\n  }\n  _getYAxisLabelAlignment(t) {\n    const { position: e, ticks: { crossAlign: s, mirror: n, padding: o } } = this.options, r = this._getLabelSizes(), a = t + o, l = r.widest.width;\n    let c, h;\n    return e === \"left\" ? n ? (h = this.right + o, s === \"near\" ? c = \"left\" : s === \"center\" ? (c = \"center\", h += l / 2) : (c = \"right\", h += l)) : (h = this.right - a, s === \"near\" ? c = \"right\" : s === \"center\" ? (c = \"center\", h -= l / 2) : (c = \"left\", h = this.left)) : e === \"right\" ? n ? (h = this.left + o, s === \"near\" ? c = \"right\" : s === \"center\" ? (c = \"center\", h -= l / 2) : (c = \"left\", h -= l)) : (h = this.left + a, s === \"near\" ? c = \"left\" : s === \"center\" ? (c = \"center\", h += l / 2) : (c = \"right\", h = this.right)) : c = \"right\", { textAlign: c, x: h };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror)\n      return;\n    const t = this.chart, e = this.options.position;\n    if (e === \"left\" || e === \"right\")\n      return { top: 0, left: this.left, bottom: t.height, right: this.right };\n    if (e === \"top\" || e === \"bottom\")\n      return { top: this.top, left: 0, bottom: this.bottom, right: t.width };\n  }\n  drawBackground() {\n    const { ctx: t, options: { backgroundColor: e }, left: s, top: n, width: o, height: r } = this;\n    e && (t.save(), t.fillStyle = e, t.fillRect(s, n, o, r), t.restore());\n  }\n  getLineWidthForValue(t) {\n    const e = this.options.grid;\n    if (!this._isVisible() || !e.display)\n      return 0;\n    const n = this.ticks.findIndex((o) => o.value === t);\n    return n >= 0 ? e.setContext(this.getContext(n)).lineWidth : 0;\n  }\n  drawGrid(t) {\n    const e = this.options.grid, s = this.ctx, n = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(t));\n    let o, r;\n    const a = (l, c, h) => {\n      !h.width || !h.color || (s.save(), s.lineWidth = h.width, s.strokeStyle = h.color, s.setLineDash(h.borderDash || []), s.lineDashOffset = h.borderDashOffset, s.beginPath(), s.moveTo(l.x, l.y), s.lineTo(c.x, c.y), s.stroke(), s.restore());\n    };\n    if (e.display)\n      for (o = 0, r = n.length; o < r; ++o) {\n        const l = n[o];\n        e.drawOnChartArea && a(\n          { x: l.x1, y: l.y1 },\n          { x: l.x2, y: l.y2 },\n          l\n        ), e.drawTicks && a(\n          { x: l.tx1, y: l.ty1 },\n          { x: l.tx2, y: l.ty2 },\n          {\n            color: l.tickColor,\n            width: l.tickWidth,\n            borderDash: l.tickBorderDash,\n            borderDashOffset: l.tickBorderDashOffset\n          }\n        );\n      }\n  }\n  drawBorder() {\n    const { chart: t, ctx: e, options: { grid: s } } = this, n = s.setContext(this.getContext()), o = s.drawBorder ? n.borderWidth : 0;\n    if (!o)\n      return;\n    const r = s.setContext(this.getContext(0)).lineWidth, a = this._borderValue;\n    let l, c, h, d;\n    this.isHorizontal() ? (l = wt(t, this.left, o) - o / 2, c = wt(t, this.right, r) + r / 2, h = d = a) : (h = wt(t, this.top, o) - o / 2, d = wt(t, this.bottom, r) + r / 2, l = c = a), e.save(), e.lineWidth = n.borderWidth, e.strokeStyle = n.borderColor, e.beginPath(), e.moveTo(l, h), e.lineTo(c, d), e.stroke(), e.restore();\n  }\n  drawLabels(t) {\n    if (!this.options.ticks.display)\n      return;\n    const s = this.ctx, n = this._computeLabelArea();\n    n && Xe(s, n);\n    const o = this._labelItems || (this._labelItems = this._computeLabelItems(t));\n    let r, a;\n    for (r = 0, a = o.length; r < a; ++r) {\n      const l = o[r], c = l.font, h = l.label;\n      l.backdrop && (s.fillStyle = l.backdrop.color, s.fillRect(l.backdrop.left, l.backdrop.top, l.backdrop.width, l.backdrop.height));\n      let d = l.textOffset;\n      Tt(s, h, 0, d, c, l);\n    }\n    n && Ue(s);\n  }\n  drawTitle() {\n    const { ctx: t, options: { position: e, title: s, reverse: n } } = this;\n    if (!s.display)\n      return;\n    const o = $(s.font), r = K(s.padding), a = s.align;\n    let l = o.lineHeight / 2;\n    e === \"bottom\" || e === \"center\" || D(e) ? (l += r.bottom, z(s.text) && (l += o.lineHeight * (s.text.length - 1))) : l += r.top;\n    const { titleX: c, titleY: h, maxWidth: d, rotation: u } = za(this, l, e, a);\n    Tt(t, s.text, 0, 0, o, {\n      color: s.color,\n      maxWidth: d,\n      rotation: u,\n      textAlign: Ia(a, e, n),\n      textBaseline: \"middle\",\n      translation: [c, h]\n    });\n  }\n  draw(t) {\n    this._isVisible() && (this.drawBackground(), this.drawGrid(t), this.drawBorder(), this.drawTitle(), this.drawLabels(t));\n  }\n  _layers() {\n    const t = this.options, e = t.ticks && t.ticks.z || 0, s = C(t.grid && t.grid.z, -1);\n    return !this._isVisible() || this.draw !== Mt.prototype.draw ? [{\n      z: e,\n      draw: (n) => {\n        this.draw(n);\n      }\n    }] : [{\n      z: s,\n      draw: (n) => {\n        this.drawBackground(), this.drawGrid(n), this.drawTitle();\n      }\n    }, {\n      z: s + 1,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: e,\n      draw: (n) => {\n        this.drawLabels(n);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(t) {\n    const e = this.chart.getSortedVisibleDatasetMetas(), s = this.axis + \"AxisID\", n = [];\n    let o, r;\n    for (o = 0, r = e.length; o < r; ++o) {\n      const a = e[o];\n      a[s] === this.id && (!t || a.type === t) && n.push(a);\n    }\n    return n;\n  }\n  _resolveTickFontOptions(t) {\n    const e = this.options.ticks.setContext(this.getContext(t));\n    return $(e.font);\n  }\n  _maxDigits() {\n    const t = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / t;\n  }\n}\nclass Ae {\n  constructor(t, e, s) {\n    this.type = t, this.scope = e, this.override = s, this.items = /* @__PURE__ */ Object.create(null);\n  }\n  isForType(t) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, t.prototype);\n  }\n  register(t) {\n    const e = Object.getPrototypeOf(t);\n    let s;\n    Wa(e) && (s = this.register(e));\n    const n = this.items, o = t.id, r = this.scope + \".\" + o;\n    if (!o)\n      throw new Error(\"class does not have id: \" + t);\n    return o in n || (n[o] = t, Ba(t, r, s), this.override && O.override(t.id, t.overrides)), r;\n  }\n  get(t) {\n    return this.items[t];\n  }\n  unregister(t) {\n    const e = this.items, s = t.id, n = this.scope;\n    s in e && delete e[s], n && s in O[n] && (delete O[n][s], this.override && delete At[s]);\n  }\n}\nfunction Ba(i, t, e) {\n  const s = ne(/* @__PURE__ */ Object.create(null), [\n    e ? O.get(e) : {},\n    O.get(t),\n    i.defaults\n  ]);\n  O.set(t, s), i.defaultRoutes && Va(t, i.defaultRoutes), i.descriptors && O.describe(t, i.descriptors);\n}\nfunction Va(i, t) {\n  Object.keys(t).forEach((e) => {\n    const s = e.split(\".\"), n = s.pop(), o = [i].concat(s).join(\".\"), r = t[e].split(\".\"), a = r.pop(), l = r.join(\".\");\n    O.route(o, n, l, a);\n  });\n}\nfunction Wa(i) {\n  return \"id\" in i && \"defaults\" in i;\n}\nclass Na {\n  constructor() {\n    this.controllers = new Ae(it, \"datasets\", !0), this.elements = new Ae(st, \"elements\"), this.plugins = new Ae(Object, \"plugins\"), this.scales = new Ae(Mt, \"scales\"), this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...t) {\n    this._each(\"register\", t);\n  }\n  remove(...t) {\n    this._each(\"unregister\", t);\n  }\n  addControllers(...t) {\n    this._each(\"register\", t, this.controllers);\n  }\n  addElements(...t) {\n    this._each(\"register\", t, this.elements);\n  }\n  addPlugins(...t) {\n    this._each(\"register\", t, this.plugins);\n  }\n  addScales(...t) {\n    this._each(\"register\", t, this.scales);\n  }\n  getController(t) {\n    return this._get(t, this.controllers, \"controller\");\n  }\n  getElement(t) {\n    return this._get(t, this.elements, \"element\");\n  }\n  getPlugin(t) {\n    return this._get(t, this.plugins, \"plugin\");\n  }\n  getScale(t) {\n    return this._get(t, this.scales, \"scale\");\n  }\n  removeControllers(...t) {\n    this._each(\"unregister\", t, this.controllers);\n  }\n  removeElements(...t) {\n    this._each(\"unregister\", t, this.elements);\n  }\n  removePlugins(...t) {\n    this._each(\"unregister\", t, this.plugins);\n  }\n  removeScales(...t) {\n    this._each(\"unregister\", t, this.scales);\n  }\n  _each(t, e, s) {\n    [...e].forEach((n) => {\n      const o = s || this._getRegistryForType(n);\n      s || o.isForType(n) || o === this.plugins && n.id ? this._exec(t, o, n) : E(n, (r) => {\n        const a = s || this._getRegistryForType(r);\n        this._exec(t, a, r);\n      });\n    });\n  }\n  _exec(t, e, s) {\n    const n = Oi(t);\n    I(s[\"before\" + n], [], s), e[t](s), I(s[\"after\" + n], [], s);\n  }\n  _getRegistryForType(t) {\n    for (let e = 0; e < this._typedRegistries.length; e++) {\n      const s = this._typedRegistries[e];\n      if (s.isForType(t))\n        return s;\n    }\n    return this.plugins;\n  }\n  _get(t, e, s) {\n    const n = e.get(t);\n    if (n === void 0)\n      throw new Error('\"' + t + '\" is not a registered ' + s + \".\");\n    return n;\n  }\n}\nvar ot = new Na();\nclass xe extends it {\n  update(t) {\n    const e = this._cachedMeta, { data: s = [] } = e, n = this.chart._animationsDisabled;\n    let { start: o, count: r } = pn(e, s, n);\n    if (this._drawStart = o, this._drawCount = r, mn(e) && (o = 0, r = s.length), this.options.showLine) {\n      const { dataset: a, _dataset: l } = e;\n      a._chart = this.chart, a._datasetIndex = this.index, a._decimated = !!l._decimated, a.points = s;\n      const c = this.resolveDatasetElementOptions(t);\n      c.segment = this.options.segment, this.updateElement(a, void 0, {\n        animated: !n,\n        options: c\n      }, t);\n    }\n    this.updateElements(s, o, r, t);\n  }\n  addElements() {\n    const { showLine: t } = this.options;\n    !this.datasetElementType && t && (this.datasetElementType = ot.getElement(\"line\")), super.addElements();\n  }\n  updateElements(t, e, s, n) {\n    const o = n === \"reset\", { iScale: r, vScale: a, _stacked: l, _dataset: c } = this._cachedMeta, h = this.resolveDataElementOptions(e, n), d = this.getSharedOptions(h), u = this.includeOptions(n, d), f = r.axis, g = a.axis, { spanGaps: p, segment: m } = this.options, b = Bt(p) ? p : Number.POSITIVE_INFINITY, x = this.chart._animationsDisabled || o || n === \"none\";\n    let v = e > 0 && this.getParsed(e - 1);\n    for (let y = e; y < e + s; ++y) {\n      const _ = t[y], M = this.getParsed(y), k = x ? _ : {}, S = T(M[g]), w = k[f] = r.getPixelForValue(M[f], y), L = k[g] = o || S ? a.getBasePixel() : a.getPixelForValue(l ? this.applyStack(a, M, l) : M[g], y);\n      k.skip = isNaN(w) || isNaN(L) || S, k.stop = y > 0 && Math.abs(M[f] - v[f]) > b, m && (k.parsed = M, k.raw = c.data[y]), u && (k.options = d || this.resolveDataElementOptions(y, _.active ? \"active\" : n)), x || this.updateElement(_, y, k, n), v = M;\n    }\n    this.updateSharedOptions(d, n, h);\n  }\n  getMaxOverflow() {\n    const t = this._cachedMeta, e = t.data || [];\n    if (!this.options.showLine) {\n      let a = 0;\n      for (let l = e.length - 1; l >= 0; --l)\n        a = Math.max(a, e[l].size(this.resolveDataElementOptions(l)) / 2);\n      return a > 0 && a;\n    }\n    const s = t.dataset, n = s.options && s.options.borderWidth || 0;\n    if (!e.length)\n      return n;\n    const o = e[0].size(this.resolveDataElementOptions(0)), r = e[e.length - 1].size(this.resolveDataElementOptions(e.length - 1));\n    return Math.max(n, o, r) / 2;\n  }\n}\nxe.id = \"scatter\";\nxe.defaults = {\n  datasetElementType: !1,\n  dataElementType: \"point\",\n  showLine: !1,\n  fill: !1\n};\nxe.overrides = {\n  interaction: {\n    mode: \"point\"\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return \"\";\n        },\n        label(i) {\n          return \"(\" + i.label + \", \" + i.formattedValue + \")\";\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: \"linear\"\n    },\n    y: {\n      type: \"linear\"\n    }\n  }\n};\nvar Wn = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  BarController: ue,\n  BubbleController: fe,\n  DoughnutController: Lt,\n  LineController: ge,\n  PolarAreaController: pe,\n  PieController: qe,\n  RadarController: me,\n  ScatterController: xe\n});\nfunction St() {\n  throw new Error(\"This method is not implemented: Check that a complete date adapter is provided.\");\n}\nclass vi {\n  constructor(t) {\n    this.options = t || {};\n  }\n  init(t) {\n  }\n  formats() {\n    return St();\n  }\n  parse(t, e) {\n    return St();\n  }\n  format(t, e) {\n    return St();\n  }\n  add(t, e, s) {\n    return St();\n  }\n  diff(t, e, s) {\n    return St();\n  }\n  startOf(t, e, s) {\n    return St();\n  }\n  endOf(t, e) {\n    return St();\n  }\n}\nvi.override = function(i) {\n  Object.assign(vi.prototype, i);\n};\nvar Nn = {\n  _date: vi\n};\nfunction Ha(i, t, e, s) {\n  const { controller: n, data: o, _sorted: r } = i, a = n._cachedMeta.iScale;\n  if (a && t === a.axis && t !== \"r\" && r && o.length) {\n    const l = a._reversePixels ? Lo : ft;\n    if (s) {\n      if (n._sharedOptions) {\n        const c = o[0], h = typeof c.getRange == \"function\" && c.getRange(t);\n        if (h) {\n          const d = l(o, t, e - h), u = l(o, t, e + h);\n          return { lo: d.lo, hi: u.hi };\n        }\n      }\n    } else\n      return l(o, t, e);\n  }\n  return { lo: 0, hi: o.length - 1 };\n}\nfunction _e(i, t, e, s, n) {\n  const o = i.getSortedVisibleDatasetMetas(), r = e[t];\n  for (let a = 0, l = o.length; a < l; ++a) {\n    const { index: c, data: h } = o[a], { lo: d, hi: u } = Ha(o[a], t, r, n);\n    for (let f = d; f <= u; ++f) {\n      const g = h[f];\n      g.skip || s(g, c, f);\n    }\n  }\n}\nfunction ja(i) {\n  const t = i.indexOf(\"x\") !== -1, e = i.indexOf(\"y\") !== -1;\n  return function(s, n) {\n    const o = t ? Math.abs(s.x - n.x) : 0, r = e ? Math.abs(s.y - n.y) : 0;\n    return Math.sqrt(Math.pow(o, 2) + Math.pow(r, 2));\n  };\n}\nfunction di(i, t, e, s, n) {\n  const o = [];\n  return !n && !i.isPointInArea(t) || _e(i, e, t, function(a, l, c) {\n    !n && !re(a, i.chartArea, 0) || a.inRange(t.x, t.y, s) && o.push({ element: a, datasetIndex: l, index: c });\n  }, !0), o;\n}\nfunction $a(i, t, e, s) {\n  let n = [];\n  function o(r, a, l) {\n    const { startAngle: c, endAngle: h } = r.getProps([\"startAngle\", \"endAngle\"], s), { angle: d } = hn(r, { x: t.x, y: t.y });\n    oe(d, c, h) && n.push({ element: r, datasetIndex: a, index: l });\n  }\n  return _e(i, e, t, o), n;\n}\nfunction Ya(i, t, e, s, n, o) {\n  let r = [];\n  const a = ja(e);\n  let l = Number.POSITIVE_INFINITY;\n  function c(h, d, u) {\n    const f = h.inRange(t.x, t.y, n);\n    if (s && !f)\n      return;\n    const g = h.getCenterPoint(n);\n    if (!(!!o || i.isPointInArea(g)) && !f)\n      return;\n    const m = a(t, g);\n    m < l ? (r = [{ element: h, datasetIndex: d, index: u }], l = m) : m === l && r.push({ element: h, datasetIndex: d, index: u });\n  }\n  return _e(i, e, t, c), r;\n}\nfunction ui(i, t, e, s, n, o) {\n  return !o && !i.isPointInArea(t) ? [] : e === \"r\" && !s ? $a(i, t, e, n) : Ya(i, t, e, s, n, o);\n}\nfunction Cs(i, t, e, s, n) {\n  const o = [], r = e === \"x\" ? \"inXRange\" : \"inYRange\";\n  let a = !1;\n  return _e(i, e, t, (l, c, h) => {\n    l[r](t[e], n) && (o.push({ element: l, datasetIndex: c, index: h }), a = a || l.inRange(t.x, t.y, n));\n  }), s && !a ? [] : o;\n}\nvar Hn = {\n  evaluateInteractionItems: _e,\n  modes: {\n    index(i, t, e, s) {\n      const n = Pt(t, i), o = e.axis || \"x\", r = e.includeInvisible || !1, a = e.intersect ? di(i, n, o, s, r) : ui(i, n, o, !1, s, r), l = [];\n      return a.length ? (i.getSortedVisibleDatasetMetas().forEach((c) => {\n        const h = a[0].index, d = c.data[h];\n        d && !d.skip && l.push({ element: d, datasetIndex: c.index, index: h });\n      }), l) : [];\n    },\n    dataset(i, t, e, s) {\n      const n = Pt(t, i), o = e.axis || \"xy\", r = e.includeInvisible || !1;\n      let a = e.intersect ? di(i, n, o, s, r) : ui(i, n, o, !1, s, r);\n      if (a.length > 0) {\n        const l = a[0].datasetIndex, c = i.getDatasetMeta(l).data;\n        a = [];\n        for (let h = 0; h < c.length; ++h)\n          a.push({ element: c[h], datasetIndex: l, index: h });\n      }\n      return a;\n    },\n    point(i, t, e, s) {\n      const n = Pt(t, i), o = e.axis || \"xy\", r = e.includeInvisible || !1;\n      return di(i, n, o, s, r);\n    },\n    nearest(i, t, e, s) {\n      const n = Pt(t, i), o = e.axis || \"xy\", r = e.includeInvisible || !1;\n      return ui(i, n, o, e.intersect, s, r);\n    },\n    x(i, t, e, s) {\n      const n = Pt(t, i);\n      return Cs(i, n, \"x\", e.intersect, s);\n    },\n    y(i, t, e, s) {\n      const n = Pt(t, i);\n      return Cs(i, n, \"y\", e.intersect, s);\n    }\n  }\n};\nconst jn = [\"left\", \"top\", \"right\", \"bottom\"];\nfunction Ut(i, t) {\n  return i.filter((e) => e.pos === t);\n}\nfunction Ds(i, t) {\n  return i.filter((e) => jn.indexOf(e.pos) === -1 && e.box.axis === t);\n}\nfunction Kt(i, t) {\n  return i.sort((e, s) => {\n    const n = t ? s : e, o = t ? e : s;\n    return n.weight === o.weight ? n.index - o.index : n.weight - o.weight;\n  });\n}\nfunction Xa(i) {\n  const t = [];\n  let e, s, n, o, r, a;\n  for (e = 0, s = (i || []).length; e < s; ++e)\n    n = i[e], { position: o, options: { stack: r, stackWeight: a = 1 } } = n, t.push({\n      index: e,\n      box: n,\n      pos: o,\n      horizontal: n.isHorizontal(),\n      weight: n.weight,\n      stack: r && o + r,\n      stackWeight: a\n    });\n  return t;\n}\nfunction Ua(i) {\n  const t = {};\n  for (const e of i) {\n    const { stack: s, pos: n, stackWeight: o } = e;\n    if (!s || !jn.includes(n))\n      continue;\n    const r = t[s] || (t[s] = { count: 0, placed: 0, weight: 0, size: 0 });\n    r.count++, r.weight += o;\n  }\n  return t;\n}\nfunction Ka(i, t) {\n  const e = Ua(i), { vBoxMaxWidth: s, hBoxMaxHeight: n } = t;\n  let o, r, a;\n  for (o = 0, r = i.length; o < r; ++o) {\n    a = i[o];\n    const { fullSize: l } = a.box, c = e[a.stack], h = c && a.stackWeight / c.weight;\n    a.horizontal ? (a.width = h ? h * s : l && t.availableWidth, a.height = n) : (a.width = s, a.height = h ? h * n : l && t.availableHeight);\n  }\n  return e;\n}\nfunction qa(i) {\n  const t = Xa(i), e = Kt(t.filter((c) => c.box.fullSize), !0), s = Kt(Ut(t, \"left\"), !0), n = Kt(Ut(t, \"right\")), o = Kt(Ut(t, \"top\"), !0), r = Kt(Ut(t, \"bottom\")), a = Ds(t, \"x\"), l = Ds(t, \"y\");\n  return {\n    fullSize: e,\n    leftAndTop: s.concat(o),\n    rightAndBottom: n.concat(l).concat(r).concat(a),\n    chartArea: Ut(t, \"chartArea\"),\n    vertical: s.concat(n).concat(l),\n    horizontal: o.concat(r).concat(a)\n  };\n}\nfunction Os(i, t, e, s) {\n  return Math.max(i[e], t[e]) + Math.max(i[s], t[s]);\n}\nfunction $n(i, t) {\n  i.top = Math.max(i.top, t.top), i.left = Math.max(i.left, t.left), i.bottom = Math.max(i.bottom, t.bottom), i.right = Math.max(i.right, t.right);\n}\nfunction Ga(i, t, e, s) {\n  const { pos: n, box: o } = e, r = i.maxPadding;\n  if (!D(n)) {\n    e.size && (i[n] -= e.size);\n    const d = s[e.stack] || { size: 0, count: 1 };\n    d.size = Math.max(d.size, e.horizontal ? o.height : o.width), e.size = d.size / d.count, i[n] += e.size;\n  }\n  o.getPadding && $n(r, o.getPadding());\n  const a = Math.max(0, t.outerWidth - Os(r, i, \"left\", \"right\")), l = Math.max(0, t.outerHeight - Os(r, i, \"top\", \"bottom\")), c = a !== i.w, h = l !== i.h;\n  return i.w = a, i.h = l, e.horizontal ? { same: c, other: h } : { same: h, other: c };\n}\nfunction Za(i) {\n  const t = i.maxPadding;\n  function e(s) {\n    const n = Math.max(t[s] - i[s], 0);\n    return i[s] += n, n;\n  }\n  i.y += e(\"top\"), i.x += e(\"left\"), e(\"right\"), e(\"bottom\");\n}\nfunction Ja(i, t) {\n  const e = t.maxPadding;\n  function s(n) {\n    const o = { left: 0, top: 0, right: 0, bottom: 0 };\n    return n.forEach((r) => {\n      o[r] = Math.max(t[r], e[r]);\n    }), o;\n  }\n  return s(i ? [\"left\", \"right\"] : [\"top\", \"bottom\"]);\n}\nfunction Jt(i, t, e, s) {\n  const n = [];\n  let o, r, a, l, c, h;\n  for (o = 0, r = i.length, c = 0; o < r; ++o) {\n    a = i[o], l = a.box, l.update(\n      a.width || t.w,\n      a.height || t.h,\n      Ja(a.horizontal, t)\n    );\n    const { same: d, other: u } = Ga(t, e, a, s);\n    c |= d && n.length, h = h || u, l.fullSize || n.push(a);\n  }\n  return c && Jt(n, t, e, s) || h;\n}\nfunction Te(i, t, e, s, n) {\n  i.top = e, i.left = t, i.right = t + s, i.bottom = e + n, i.width = s, i.height = n;\n}\nfunction As(i, t, e, s) {\n  const n = e.padding;\n  let { x: o, y: r } = t;\n  for (const a of i) {\n    const l = a.box, c = s[a.stack] || { count: 1, placed: 0, weight: 1 }, h = a.stackWeight / c.weight || 1;\n    if (a.horizontal) {\n      const d = t.w * h, u = c.size || l.height;\n      et(c.start) && (r = c.start), l.fullSize ? Te(l, n.left, r, e.outerWidth - n.right - n.left, u) : Te(l, t.left + c.placed, r, d, u), c.start = r, c.placed += d, r = l.bottom;\n    } else {\n      const d = t.h * h, u = c.size || l.width;\n      et(c.start) && (o = c.start), l.fullSize ? Te(l, o, n.top, u, e.outerHeight - n.bottom - n.top) : Te(l, o, t.top + c.placed, u, d), c.start = o, c.placed += d, o = l.right;\n    }\n  }\n  t.x = o, t.y = r;\n}\nO.set(\"layout\", {\n  autoPadding: !0,\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar X = {\n  addBox(i, t) {\n    i.boxes || (i.boxes = []), t.fullSize = t.fullSize || !1, t.position = t.position || \"top\", t.weight = t.weight || 0, t._layers = t._layers || function() {\n      return [{\n        z: 0,\n        draw(e) {\n          t.draw(e);\n        }\n      }];\n    }, i.boxes.push(t);\n  },\n  removeBox(i, t) {\n    const e = i.boxes ? i.boxes.indexOf(t) : -1;\n    e !== -1 && i.boxes.splice(e, 1);\n  },\n  configure(i, t, e) {\n    t.fullSize = e.fullSize, t.position = e.position, t.weight = e.weight;\n  },\n  update(i, t, e, s) {\n    if (!i)\n      return;\n    const n = K(i.options.layout.padding), o = Math.max(t - n.width, 0), r = Math.max(e - n.height, 0), a = qa(i.boxes), l = a.vertical, c = a.horizontal;\n    E(i.boxes, (p) => {\n      typeof p.beforeLayout == \"function\" && p.beforeLayout();\n    });\n    const h = l.reduce((p, m) => m.box.options && m.box.options.display === !1 ? p : p + 1, 0) || 1, d = Object.freeze({\n      outerWidth: t,\n      outerHeight: e,\n      padding: n,\n      availableWidth: o,\n      availableHeight: r,\n      vBoxMaxWidth: o / 2 / h,\n      hBoxMaxHeight: r / 2\n    }), u = Object.assign({}, n);\n    $n(u, K(s));\n    const f = Object.assign({\n      maxPadding: u,\n      w: o,\n      h: r,\n      x: n.left,\n      y: n.top\n    }, n), g = Ka(l.concat(c), d);\n    Jt(a.fullSize, f, d, g), Jt(l, f, d, g), Jt(c, f, d, g) && Jt(l, f, d, g), Za(f), As(a.leftAndTop, f, d, g), f.x += f.w, f.y += f.h, As(a.rightAndBottom, f, d, g), i.chartArea = {\n      left: f.left,\n      top: f.top,\n      right: f.left + f.w,\n      bottom: f.top + f.h,\n      height: f.h,\n      width: f.w\n    }, E(a.chartArea, (p) => {\n      const m = p.box;\n      Object.assign(m, i.chartArea), m.update(f.w, f.h, { left: 0, top: 0, right: 0, bottom: 0 });\n    });\n  }\n};\nclass Hi {\n  acquireContext(t, e) {\n  }\n  releaseContext(t) {\n    return !1;\n  }\n  addEventListener(t, e, s) {\n  }\n  removeEventListener(t, e, s) {\n  }\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(t, e, s, n) {\n    return e = Math.max(0, e || t.width), s = s || t.height, {\n      width: e,\n      height: Math.max(0, n ? Math.floor(e / n) : s)\n    };\n  }\n  isAttached(t) {\n    return !0;\n  }\n  updateConfig(t) {\n  }\n}\nclass Yn extends Hi {\n  acquireContext(t) {\n    return t && t.getContext && t.getContext(\"2d\") || null;\n  }\n  updateConfig(t) {\n    t.options.animation = !1;\n  }\n}\nconst Ie = \"$chartjs\", Qa = {\n  touchstart: \"mousedown\",\n  touchmove: \"mousemove\",\n  touchend: \"mouseup\",\n  pointerenter: \"mouseenter\",\n  pointerdown: \"mousedown\",\n  pointermove: \"mousemove\",\n  pointerup: \"mouseup\",\n  pointerleave: \"mouseout\",\n  pointerout: \"mouseout\"\n}, Ts = (i) => i === null || i === \"\";\nfunction tl(i, t) {\n  const e = i.style, s = i.getAttribute(\"height\"), n = i.getAttribute(\"width\");\n  if (i[Ie] = {\n    initial: {\n      height: s,\n      width: n,\n      style: {\n        display: e.display,\n        height: e.height,\n        width: e.width\n      }\n    }\n  }, e.display = e.display || \"block\", e.boxSizing = e.boxSizing || \"border-box\", Ts(n)) {\n    const o = cs(i, \"width\");\n    o !== void 0 && (i.width = o);\n  }\n  if (Ts(s))\n    if (i.style.height === \"\")\n      i.height = i.width / (t || 2);\n    else {\n      const o = cs(i, \"height\");\n      o !== void 0 && (i.height = o);\n    }\n  return i;\n}\nconst Xn = Vr ? { passive: !0 } : !1;\nfunction el(i, t, e) {\n  i.addEventListener(t, e, Xn);\n}\nfunction il(i, t, e) {\n  i.canvas.removeEventListener(t, e, Xn);\n}\nfunction sl(i, t) {\n  const e = Qa[i.type] || i.type, { x: s, y: n } = Pt(i, t);\n  return {\n    type: e,\n    chart: t,\n    native: i,\n    x: s !== void 0 ? s : null,\n    y: n !== void 0 ? n : null\n  };\n}\nfunction je(i, t) {\n  for (const e of i)\n    if (e === t || e.contains(t))\n      return !0;\n}\nfunction nl(i, t, e) {\n  const s = i.canvas, n = new MutationObserver((o) => {\n    let r = !1;\n    for (const a of o)\n      r = r || je(a.addedNodes, s), r = r && !je(a.removedNodes, s);\n    r && e();\n  });\n  return n.observe(document, { childList: !0, subtree: !0 }), n;\n}\nfunction ol(i, t, e) {\n  const s = i.canvas, n = new MutationObserver((o) => {\n    let r = !1;\n    for (const a of o)\n      r = r || je(a.removedNodes, s), r = r && !je(a.addedNodes, s);\n    r && e();\n  });\n  return n.observe(document, { childList: !0, subtree: !0 }), n;\n}\nconst le = /* @__PURE__ */ new Map();\nlet Ls = 0;\nfunction Un() {\n  const i = window.devicePixelRatio;\n  i !== Ls && (Ls = i, le.forEach((t, e) => {\n    e.currentDevicePixelRatio !== i && t();\n  }));\n}\nfunction rl(i, t) {\n  le.size || window.addEventListener(\"resize\", Un), le.set(i, t);\n}\nfunction al(i) {\n  le.delete(i), le.size || window.removeEventListener(\"resize\", Un);\n}\nfunction ll(i, t, e) {\n  const s = i.canvas, n = s && Wi(s);\n  if (!n)\n    return;\n  const o = gn((a, l) => {\n    const c = n.clientWidth;\n    e(a, l), c < n.clientWidth && e();\n  }, window), r = new ResizeObserver((a) => {\n    const l = a[0], c = l.contentRect.width, h = l.contentRect.height;\n    c === 0 && h === 0 || o(c, h);\n  });\n  return r.observe(n), rl(i, o), r;\n}\nfunction fi(i, t, e) {\n  e && e.disconnect(), t === \"resize\" && al(i);\n}\nfunction cl(i, t, e) {\n  const s = i.canvas, n = gn((o) => {\n    i.ctx !== null && e(sl(o, i));\n  }, i, (o) => {\n    const r = o[0];\n    return [r, r.offsetX, r.offsetY];\n  });\n  return el(s, t, n), n;\n}\nclass Kn extends Hi {\n  acquireContext(t, e) {\n    const s = t && t.getContext && t.getContext(\"2d\");\n    return s && s.canvas === t ? (tl(t, e), s) : null;\n  }\n  releaseContext(t) {\n    const e = t.canvas;\n    if (!e[Ie])\n      return !1;\n    const s = e[Ie].initial;\n    [\"height\", \"width\"].forEach((o) => {\n      const r = s[o];\n      T(r) ? e.removeAttribute(o) : e.setAttribute(o, r);\n    });\n    const n = s.style || {};\n    return Object.keys(n).forEach((o) => {\n      e.style[o] = n[o];\n    }), e.width = e.width, delete e[Ie], !0;\n  }\n  addEventListener(t, e, s) {\n    this.removeEventListener(t, e);\n    const n = t.$proxies || (t.$proxies = {}), r = {\n      attach: nl,\n      detach: ol,\n      resize: ll\n    }[e] || cl;\n    n[e] = r(t, e, s);\n  }\n  removeEventListener(t, e) {\n    const s = t.$proxies || (t.$proxies = {}), n = s[e];\n    if (!n)\n      return;\n    ({\n      attach: fi,\n      detach: fi,\n      resize: fi\n    }[e] || il)(t, e, n), s[e] = void 0;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(t, e, s, n) {\n    return Br(t, e, s, n);\n  }\n  isAttached(t) {\n    const e = Wi(t);\n    return !!(e && e.isConnected);\n  }\n}\nfunction qn(i) {\n  return !An() || typeof OffscreenCanvas < \"u\" && i instanceof OffscreenCanvas ? Yn : Kn;\n}\nclass hl {\n  constructor() {\n    this._init = [];\n  }\n  notify(t, e, s, n) {\n    e === \"beforeInit\" && (this._init = this._createDescriptors(t, !0), this._notify(this._init, t, \"install\"));\n    const o = n ? this._descriptors(t).filter(n) : this._descriptors(t), r = this._notify(o, t, e, s);\n    return e === \"afterDestroy\" && (this._notify(o, t, \"stop\"), this._notify(this._init, t, \"uninstall\")), r;\n  }\n  _notify(t, e, s, n) {\n    n = n || {};\n    for (const o of t) {\n      const r = o.plugin, a = r[s], l = [e, n, o.options];\n      if (I(a, l, r) === !1 && n.cancelable)\n        return !1;\n    }\n    return !0;\n  }\n  invalidate() {\n    T(this._cache) || (this._oldCache = this._cache, this._cache = void 0);\n  }\n  _descriptors(t) {\n    if (this._cache)\n      return this._cache;\n    const e = this._cache = this._createDescriptors(t);\n    return this._notifyStateChanges(t), e;\n  }\n  _createDescriptors(t, e) {\n    const s = t && t.config, n = C(s.options && s.options.plugins, {}), o = dl(s);\n    return n === !1 && !e ? [] : fl(t, o, n, e);\n  }\n  _notifyStateChanges(t) {\n    const e = this._oldCache || [], s = this._cache, n = (o, r) => o.filter((a) => !r.some((l) => a.plugin.id === l.plugin.id));\n    this._notify(n(e, s), t, \"stop\"), this._notify(n(s, e), t, \"start\");\n  }\n}\nfunction dl(i) {\n  const t = {}, e = [], s = Object.keys(ot.plugins.items);\n  for (let o = 0; o < s.length; o++)\n    e.push(ot.getPlugin(s[o]));\n  const n = i.plugins || [];\n  for (let o = 0; o < n.length; o++) {\n    const r = n[o];\n    e.indexOf(r) === -1 && (e.push(r), t[r.id] = !0);\n  }\n  return { plugins: e, localIds: t };\n}\nfunction ul(i, t) {\n  return !t && i === !1 ? null : i === !0 ? {} : i;\n}\nfunction fl(i, { plugins: t, localIds: e }, s, n) {\n  const o = [], r = i.getContext();\n  for (const a of t) {\n    const l = a.id, c = ul(s[l], n);\n    c !== null && o.push({\n      plugin: a,\n      options: gl(i.config, { plugin: a, local: e[l] }, c, r)\n    });\n  }\n  return o;\n}\nfunction gl(i, { plugin: t, local: e }, s, n) {\n  const o = i.pluginScopeKeys(t), r = i.getOptionScopes(s, o);\n  return e && t.defaults && r.push(t.defaults), i.createResolver(r, n, [\"\"], {\n    scriptable: !1,\n    indexable: !1,\n    allKeys: !0\n  });\n}\nfunction Mi(i, t) {\n  const e = O.datasets[i] || {};\n  return ((t.datasets || {})[i] || {}).indexAxis || t.indexAxis || e.indexAxis || \"x\";\n}\nfunction pl(i, t) {\n  let e = i;\n  return i === \"_index_\" ? e = t : i === \"_value_\" && (e = t === \"x\" ? \"y\" : \"x\"), e;\n}\nfunction ml(i, t) {\n  return i === t ? \"_index_\" : \"_value_\";\n}\nfunction bl(i) {\n  if (i === \"top\" || i === \"bottom\")\n    return \"x\";\n  if (i === \"left\" || i === \"right\")\n    return \"y\";\n}\nfunction ki(i, t) {\n  return i === \"x\" || i === \"y\" ? i : t.axis || bl(t.position) || i.charAt(0).toLowerCase();\n}\nfunction xl(i, t) {\n  const e = At[i.type] || { scales: {} }, s = t.scales || {}, n = Mi(i.type, t), o = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null);\n  return Object.keys(s).forEach((a) => {\n    const l = s[a];\n    if (!D(l))\n      return console.error(`Invalid scale configuration for scale: ${a}`);\n    if (l._proxy)\n      return console.warn(`Ignoring resolver passed as options for scale: ${a}`);\n    const c = ki(a, l), h = ml(c, n), d = e.scales || {};\n    o[c] = o[c] || a, r[a] = Qt(/* @__PURE__ */ Object.create(null), [{ axis: c }, l, d[c], d[h]]);\n  }), i.data.datasets.forEach((a) => {\n    const l = a.type || i.type, c = a.indexAxis || Mi(l, t), d = (At[l] || {}).scales || {};\n    Object.keys(d).forEach((u) => {\n      const f = pl(u, c), g = a[f + \"AxisID\"] || o[f] || f;\n      r[g] = r[g] || /* @__PURE__ */ Object.create(null), Qt(r[g], [{ axis: f }, s[g], d[u]]);\n    });\n  }), Object.keys(r).forEach((a) => {\n    const l = r[a];\n    Qt(l, [O.scales[l.type], O.scale]);\n  }), r;\n}\nfunction Gn(i) {\n  const t = i.options || (i.options = {});\n  t.plugins = C(t.plugins, {}), t.scales = xl(i, t);\n}\nfunction Zn(i) {\n  return i = i || {}, i.datasets = i.datasets || [], i.labels = i.labels || [], i;\n}\nfunction _l(i) {\n  return i = i || {}, i.data = Zn(i.data), Gn(i), i;\n}\nconst Rs = /* @__PURE__ */ new Map(), Jn = /* @__PURE__ */ new Set();\nfunction Le(i, t) {\n  let e = Rs.get(i);\n  return e || (e = t(), Rs.set(i, e), Jn.add(e)), e;\n}\nconst qt = (i, t, e) => {\n  const s = _t(t, e);\n  s !== void 0 && i.add(s);\n};\nclass yl {\n  constructor(t) {\n    this._config = _l(t), this._scopeCache = /* @__PURE__ */ new Map(), this._resolverCache = /* @__PURE__ */ new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(t) {\n    this._config.type = t;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(t) {\n    this._config.data = Zn(t);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(t) {\n    this._config.options = t;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const t = this._config;\n    this.clearCache(), Gn(t);\n  }\n  clearCache() {\n    this._scopeCache.clear(), this._resolverCache.clear();\n  }\n  datasetScopeKeys(t) {\n    return Le(\n      t,\n      () => [[\n        `datasets.${t}`,\n        \"\"\n      ]]\n    );\n  }\n  datasetAnimationScopeKeys(t, e) {\n    return Le(\n      `${t}.transition.${e}`,\n      () => [\n        [\n          `datasets.${t}.transitions.${e}`,\n          `transitions.${e}`\n        ],\n        [\n          `datasets.${t}`,\n          \"\"\n        ]\n      ]\n    );\n  }\n  datasetElementScopeKeys(t, e) {\n    return Le(\n      `${t}-${e}`,\n      () => [[\n        `datasets.${t}.elements.${e}`,\n        `datasets.${t}`,\n        `elements.${e}`,\n        \"\"\n      ]]\n    );\n  }\n  pluginScopeKeys(t) {\n    const e = t.id, s = this.type;\n    return Le(\n      `${s}-plugin-${e}`,\n      () => [[\n        `plugins.${e}`,\n        ...t.additionalOptionScopes || []\n      ]]\n    );\n  }\n  _cachedScopes(t, e) {\n    const s = this._scopeCache;\n    let n = s.get(t);\n    return (!n || e) && (n = /* @__PURE__ */ new Map(), s.set(t, n)), n;\n  }\n  getOptionScopes(t, e, s) {\n    const { options: n, type: o } = this, r = this._cachedScopes(t, s), a = r.get(e);\n    if (a)\n      return a;\n    const l = /* @__PURE__ */ new Set();\n    e.forEach((h) => {\n      t && (l.add(t), h.forEach((d) => qt(l, t, d))), h.forEach((d) => qt(l, n, d)), h.forEach((d) => qt(l, At[o] || {}, d)), h.forEach((d) => qt(l, O, d)), h.forEach((d) => qt(l, _i, d));\n    });\n    const c = Array.from(l);\n    return c.length === 0 && c.push(/* @__PURE__ */ Object.create(null)), Jn.has(e) && r.set(e, c), c;\n  }\n  chartOptionScopes() {\n    const { options: t, type: e } = this;\n    return [\n      t,\n      At[e] || {},\n      O.datasets[e] || {},\n      { type: e },\n      O,\n      _i\n    ];\n  }\n  resolveNamedOptions(t, e, s, n = [\"\"]) {\n    const o = { $shared: !0 }, { resolver: r, subPrefixes: a } = Es(this._resolverCache, t, n);\n    let l = r;\n    if (Ml(r, e)) {\n      o.$shared = !1, s = yt(s) ? s() : s;\n      const c = this.createResolver(t, s, a);\n      l = Vt(r, s, c);\n    }\n    for (const c of e)\n      o[c] = l[c];\n    return o;\n  }\n  createResolver(t, e, s = [\"\"], n) {\n    const { resolver: o } = Es(this._resolverCache, t, s);\n    return D(e) ? Vt(o, e, void 0, n) : o;\n  }\n}\nfunction Es(i, t, e) {\n  let s = i.get(t);\n  s || (s = /* @__PURE__ */ new Map(), i.set(t, s));\n  const n = e.join();\n  let o = s.get(n);\n  return o || (o = {\n    resolver: zi(t, e),\n    subPrefixes: e.filter((a) => !a.toLowerCase().includes(\"hover\"))\n  }, s.set(n, o)), o;\n}\nconst vl = (i) => D(i) && Object.getOwnPropertyNames(i).reduce((t, e) => t || yt(i[e]), !1);\nfunction Ml(i, t) {\n  const { isScriptable: e, isIndexable: s } = wn(i);\n  for (const n of t) {\n    const o = e(n), r = s(n), a = (r || o) && i[n];\n    if (o && (yt(a) || vl(a)) || r && z(a))\n      return !0;\n  }\n  return !1;\n}\nvar kl = \"3.9.1\";\nconst wl = [\"top\", \"bottom\", \"left\", \"right\", \"chartArea\"];\nfunction Fs(i, t) {\n  return i === \"top\" || i === \"bottom\" || wl.indexOf(i) === -1 && t === \"x\";\n}\nfunction Is(i, t) {\n  return function(e, s) {\n    return e[i] === s[i] ? e[t] - s[t] : e[i] - s[i];\n  };\n}\nfunction zs(i) {\n  const t = i.chart, e = t.options.animation;\n  t.notifyPlugins(\"afterRender\"), I(e && e.onComplete, [i], t);\n}\nfunction Sl(i) {\n  const t = i.chart, e = t.options.animation;\n  I(e && e.onProgress, [i], t);\n}\nfunction Qn(i) {\n  return An() && typeof i == \"string\" ? i = document.getElementById(i) : i && i.length && (i = i[0]), i && i.canvas && (i = i.canvas), i;\n}\nconst $e = {}, to = (i) => {\n  const t = Qn(i);\n  return Object.values($e).filter((e) => e.canvas === t).pop();\n};\nfunction Pl(i, t, e) {\n  const s = Object.keys(i);\n  for (const n of s) {\n    const o = +n;\n    if (o >= t) {\n      const r = i[n];\n      delete i[n], (e > 0 || o > t) && (i[o + e] = r);\n    }\n  }\n}\nfunction Cl(i, t, e, s) {\n  return !e || i.type === \"mouseout\" ? null : s ? t : i;\n}\nclass ji {\n  constructor(t, e) {\n    const s = this.config = new yl(e), n = Qn(t), o = to(n);\n    if (o)\n      throw new Error(\n        \"Canvas is already in use. Chart with ID '\" + o.id + \"' must be destroyed before the canvas with ID '\" + o.canvas.id + \"' can be reused.\"\n      );\n    const r = s.createResolver(s.chartOptionScopes(), this.getContext());\n    this.platform = new (s.platform || qn(n))(), this.platform.updateConfig(s);\n    const a = this.platform.acquireContext(n, r.aspectRatio), l = a && a.canvas, c = l && l.height, h = l && l.width;\n    if (this.id = _o(), this.ctx = a, this.canvas = l, this.width = h, this.height = c, this._options = r, this._aspectRatio = this.aspectRatio, this._layers = [], this._metasets = [], this._stacks = void 0, this.boxes = [], this.currentDevicePixelRatio = void 0, this.chartArea = void 0, this._active = [], this._lastEvent = void 0, this._listeners = {}, this._responsiveListeners = void 0, this._sortedMetasets = [], this.scales = {}, this._plugins = new hl(), this.$proxies = {}, this._hiddenIndices = {}, this.attached = !1, this._animationsDisabled = void 0, this.$context = void 0, this._doResize = Fo((d) => this.update(d), r.resizeDelay || 0), this._dataChanges = [], $e[this.id] = this, !a || !l) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    at.listen(this, \"complete\", zs), at.listen(this, \"progress\", Sl), this._initialize(), this.attached && this.update();\n  }\n  get aspectRatio() {\n    const { options: { aspectRatio: t, maintainAspectRatio: e }, width: s, height: n, _aspectRatio: o } = this;\n    return T(t) ? e && o ? o : n ? s / n : null : t;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(t) {\n    this.config.data = t;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(t) {\n    this.config.options = t;\n  }\n  _initialize() {\n    return this.notifyPlugins(\"beforeInit\"), this.options.responsive ? this.resize() : ls(this, this.options.devicePixelRatio), this.bindEvents(), this.notifyPlugins(\"afterInit\"), this;\n  }\n  clear() {\n    return os(this.canvas, this.ctx), this;\n  }\n  stop() {\n    return at.stop(this), this;\n  }\n  resize(t, e) {\n    at.running(this) ? this._resizeBeforeDraw = { width: t, height: e } : this._resize(t, e);\n  }\n  _resize(t, e) {\n    const s = this.options, n = this.canvas, o = s.maintainAspectRatio && this.aspectRatio, r = this.platform.getMaximumSize(n, t, e, o), a = s.devicePixelRatio || this.platform.getDevicePixelRatio(), l = this.width ? \"resize\" : \"attach\";\n    this.width = r.width, this.height = r.height, this._aspectRatio = this.aspectRatio, ls(this, a, !0) && (this.notifyPlugins(\"resize\", { size: r }), I(s.onResize, [this, r], this), this.attached && this._doResize(l) && this.render());\n  }\n  ensureScalesHaveIDs() {\n    const e = this.options.scales || {};\n    E(e, (s, n) => {\n      s.id = n;\n    });\n  }\n  buildOrUpdateScales() {\n    const t = this.options, e = t.scales, s = this.scales, n = Object.keys(s).reduce((r, a) => (r[a] = !1, r), {});\n    let o = [];\n    e && (o = o.concat(\n      Object.keys(e).map((r) => {\n        const a = e[r], l = ki(r, a), c = l === \"r\", h = l === \"x\";\n        return {\n          options: a,\n          dposition: c ? \"chartArea\" : h ? \"bottom\" : \"left\",\n          dtype: c ? \"radialLinear\" : h ? \"category\" : \"linear\"\n        };\n      })\n    )), E(o, (r) => {\n      const a = r.options, l = a.id, c = ki(l, a), h = C(a.type, r.dtype);\n      (a.position === void 0 || Fs(a.position, c) !== Fs(r.dposition)) && (a.position = r.dposition), n[l] = !0;\n      let d = null;\n      if (l in s && s[l].type === h)\n        d = s[l];\n      else {\n        const u = ot.getScale(h);\n        d = new u({\n          id: l,\n          type: h,\n          ctx: this.ctx,\n          chart: this\n        }), s[d.id] = d;\n      }\n      d.init(a, t);\n    }), E(n, (r, a) => {\n      r || delete s[a];\n    }), E(s, (r) => {\n      X.configure(this, r, r.options), X.addBox(this, r);\n    });\n  }\n  _updateMetasets() {\n    const t = this._metasets, e = this.data.datasets.length, s = t.length;\n    if (t.sort((n, o) => n.index - o.index), s > e) {\n      for (let n = e; n < s; ++n)\n        this._destroyDatasetMeta(n);\n      t.splice(e, s - e);\n    }\n    this._sortedMetasets = t.slice(0).sort(Is(\"order\", \"index\"));\n  }\n  _removeUnreferencedMetasets() {\n    const { _metasets: t, data: { datasets: e } } = this;\n    t.length > e.length && delete this._stacks, t.forEach((s, n) => {\n      e.filter((o) => o === s._dataset).length === 0 && this._destroyDatasetMeta(n);\n    });\n  }\n  buildOrUpdateControllers() {\n    const t = [], e = this.data.datasets;\n    let s, n;\n    for (this._removeUnreferencedMetasets(), s = 0, n = e.length; s < n; s++) {\n      const o = e[s];\n      let r = this.getDatasetMeta(s);\n      const a = o.type || this.config.type;\n      if (r.type && r.type !== a && (this._destroyDatasetMeta(s), r = this.getDatasetMeta(s)), r.type = a, r.indexAxis = o.indexAxis || Mi(a, this.options), r.order = o.order || 0, r.index = s, r.label = \"\" + o.label, r.visible = this.isDatasetVisible(s), r.controller)\n        r.controller.updateIndex(s), r.controller.linkScales();\n      else {\n        const l = ot.getController(a), { datasetElementType: c, dataElementType: h } = O.datasets[a];\n        Object.assign(l.prototype, {\n          dataElementType: ot.getElement(h),\n          datasetElementType: c && ot.getElement(c)\n        }), r.controller = new l(this, s), t.push(r.controller);\n      }\n    }\n    return this._updateMetasets(), t;\n  }\n  _resetElements() {\n    E(this.data.datasets, (t, e) => {\n      this.getDatasetMeta(e).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements(), this.notifyPlugins(\"reset\");\n  }\n  update(t) {\n    const e = this.config;\n    e.update();\n    const s = this._options = e.createResolver(e.chartOptionScopes(), this.getContext()), n = this._animationsDisabled = !s.animation;\n    if (this._updateScales(), this._checkEventBindings(), this._updateHiddenIndices(), this._plugins.invalidate(), this.notifyPlugins(\"beforeUpdate\", { mode: t, cancelable: !0 }) === !1)\n      return;\n    const o = this.buildOrUpdateControllers();\n    this.notifyPlugins(\"beforeElementsUpdate\");\n    let r = 0;\n    for (let c = 0, h = this.data.datasets.length; c < h; c++) {\n      const { controller: d } = this.getDatasetMeta(c), u = !n && o.indexOf(d) === -1;\n      d.buildOrUpdateElements(u), r = Math.max(+d.getMaxOverflow(), r);\n    }\n    r = this._minPadding = s.layout.autoPadding ? r : 0, this._updateLayout(r), n || E(o, (c) => {\n      c.reset();\n    }), this._updateDatasets(t), this.notifyPlugins(\"afterUpdate\", { mode: t }), this._layers.sort(Is(\"z\", \"_idx\"));\n    const { _active: a, _lastEvent: l } = this;\n    l ? this._eventHandler(l, !0) : a.length && this._updateHoverStyles(a, a, !0), this.render();\n  }\n  _updateScales() {\n    E(this.scales, (t) => {\n      X.removeBox(this, t);\n    }), this.ensureScalesHaveIDs(), this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const t = this.options, e = new Set(Object.keys(this._listeners)), s = new Set(t.events);\n    (!Ui(e, s) || !!this._responsiveListeners !== t.responsive) && (this.unbindEvents(), this.bindEvents());\n  }\n  _updateHiddenIndices() {\n    const { _hiddenIndices: t } = this, e = this._getUniformDataChanges() || [];\n    for (const { method: s, start: n, count: o } of e) {\n      const r = s === \"_removeElements\" ? -o : o;\n      Pl(t, n, r);\n    }\n  }\n  _getUniformDataChanges() {\n    const t = this._dataChanges;\n    if (!t || !t.length)\n      return;\n    this._dataChanges = [];\n    const e = this.data.datasets.length, s = (o) => new Set(\n      t.filter((r) => r[0] === o).map((r, a) => a + \",\" + r.splice(1).join(\",\"))\n    ), n = s(0);\n    for (let o = 1; o < e; o++)\n      if (!Ui(n, s(o)))\n        return;\n    return Array.from(n).map((o) => o.split(\",\")).map((o) => ({ method: o[1], start: +o[2], count: +o[3] }));\n  }\n  _updateLayout(t) {\n    if (this.notifyPlugins(\"beforeLayout\", { cancelable: !0 }) === !1)\n      return;\n    X.update(this, this.width, this.height, t);\n    const e = this.chartArea, s = e.width <= 0 || e.height <= 0;\n    this._layers = [], E(this.boxes, (n) => {\n      s && n.position === \"chartArea\" || (n.configure && n.configure(), this._layers.push(...n._layers()));\n    }, this), this._layers.forEach((n, o) => {\n      n._idx = o;\n    }), this.notifyPlugins(\"afterLayout\");\n  }\n  _updateDatasets(t) {\n    if (this.notifyPlugins(\"beforeDatasetsUpdate\", { mode: t, cancelable: !0 }) !== !1) {\n      for (let e = 0, s = this.data.datasets.length; e < s; ++e)\n        this.getDatasetMeta(e).controller.configure();\n      for (let e = 0, s = this.data.datasets.length; e < s; ++e)\n        this._updateDataset(e, yt(t) ? t({ datasetIndex: e }) : t);\n      this.notifyPlugins(\"afterDatasetsUpdate\", { mode: t });\n    }\n  }\n  _updateDataset(t, e) {\n    const s = this.getDatasetMeta(t), n = { meta: s, index: t, mode: e, cancelable: !0 };\n    this.notifyPlugins(\"beforeDatasetUpdate\", n) !== !1 && (s.controller._update(e), n.cancelable = !1, this.notifyPlugins(\"afterDatasetUpdate\", n));\n  }\n  render() {\n    this.notifyPlugins(\"beforeRender\", { cancelable: !0 }) !== !1 && (at.has(this) ? this.attached && !at.running(this) && at.start(this) : (this.draw(), zs({ chart: this })));\n  }\n  draw() {\n    let t;\n    if (this._resizeBeforeDraw) {\n      const { width: s, height: n } = this._resizeBeforeDraw;\n      this._resize(s, n), this._resizeBeforeDraw = null;\n    }\n    if (this.clear(), this.width <= 0 || this.height <= 0 || this.notifyPlugins(\"beforeDraw\", { cancelable: !0 }) === !1)\n      return;\n    const e = this._layers;\n    for (t = 0; t < e.length && e[t].z <= 0; ++t)\n      e[t].draw(this.chartArea);\n    for (this._drawDatasets(); t < e.length; ++t)\n      e[t].draw(this.chartArea);\n    this.notifyPlugins(\"afterDraw\");\n  }\n  _getSortedDatasetMetas(t) {\n    const e = this._sortedMetasets, s = [];\n    let n, o;\n    for (n = 0, o = e.length; n < o; ++n) {\n      const r = e[n];\n      (!t || r.visible) && s.push(r);\n    }\n    return s;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(!0);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins(\"beforeDatasetsDraw\", { cancelable: !0 }) === !1)\n      return;\n    const t = this.getSortedVisibleDatasetMetas();\n    for (let e = t.length - 1; e >= 0; --e)\n      this._drawDataset(t[e]);\n    this.notifyPlugins(\"afterDatasetsDraw\");\n  }\n  _drawDataset(t) {\n    const e = this.ctx, s = t._clip, n = !s.disabled, o = this.chartArea, r = {\n      meta: t,\n      index: t.index,\n      cancelable: !0\n    };\n    this.notifyPlugins(\"beforeDatasetDraw\", r) !== !1 && (n && Xe(e, {\n      left: s.left === !1 ? 0 : o.left - s.left,\n      right: s.right === !1 ? this.width : o.right + s.right,\n      top: s.top === !1 ? 0 : o.top - s.top,\n      bottom: s.bottom === !1 ? this.height : o.bottom + s.bottom\n    }), t.controller.draw(), n && Ue(e), r.cancelable = !1, this.notifyPlugins(\"afterDatasetDraw\", r));\n  }\n  isPointInArea(t) {\n    return re(t, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(t, e, s, n) {\n    const o = Hn.modes[e];\n    return typeof o == \"function\" ? o(this, t, s, n) : [];\n  }\n  getDatasetMeta(t) {\n    const e = this.data.datasets[t], s = this._metasets;\n    let n = s.filter((o) => o && o._dataset === e).pop();\n    return n || (n = {\n      type: null,\n      data: [],\n      dataset: null,\n      controller: null,\n      hidden: null,\n      xAxisID: null,\n      yAxisID: null,\n      order: e && e.order || 0,\n      index: t,\n      _dataset: e,\n      _parsed: [],\n      _sorted: !1\n    }, s.push(n)), n;\n  }\n  getContext() {\n    return this.$context || (this.$context = vt(null, { chart: this, type: \"chart\" }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(t) {\n    const e = this.data.datasets[t];\n    if (!e)\n      return !1;\n    const s = this.getDatasetMeta(t);\n    return typeof s.hidden == \"boolean\" ? !s.hidden : !e.hidden;\n  }\n  setDatasetVisibility(t, e) {\n    const s = this.getDatasetMeta(t);\n    s.hidden = !e;\n  }\n  toggleDataVisibility(t) {\n    this._hiddenIndices[t] = !this._hiddenIndices[t];\n  }\n  getDataVisibility(t) {\n    return !this._hiddenIndices[t];\n  }\n  _updateVisibility(t, e, s) {\n    const n = s ? \"show\" : \"hide\", o = this.getDatasetMeta(t), r = o.controller._resolveAnimations(void 0, n);\n    et(e) ? (o.data[e].hidden = !s, this.update()) : (this.setDatasetVisibility(t, s), r.update(o, { visible: s }), this.update((a) => a.datasetIndex === t ? n : void 0));\n  }\n  hide(t, e) {\n    this._updateVisibility(t, e, !1);\n  }\n  show(t, e) {\n    this._updateVisibility(t, e, !0);\n  }\n  _destroyDatasetMeta(t) {\n    const e = this._metasets[t];\n    e && e.controller && e.controller._destroy(), delete this._metasets[t];\n  }\n  _stop() {\n    let t, e;\n    for (this.stop(), at.remove(this), t = 0, e = this.data.datasets.length; t < e; ++t)\n      this._destroyDatasetMeta(t);\n  }\n  destroy() {\n    this.notifyPlugins(\"beforeDestroy\");\n    const { canvas: t, ctx: e } = this;\n    this._stop(), this.config.clearCache(), t && (this.unbindEvents(), os(t, e), this.platform.releaseContext(e), this.canvas = null, this.ctx = null), this.notifyPlugins(\"destroy\"), delete $e[this.id], this.notifyPlugins(\"afterDestroy\");\n  }\n  toBase64Image(...t) {\n    return this.canvas.toDataURL(...t);\n  }\n  bindEvents() {\n    this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : this.attached = !0;\n  }\n  bindUserEvents() {\n    const t = this._listeners, e = this.platform, s = (o, r) => {\n      e.addEventListener(this, o, r), t[o] = r;\n    }, n = (o, r, a) => {\n      o.offsetX = r, o.offsetY = a, this._eventHandler(o);\n    };\n    E(this.options.events, (o) => s(o, n));\n  }\n  bindResponsiveEvents() {\n    this._responsiveListeners || (this._responsiveListeners = {});\n    const t = this._responsiveListeners, e = this.platform, s = (l, c) => {\n      e.addEventListener(this, l, c), t[l] = c;\n    }, n = (l, c) => {\n      t[l] && (e.removeEventListener(this, l, c), delete t[l]);\n    }, o = (l, c) => {\n      this.canvas && this.resize(l, c);\n    };\n    let r;\n    const a = () => {\n      n(\"attach\", a), this.attached = !0, this.resize(), s(\"resize\", o), s(\"detach\", r);\n    };\n    r = () => {\n      this.attached = !1, n(\"resize\", o), this._stop(), this._resize(0, 0), s(\"attach\", a);\n    }, e.isAttached(this.canvas) ? a() : r();\n  }\n  unbindEvents() {\n    E(this._listeners, (t, e) => {\n      this.platform.removeEventListener(this, e, t);\n    }), this._listeners = {}, E(this._responsiveListeners, (t, e) => {\n      this.platform.removeEventListener(this, e, t);\n    }), this._responsiveListeners = void 0;\n  }\n  updateHoverStyle(t, e, s) {\n    const n = s ? \"set\" : \"remove\";\n    let o, r, a, l;\n    for (e === \"dataset\" && (o = this.getDatasetMeta(t[0].datasetIndex), o.controller[\"_\" + n + \"DatasetHoverStyle\"]()), a = 0, l = t.length; a < l; ++a) {\n      r = t[a];\n      const c = r && this.getDatasetMeta(r.datasetIndex).controller;\n      c && c[n + \"HoverStyle\"](r.element, r.datasetIndex, r.index);\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(t) {\n    const e = this._active || [], s = t.map(({ datasetIndex: o, index: r }) => {\n      const a = this.getDatasetMeta(o);\n      if (!a)\n        throw new Error(\"No dataset found at index \" + o);\n      return {\n        datasetIndex: o,\n        element: a.data[r],\n        index: r\n      };\n    });\n    !ze(s, e) && (this._active = s, this._lastEvent = null, this._updateHoverStyles(s, e));\n  }\n  notifyPlugins(t, e, s) {\n    return this._plugins.notify(this, t, e, s);\n  }\n  _updateHoverStyles(t, e, s) {\n    const n = this.options.hover, o = (l, c) => l.filter((h) => !c.some((d) => h.datasetIndex === d.datasetIndex && h.index === d.index)), r = o(e, t), a = s ? t : o(t, e);\n    r.length && this.updateHoverStyle(r, n.mode, !1), a.length && n.mode && this.updateHoverStyle(a, n.mode, !0);\n  }\n  _eventHandler(t, e) {\n    const s = {\n      event: t,\n      replay: e,\n      cancelable: !0,\n      inChartArea: this.isPointInArea(t)\n    }, n = (r) => (r.options.events || this.options.events).includes(t.native.type);\n    if (this.notifyPlugins(\"beforeEvent\", s, n) === !1)\n      return;\n    const o = this._handleEvent(t, e, s.inChartArea);\n    return s.cancelable = !1, this.notifyPlugins(\"afterEvent\", s, n), (o || s.changed) && this.render(), this;\n  }\n  _handleEvent(t, e, s) {\n    const { _active: n = [], options: o } = this, r = e, a = this._getActiveElements(t, n, s, r), l = So(t), c = Cl(t, this._lastEvent, s, l);\n    s && (this._lastEvent = null, I(o.onHover, [t, a, this], this), l && I(o.onClick, [t, a, this], this));\n    const h = !ze(a, n);\n    return (h || e) && (this._active = a, this._updateHoverStyles(a, n, e)), this._lastEvent = c, h;\n  }\n  _getActiveElements(t, e, s, n) {\n    if (t.type === \"mouseout\")\n      return [];\n    if (!s)\n      return e;\n    const o = this.options.hover;\n    return this.getElementsAtEventForMode(t, o.mode, o, n);\n  }\n}\nconst Bs = () => E(ji.instances, (i) => i._plugins.invalidate()), pt = !0;\nObject.defineProperties(ji, {\n  defaults: {\n    enumerable: pt,\n    value: O\n  },\n  instances: {\n    enumerable: pt,\n    value: $e\n  },\n  overrides: {\n    enumerable: pt,\n    value: At\n  },\n  registry: {\n    enumerable: pt,\n    value: ot\n  },\n  version: {\n    enumerable: pt,\n    value: kl\n  },\n  getChart: {\n    enumerable: pt,\n    value: to\n  },\n  register: {\n    enumerable: pt,\n    value: (...i) => {\n      ot.add(...i), Bs();\n    }\n  },\n  unregister: {\n    enumerable: pt,\n    value: (...i) => {\n      ot.remove(...i), Bs();\n    }\n  }\n});\nfunction eo(i, t, e) {\n  const { startAngle: s, pixelMargin: n, x: o, y: r, outerRadius: a, innerRadius: l } = t;\n  let c = n / a;\n  i.beginPath(), i.arc(o, r, a, s - c, e + c), l > n ? (c = n / l, i.arc(o, r, l, e + c, s - c, !0)) : i.arc(o, r, n, e + V, s - V), i.closePath(), i.clip();\n}\nfunction Dl(i) {\n  return Ii(i, [\"outerStart\", \"outerEnd\", \"innerStart\", \"innerEnd\"]);\n}\nfunction Ol(i, t, e, s) {\n  const n = Dl(i.options.borderRadius), o = (e - t) / 2, r = Math.min(o, s * t / 2), a = (l) => {\n    const c = (e - Math.min(o, l)) * s / 2;\n    return Y(l, 0, Math.min(o, c));\n  };\n  return {\n    outerStart: a(n.outerStart),\n    outerEnd: a(n.outerEnd),\n    innerStart: Y(n.innerStart, 0, r),\n    innerEnd: Y(n.innerEnd, 0, r)\n  };\n}\nfunction It(i, t, e, s) {\n  return {\n    x: e + i * Math.cos(t),\n    y: s + i * Math.sin(t)\n  };\n}\nfunction wi(i, t, e, s, n, o) {\n  const { x: r, y: a, startAngle: l, pixelMargin: c, innerRadius: h } = t, d = Math.max(t.outerRadius + s + e - c, 0), u = h > 0 ? h + s + e + c : 0;\n  let f = 0;\n  const g = n - l;\n  if (s) {\n    const P = h > 0 ? h - s : 0, j = d > 0 ? d - s : 0, W = (P + j) / 2, kt = W !== 0 ? g * W / (W + s) : g;\n    f = (g - kt) / 2;\n  }\n  const p = Math.max(1e-3, g * d - e / B) / d, m = (g - p) / 2, b = l + m + f, x = n - m - f, { outerStart: v, outerEnd: y, innerStart: _, innerEnd: M } = Ol(t, u, d, x - b), k = d - v, S = d - y, w = b + v / k, L = x - y / S, R = u + _, A = u + M, H = b + _ / R, q = x - M / A;\n  if (i.beginPath(), o) {\n    if (i.arc(r, a, d, w, L), y > 0) {\n      const W = It(S, L, r, a);\n      i.arc(W.x, W.y, y, L, x + V);\n    }\n    const P = It(A, x, r, a);\n    if (i.lineTo(P.x, P.y), M > 0) {\n      const W = It(A, q, r, a);\n      i.arc(W.x, W.y, M, x + V, q + Math.PI);\n    }\n    if (i.arc(r, a, u, x - M / u, b + _ / u, !0), _ > 0) {\n      const W = It(R, H, r, a);\n      i.arc(W.x, W.y, _, H + Math.PI, b - V);\n    }\n    const j = It(k, b, r, a);\n    if (i.lineTo(j.x, j.y), v > 0) {\n      const W = It(k, w, r, a);\n      i.arc(W.x, W.y, v, b - V, w);\n    }\n  } else {\n    i.moveTo(r, a);\n    const P = Math.cos(w) * d + r, j = Math.sin(w) * d + a;\n    i.lineTo(P, j);\n    const W = Math.cos(L) * d + r, kt = Math.sin(L) * d + a;\n    i.lineTo(W, kt);\n  }\n  i.closePath();\n}\nfunction Al(i, t, e, s, n) {\n  const { fullCircles: o, startAngle: r, circumference: a } = t;\n  let l = t.endAngle;\n  if (o) {\n    wi(i, t, e, s, r + F, n);\n    for (let c = 0; c < o; ++c)\n      i.fill();\n    isNaN(a) || (l = r + a % F, a % F === 0 && (l += F));\n  }\n  return wi(i, t, e, s, l, n), i.fill(), l;\n}\nfunction Tl(i, t, e) {\n  const { x: s, y: n, startAngle: o, pixelMargin: r, fullCircles: a } = t, l = Math.max(t.outerRadius - r, 0), c = t.innerRadius + r;\n  let h;\n  for (e && eo(i, t, o + F), i.beginPath(), i.arc(s, n, c, o + F, o, !0), h = 0; h < a; ++h)\n    i.stroke();\n  for (i.beginPath(), i.arc(s, n, l, o, o + F), h = 0; h < a; ++h)\n    i.stroke();\n}\nfunction Ll(i, t, e, s, n, o) {\n  const { options: r } = t, { borderWidth: a, borderJoinStyle: l } = r, c = r.borderAlign === \"inner\";\n  a && (c ? (i.lineWidth = a * 2, i.lineJoin = l || \"round\") : (i.lineWidth = a, i.lineJoin = l || \"bevel\"), t.fullCircles && Tl(i, t, c), c && eo(i, t, n), wi(i, t, e, s, n, o), i.stroke());\n}\nclass ye extends st {\n  constructor(t) {\n    super(), this.options = void 0, this.circumference = void 0, this.startAngle = void 0, this.endAngle = void 0, this.innerRadius = void 0, this.outerRadius = void 0, this.pixelMargin = 0, this.fullCircles = 0, t && Object.assign(this, t);\n  }\n  inRange(t, e, s) {\n    const n = this.getProps([\"x\", \"y\"], s), { angle: o, distance: r } = hn(n, { x: t, y: e }), { startAngle: a, endAngle: l, innerRadius: c, outerRadius: h, circumference: d } = this.getProps([\n      \"startAngle\",\n      \"endAngle\",\n      \"innerRadius\",\n      \"outerRadius\",\n      \"circumference\"\n    ], s), u = this.options.spacing / 2, g = C(d, l - a) >= F || oe(o, a, l), p = ut(r, c + u, h + u);\n    return g && p;\n  }\n  getCenterPoint(t) {\n    const { x: e, y: s, startAngle: n, endAngle: o, innerRadius: r, outerRadius: a } = this.getProps([\n      \"x\",\n      \"y\",\n      \"startAngle\",\n      \"endAngle\",\n      \"innerRadius\",\n      \"outerRadius\",\n      \"circumference\"\n    ], t), { offset: l, spacing: c } = this.options, h = (n + o) / 2, d = (r + a + c + l) / 2;\n    return {\n      x: e + Math.cos(h) * d,\n      y: s + Math.sin(h) * d\n    };\n  }\n  tooltipPosition(t) {\n    return this.getCenterPoint(t);\n  }\n  draw(t) {\n    const { options: e, circumference: s } = this, n = (e.offset || 0) / 2, o = (e.spacing || 0) / 2, r = e.circular;\n    if (this.pixelMargin = e.borderAlign === \"inner\" ? 0.33 : 0, this.fullCircles = s > F ? Math.floor(s / F) : 0, s === 0 || this.innerRadius < 0 || this.outerRadius < 0)\n      return;\n    t.save();\n    let a = 0;\n    if (n) {\n      a = n / 2;\n      const c = (this.startAngle + this.endAngle) / 2;\n      t.translate(Math.cos(c) * a, Math.sin(c) * a), this.circumference >= B && (a = n);\n    }\n    t.fillStyle = e.backgroundColor, t.strokeStyle = e.borderColor;\n    const l = Al(t, this, a, o, r);\n    Ll(t, this, a, o, l, r), t.restore();\n  }\n}\nye.id = \"arc\";\nye.defaults = {\n  borderAlign: \"center\",\n  borderColor: \"#fff\",\n  borderJoinStyle: void 0,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: void 0,\n  circular: !0\n};\nye.defaultRoutes = {\n  backgroundColor: \"backgroundColor\"\n};\nfunction io(i, t, e = t) {\n  i.lineCap = C(e.borderCapStyle, t.borderCapStyle), i.setLineDash(C(e.borderDash, t.borderDash)), i.lineDashOffset = C(e.borderDashOffset, t.borderDashOffset), i.lineJoin = C(e.borderJoinStyle, t.borderJoinStyle), i.lineWidth = C(e.borderWidth, t.borderWidth), i.strokeStyle = C(e.borderColor, t.borderColor);\n}\nfunction Rl(i, t, e) {\n  i.lineTo(e.x, e.y);\n}\nfunction El(i) {\n  return i.stepped ? lr : i.tension || i.cubicInterpolationMode === \"monotone\" ? cr : Rl;\n}\nfunction so(i, t, e = {}) {\n  const s = i.length, { start: n = 0, end: o = s - 1 } = e, { start: r, end: a } = t, l = Math.max(n, r), c = Math.min(o, a), h = n < r && o < r || n > a && o > a;\n  return {\n    count: s,\n    start: l,\n    loop: t.loop,\n    ilen: c < l && !h ? s + c - l : c - l\n  };\n}\nfunction Fl(i, t, e, s) {\n  const { points: n, options: o } = t, { count: r, start: a, loop: l, ilen: c } = so(n, e, s), h = El(o);\n  let { move: d = !0, reverse: u } = s || {}, f, g, p;\n  for (f = 0; f <= c; ++f)\n    g = n[(a + (u ? c - f : f)) % r], !g.skip && (d ? (i.moveTo(g.x, g.y), d = !1) : h(i, p, g, u, o.stepped), p = g);\n  return l && (g = n[(a + (u ? c : 0)) % r], h(i, p, g, u, o.stepped)), !!l;\n}\nfunction Il(i, t, e, s) {\n  const n = t.points, { count: o, start: r, ilen: a } = so(n, e, s), { move: l = !0, reverse: c } = s || {};\n  let h = 0, d = 0, u, f, g, p, m, b;\n  const x = (y) => (r + (c ? a - y : y)) % o, v = () => {\n    p !== m && (i.lineTo(h, m), i.lineTo(h, p), i.lineTo(h, b));\n  };\n  for (l && (f = n[x(0)], i.moveTo(f.x, f.y)), u = 0; u <= a; ++u) {\n    if (f = n[x(u)], f.skip)\n      continue;\n    const y = f.x, _ = f.y, M = y | 0;\n    M === g ? (_ < p ? p = _ : _ > m && (m = _), h = (d * h + y) / ++d) : (v(), i.lineTo(y, _), g = M, d = 0, p = m = _), b = _;\n  }\n  v();\n}\nfunction Si(i) {\n  const t = i.options, e = t.borderDash && t.borderDash.length;\n  return !i._decimated && !i._loop && !t.tension && t.cubicInterpolationMode !== \"monotone\" && !t.stepped && !e ? Il : Fl;\n}\nfunction zl(i) {\n  return i.stepped ? Wr : i.tension || i.cubicInterpolationMode === \"monotone\" ? Nr : Ct;\n}\nfunction Bl(i, t, e, s) {\n  let n = t._path;\n  n || (n = t._path = new Path2D(), t.path(n, e, s) && n.closePath()), io(i, t.options), i.stroke(n);\n}\nfunction Vl(i, t, e, s) {\n  const { segments: n, options: o } = t, r = Si(t);\n  for (const a of n)\n    io(i, o, a.style), i.beginPath(), r(i, t, a, { start: e, end: e + s - 1 }) && i.closePath(), i.stroke();\n}\nconst Wl = typeof Path2D == \"function\";\nfunction Nl(i, t, e, s) {\n  Wl && !t.options.segment ? Bl(i, t, e, s) : Vl(i, t, e, s);\n}\nclass gt extends st {\n  constructor(t) {\n    super(), this.animated = !0, this.options = void 0, this._chart = void 0, this._loop = void 0, this._fullLoop = void 0, this._path = void 0, this._points = void 0, this._segments = void 0, this._decimated = !1, this._pointsUpdated = !1, this._datasetIndex = void 0, t && Object.assign(this, t);\n  }\n  updateControlPoints(t, e) {\n    const s = this.options;\n    if ((s.tension || s.cubicInterpolationMode === \"monotone\") && !s.stepped && !this._pointsUpdated) {\n      const n = s.spanGaps ? this._loop : this._fullLoop;\n      Lr(this._points, s, t, n, e), this._pointsUpdated = !0;\n    }\n  }\n  set points(t) {\n    this._points = t, delete this._segments, delete this._path, this._pointsUpdated = !1;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = Kr(this, this.options.segment));\n  }\n  first() {\n    const t = this.segments, e = this.points;\n    return t.length && e[t[0].start];\n  }\n  last() {\n    const t = this.segments, e = this.points, s = t.length;\n    return s && e[t[s - 1].end];\n  }\n  interpolate(t, e) {\n    const s = this.options, n = t[e], o = this.points, r = Fn(this, { property: e, start: n, end: n });\n    if (!r.length)\n      return;\n    const a = [], l = zl(s);\n    let c, h;\n    for (c = 0, h = r.length; c < h; ++c) {\n      const { start: d, end: u } = r[c], f = o[d], g = o[u];\n      if (f === g) {\n        a.push(f);\n        continue;\n      }\n      const p = Math.abs((n - f[e]) / (g[e] - f[e])), m = l(f, g, p, s.stepped);\n      m[e] = t[e], a.push(m);\n    }\n    return a.length === 1 ? a[0] : a;\n  }\n  pathSegment(t, e, s) {\n    return Si(this)(t, this, e, s);\n  }\n  path(t, e, s) {\n    const n = this.segments, o = Si(this);\n    let r = this._loop;\n    e = e || 0, s = s || this.points.length - e;\n    for (const a of n)\n      r &= o(t, this, a, { start: e, end: e + s - 1 });\n    return !!r;\n  }\n  draw(t, e, s, n) {\n    const o = this.options || {};\n    (this.points || []).length && o.borderWidth && (t.save(), Nl(t, this, s, n), t.restore()), this.animated && (this._pointsUpdated = !1, this._path = void 0);\n  }\n}\ngt.id = \"line\";\ngt.defaults = {\n  borderCapStyle: \"butt\",\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: \"miter\",\n  borderWidth: 3,\n  capBezierPoints: !0,\n  cubicInterpolationMode: \"default\",\n  fill: !1,\n  spanGaps: !1,\n  stepped: !1,\n  tension: 0\n};\ngt.defaultRoutes = {\n  backgroundColor: \"backgroundColor\",\n  borderColor: \"borderColor\"\n};\ngt.descriptors = {\n  _scriptable: !0,\n  _indexable: (i) => i !== \"borderDash\" && i !== \"fill\"\n};\nfunction Vs(i, t, e, s) {\n  const n = i.options, { [e]: o } = i.getProps([e], s);\n  return Math.abs(t - o) < n.radius + n.hitRadius;\n}\nclass ve extends st {\n  constructor(t) {\n    super(), this.options = void 0, this.parsed = void 0, this.skip = void 0, this.stop = void 0, t && Object.assign(this, t);\n  }\n  inRange(t, e, s) {\n    const n = this.options, { x: o, y: r } = this.getProps([\"x\", \"y\"], s);\n    return Math.pow(t - o, 2) + Math.pow(e - r, 2) < Math.pow(n.hitRadius + n.radius, 2);\n  }\n  inXRange(t, e) {\n    return Vs(this, t, \"x\", e);\n  }\n  inYRange(t, e) {\n    return Vs(this, t, \"y\", e);\n  }\n  getCenterPoint(t) {\n    const { x: e, y: s } = this.getProps([\"x\", \"y\"], t);\n    return { x: e, y: s };\n  }\n  size(t) {\n    t = t || this.options || {};\n    let e = t.radius || 0;\n    e = Math.max(e, e && t.hoverRadius || 0);\n    const s = e && t.borderWidth || 0;\n    return (e + s) * 2;\n  }\n  draw(t, e) {\n    const s = this.options;\n    this.skip || s.radius < 0.1 || !re(this, e, this.size(s) / 2) || (t.strokeStyle = s.borderColor, t.lineWidth = s.borderWidth, t.fillStyle = s.backgroundColor, yi(t, s, this.x, this.y));\n  }\n  getRange() {\n    const t = this.options || {};\n    return t.radius + t.hitRadius;\n  }\n}\nve.id = \"point\";\nve.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: \"circle\",\n  radius: 3,\n  rotation: 0\n};\nve.defaultRoutes = {\n  backgroundColor: \"backgroundColor\",\n  borderColor: \"borderColor\"\n};\nfunction no(i, t) {\n  const { x: e, y: s, base: n, width: o, height: r } = i.getProps([\"x\", \"y\", \"base\", \"width\", \"height\"], t);\n  let a, l, c, h, d;\n  return i.horizontal ? (d = r / 2, a = Math.min(e, n), l = Math.max(e, n), c = s - d, h = s + d) : (d = o / 2, a = e - d, l = e + d, c = Math.min(s, n), h = Math.max(s, n)), { left: a, top: c, right: l, bottom: h };\n}\nfunction bt(i, t, e, s) {\n  return i ? 0 : Y(t, e, s);\n}\nfunction Hl(i, t, e) {\n  const s = i.options.borderWidth, n = i.borderSkipped, o = kn(s);\n  return {\n    t: bt(n.top, o.top, 0, e),\n    r: bt(n.right, o.right, 0, t),\n    b: bt(n.bottom, o.bottom, 0, e),\n    l: bt(n.left, o.left, 0, t)\n  };\n}\nfunction jl(i, t, e) {\n  const { enableBorderRadius: s } = i.getProps([\"enableBorderRadius\"]), n = i.options.borderRadius, o = Dt(n), r = Math.min(t, e), a = i.borderSkipped, l = s || D(n);\n  return {\n    topLeft: bt(!l || a.top || a.left, o.topLeft, 0, r),\n    topRight: bt(!l || a.top || a.right, o.topRight, 0, r),\n    bottomLeft: bt(!l || a.bottom || a.left, o.bottomLeft, 0, r),\n    bottomRight: bt(!l || a.bottom || a.right, o.bottomRight, 0, r)\n  };\n}\nfunction $l(i) {\n  const t = no(i), e = t.right - t.left, s = t.bottom - t.top, n = Hl(i, e / 2, s / 2), o = jl(i, e / 2, s / 2);\n  return {\n    outer: {\n      x: t.left,\n      y: t.top,\n      w: e,\n      h: s,\n      radius: o\n    },\n    inner: {\n      x: t.left + n.l,\n      y: t.top + n.t,\n      w: e - n.l - n.r,\n      h: s - n.t - n.b,\n      radius: {\n        topLeft: Math.max(0, o.topLeft - Math.max(n.t, n.l)),\n        topRight: Math.max(0, o.topRight - Math.max(n.t, n.r)),\n        bottomLeft: Math.max(0, o.bottomLeft - Math.max(n.b, n.l)),\n        bottomRight: Math.max(0, o.bottomRight - Math.max(n.b, n.r))\n      }\n    }\n  };\n}\nfunction gi(i, t, e, s) {\n  const n = t === null, o = e === null, a = i && !(n && o) && no(i, s);\n  return a && (n || ut(t, a.left, a.right)) && (o || ut(e, a.top, a.bottom));\n}\nfunction Yl(i) {\n  return i.topLeft || i.topRight || i.bottomLeft || i.bottomRight;\n}\nfunction Xl(i, t) {\n  i.rect(t.x, t.y, t.w, t.h);\n}\nfunction pi(i, t, e = {}) {\n  const s = i.x !== e.x ? -t : 0, n = i.y !== e.y ? -t : 0, o = (i.x + i.w !== e.x + e.w ? t : 0) - s, r = (i.y + i.h !== e.y + e.h ? t : 0) - n;\n  return {\n    x: i.x + s,\n    y: i.y + n,\n    w: i.w + o,\n    h: i.h + r,\n    radius: i.radius\n  };\n}\nclass Me extends st {\n  constructor(t) {\n    super(), this.options = void 0, this.horizontal = void 0, this.base = void 0, this.width = void 0, this.height = void 0, this.inflateAmount = void 0, t && Object.assign(this, t);\n  }\n  draw(t) {\n    const { inflateAmount: e, options: { borderColor: s, backgroundColor: n } } = this, { inner: o, outer: r } = $l(this), a = Yl(r.radius) ? ae : Xl;\n    t.save(), (r.w !== o.w || r.h !== o.h) && (t.beginPath(), a(t, pi(r, e, o)), t.clip(), a(t, pi(o, -e, r)), t.fillStyle = s, t.fill(\"evenodd\")), t.beginPath(), a(t, pi(o, e)), t.fillStyle = n, t.fill(), t.restore();\n  }\n  inRange(t, e, s) {\n    return gi(this, t, e, s);\n  }\n  inXRange(t, e) {\n    return gi(this, t, null, e);\n  }\n  inYRange(t, e) {\n    return gi(this, null, t, e);\n  }\n  getCenterPoint(t) {\n    const { x: e, y: s, base: n, horizontal: o } = this.getProps([\"x\", \"y\", \"base\", \"horizontal\"], t);\n    return {\n      x: o ? (e + n) / 2 : e,\n      y: o ? s : (s + n) / 2\n    };\n  }\n  getRange(t) {\n    return t === \"x\" ? this.width / 2 : this.height / 2;\n  }\n}\nMe.id = \"bar\";\nMe.defaults = {\n  borderSkipped: \"start\",\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: \"auto\",\n  pointStyle: void 0\n};\nMe.defaultRoutes = {\n  backgroundColor: \"backgroundColor\",\n  borderColor: \"borderColor\"\n};\nvar oo = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  ArcElement: ye,\n  LineElement: gt,\n  PointElement: ve,\n  BarElement: Me\n});\nfunction Ul(i, t, e, s, n) {\n  const o = n.samples || s;\n  if (o >= e)\n    return i.slice(t, t + e);\n  const r = [], a = (e - 2) / (o - 2);\n  let l = 0;\n  const c = t + e - 1;\n  let h = t, d, u, f, g, p;\n  for (r[l++] = i[h], d = 0; d < o - 2; d++) {\n    let m = 0, b = 0, x;\n    const v = Math.floor((d + 1) * a) + 1 + t, y = Math.min(Math.floor((d + 2) * a) + 1, e) + t, _ = y - v;\n    for (x = v; x < y; x++)\n      m += i[x].x, b += i[x].y;\n    m /= _, b /= _;\n    const M = Math.floor(d * a) + 1 + t, k = Math.min(Math.floor((d + 1) * a) + 1, e) + t, { x: S, y: w } = i[h];\n    for (f = g = -1, x = M; x < k; x++)\n      g = 0.5 * Math.abs(\n        (S - m) * (i[x].y - w) - (S - i[x].x) * (b - w)\n      ), g > f && (f = g, u = i[x], p = x);\n    r[l++] = u, h = p;\n  }\n  return r[l++] = i[c], r;\n}\nfunction Kl(i, t, e, s) {\n  let n = 0, o = 0, r, a, l, c, h, d, u, f, g, p;\n  const m = [], b = t + e - 1, x = i[t].x, y = i[b].x - x;\n  for (r = t; r < t + e; ++r) {\n    a = i[r], l = (a.x - x) / y * s, c = a.y;\n    const _ = l | 0;\n    if (_ === h)\n      c < g ? (g = c, d = r) : c > p && (p = c, u = r), n = (o * n + a.x) / ++o;\n    else {\n      const M = r - 1;\n      if (!T(d) && !T(u)) {\n        const k = Math.min(d, u), S = Math.max(d, u);\n        k !== f && k !== M && m.push({\n          ...i[k],\n          x: n\n        }), S !== f && S !== M && m.push({\n          ...i[S],\n          x: n\n        });\n      }\n      r > 0 && M !== f && m.push(i[M]), m.push(a), h = _, o = 0, g = p = c, d = u = f = r;\n    }\n  }\n  return m;\n}\nfunction ro(i) {\n  if (i._decimated) {\n    const t = i._data;\n    delete i._decimated, delete i._data, Object.defineProperty(i, \"data\", { value: t });\n  }\n}\nfunction Ws(i) {\n  i.data.datasets.forEach((t) => {\n    ro(t);\n  });\n}\nfunction ql(i, t) {\n  const e = t.length;\n  let s = 0, n;\n  const { iScale: o } = i, { min: r, max: a, minDefined: l, maxDefined: c } = o.getUserBounds();\n  return l && (s = Y(ft(t, o.axis, r).lo, 0, e - 1)), c ? n = Y(ft(t, o.axis, a).hi + 1, s, e) - s : n = e - s, { start: s, count: n };\n}\nvar ao = {\n  id: \"decimation\",\n  defaults: {\n    algorithm: \"min-max\",\n    enabled: !1\n  },\n  beforeElementsUpdate: (i, t, e) => {\n    if (!e.enabled) {\n      Ws(i);\n      return;\n    }\n    const s = i.width;\n    i.data.datasets.forEach((n, o) => {\n      const { _data: r, indexAxis: a } = n, l = i.getDatasetMeta(o), c = r || n.data;\n      if (Zt([a, i.options.indexAxis]) === \"y\" || !l.controller.supportsDecimation)\n        return;\n      const h = i.scales[l.xAxisID];\n      if (h.type !== \"linear\" && h.type !== \"time\" || i.options.parsing)\n        return;\n      let { start: d, count: u } = ql(l, c);\n      const f = e.threshold || 4 * s;\n      if (u <= f) {\n        ro(n);\n        return;\n      }\n      T(r) && (n._data = c, delete n.data, Object.defineProperty(n, \"data\", {\n        configurable: !0,\n        enumerable: !0,\n        get: function() {\n          return this._decimated;\n        },\n        set: function(p) {\n          this._data = p;\n        }\n      }));\n      let g;\n      switch (e.algorithm) {\n        case \"lttb\":\n          g = Ul(c, d, u, s, e);\n          break;\n        case \"min-max\":\n          g = Kl(c, d, u, s);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${e.algorithm}'`);\n      }\n      n._decimated = g;\n    });\n  },\n  destroy(i) {\n    Ws(i);\n  }\n};\nfunction Gl(i, t, e) {\n  const s = i.segments, n = i.points, o = t.points, r = [];\n  for (const a of s) {\n    let { start: l, end: c } = a;\n    c = $i(l, c, n);\n    const h = Pi(e, n[l], n[c], a.loop);\n    if (!t.segments) {\n      r.push({\n        source: a,\n        target: h,\n        start: n[l],\n        end: n[c]\n      });\n      continue;\n    }\n    const d = Fn(t, h);\n    for (const u of d) {\n      const f = Pi(e, o[u.start], o[u.end], u.loop), g = En(a, n, f);\n      for (const p of g)\n        r.push({\n          source: p,\n          target: u,\n          start: {\n            [e]: Ns(h, f, \"start\", Math.max)\n          },\n          end: {\n            [e]: Ns(h, f, \"end\", Math.min)\n          }\n        });\n    }\n  }\n  return r;\n}\nfunction Pi(i, t, e, s) {\n  if (s)\n    return;\n  let n = t[i], o = e[i];\n  return i === \"angle\" && (n = Z(n), o = Z(o)), { property: i, start: n, end: o };\n}\nfunction Zl(i, t) {\n  const { x: e = null, y: s = null } = i || {}, n = t.points, o = [];\n  return t.segments.forEach(({ start: r, end: a }) => {\n    a = $i(r, a, n);\n    const l = n[r], c = n[a];\n    s !== null ? (o.push({ x: l.x, y: s }), o.push({ x: c.x, y: s })) : e !== null && (o.push({ x: e, y: l.y }), o.push({ x: e, y: c.y }));\n  }), o;\n}\nfunction $i(i, t, e) {\n  for (; t > i; t--) {\n    const s = e[t];\n    if (!isNaN(s.x) && !isNaN(s.y))\n      break;\n  }\n  return t;\n}\nfunction Ns(i, t, e, s) {\n  return i && t ? s(i[e], t[e]) : i ? i[e] : t ? t[e] : 0;\n}\nfunction lo(i, t) {\n  let e = [], s = !1;\n  return z(i) ? (s = !0, e = i) : e = Zl(i, t), e.length ? new gt({\n    points: e,\n    options: { tension: 0 },\n    _loop: s,\n    _fullLoop: s\n  }) : null;\n}\nfunction Hs(i) {\n  return i && i.fill !== !1;\n}\nfunction Jl(i, t, e) {\n  let n = i[t].fill;\n  const o = [t];\n  let r;\n  if (!e)\n    return n;\n  for (; n !== !1 && o.indexOf(n) === -1; ) {\n    if (!N(n))\n      return n;\n    if (r = i[n], !r)\n      return !1;\n    if (r.visible)\n      return n;\n    o.push(n), n = r.fill;\n  }\n  return !1;\n}\nfunction Ql(i, t, e) {\n  const s = sc(i);\n  if (D(s))\n    return isNaN(s.value) ? !1 : s;\n  let n = parseFloat(s);\n  return N(n) && Math.floor(n) === n ? tc(s[0], t, n, e) : [\"origin\", \"start\", \"end\", \"stack\", \"shape\"].indexOf(s) >= 0 && s;\n}\nfunction tc(i, t, e, s) {\n  return (i === \"-\" || i === \"+\") && (e = t + e), e === t || e < 0 || e >= s ? !1 : e;\n}\nfunction ec(i, t) {\n  let e = null;\n  return i === \"start\" ? e = t.bottom : i === \"end\" ? e = t.top : D(i) ? e = t.getPixelForValue(i.value) : t.getBasePixel && (e = t.getBasePixel()), e;\n}\nfunction ic(i, t, e) {\n  let s;\n  return i === \"start\" ? s = e : i === \"end\" ? s = t.options.reverse ? t.min : t.max : D(i) ? s = i.value : s = t.getBaseValue(), s;\n}\nfunction sc(i) {\n  const t = i.options, e = t.fill;\n  let s = C(e && e.target, e);\n  return s === void 0 && (s = !!t.backgroundColor), s === !1 || s === null ? !1 : s === !0 ? \"origin\" : s;\n}\nfunction nc(i) {\n  const { scale: t, index: e, line: s } = i, n = [], o = s.segments, r = s.points, a = oc(t, e);\n  a.push(lo({ x: null, y: t.bottom }, s));\n  for (let l = 0; l < o.length; l++) {\n    const c = o[l];\n    for (let h = c.start; h <= c.end; h++)\n      rc(n, r[h], a);\n  }\n  return new gt({ points: n, options: {} });\n}\nfunction oc(i, t) {\n  const e = [], s = i.getMatchingVisibleMetas(\"line\");\n  for (let n = 0; n < s.length; n++) {\n    const o = s[n];\n    if (o.index === t)\n      break;\n    o.hidden || e.unshift(o.dataset);\n  }\n  return e;\n}\nfunction rc(i, t, e) {\n  const s = [];\n  for (let n = 0; n < e.length; n++) {\n    const o = e[n], { first: r, last: a, point: l } = ac(o, t, \"x\");\n    if (!(!l || r && a)) {\n      if (r)\n        s.unshift(l);\n      else if (i.push(l), !a)\n        break;\n    }\n  }\n  i.push(...s);\n}\nfunction ac(i, t, e) {\n  const s = i.interpolate(t, e);\n  if (!s)\n    return {};\n  const n = s[e], o = i.segments, r = i.points;\n  let a = !1, l = !1;\n  for (let c = 0; c < o.length; c++) {\n    const h = o[c], d = r[h.start][e], u = r[h.end][e];\n    if (ut(n, d, u)) {\n      a = n === d, l = n === u;\n      break;\n    }\n  }\n  return { first: a, last: l, point: s };\n}\nclass co {\n  constructor(t) {\n    this.x = t.x, this.y = t.y, this.radius = t.radius;\n  }\n  pathSegment(t, e, s) {\n    const { x: n, y: o, radius: r } = this;\n    return e = e || { start: 0, end: F }, t.arc(n, o, r, e.end, e.start, !0), !s.bounds;\n  }\n  interpolate(t) {\n    const { x: e, y: s, radius: n } = this, o = t.angle;\n    return {\n      x: e + Math.cos(o) * n,\n      y: s + Math.sin(o) * n,\n      angle: o\n    };\n  }\n}\nfunction lc(i) {\n  const { chart: t, fill: e, line: s } = i;\n  if (N(e))\n    return cc(t, e);\n  if (e === \"stack\")\n    return nc(i);\n  if (e === \"shape\")\n    return !0;\n  const n = hc(i);\n  return n instanceof co ? n : lo(n, s);\n}\nfunction cc(i, t) {\n  const e = i.getDatasetMeta(t);\n  return e && i.isDatasetVisible(t) ? e.dataset : null;\n}\nfunction hc(i) {\n  return (i.scale || {}).getPointPositionForValue ? uc(i) : dc(i);\n}\nfunction dc(i) {\n  const { scale: t = {}, fill: e } = i, s = ec(e, t);\n  if (N(s)) {\n    const n = t.isHorizontal();\n    return {\n      x: n ? s : null,\n      y: n ? null : s\n    };\n  }\n  return null;\n}\nfunction uc(i) {\n  const { scale: t, fill: e } = i, s = t.options, n = t.getLabels().length, o = s.reverse ? t.max : t.min, r = ic(e, t, o), a = [];\n  if (s.grid.circular) {\n    const l = t.getPointPositionForValue(0, o);\n    return new co({\n      x: l.x,\n      y: l.y,\n      radius: t.getDistanceFromCenterForValue(r)\n    });\n  }\n  for (let l = 0; l < n; ++l)\n    a.push(t.getPointPositionForValue(l, r));\n  return a;\n}\nfunction mi(i, t, e) {\n  const s = lc(t), { line: n, scale: o, axis: r } = t, a = n.options, l = a.fill, c = a.backgroundColor, { above: h = c, below: d = c } = l || {};\n  s && n.points.length && (Xe(i, e), fc(i, { line: n, target: s, above: h, below: d, area: e, scale: o, axis: r }), Ue(i));\n}\nfunction fc(i, t) {\n  const { line: e, target: s, above: n, below: o, area: r, scale: a } = t, l = e._loop ? \"angle\" : t.axis;\n  i.save(), l === \"x\" && o !== n && (js(i, s, r.top), $s(i, { line: e, target: s, color: n, scale: a, property: l }), i.restore(), i.save(), js(i, s, r.bottom)), $s(i, { line: e, target: s, color: o, scale: a, property: l }), i.restore();\n}\nfunction js(i, t, e) {\n  const { segments: s, points: n } = t;\n  let o = !0, r = !1;\n  i.beginPath();\n  for (const a of s) {\n    const { start: l, end: c } = a, h = n[l], d = n[$i(l, c, n)];\n    o ? (i.moveTo(h.x, h.y), o = !1) : (i.lineTo(h.x, e), i.lineTo(h.x, h.y)), r = !!t.pathSegment(i, a, { move: r }), r ? i.closePath() : i.lineTo(d.x, e);\n  }\n  i.lineTo(t.first().x, e), i.closePath(), i.clip();\n}\nfunction $s(i, t) {\n  const { line: e, target: s, property: n, color: o, scale: r } = t, a = Gl(e, s, n);\n  for (const { source: l, target: c, start: h, end: d } of a) {\n    const { style: { backgroundColor: u = o } = {} } = l, f = s !== !0;\n    i.save(), i.fillStyle = u, gc(i, r, f && Pi(n, h, d)), i.beginPath();\n    const g = !!e.pathSegment(i, l);\n    let p;\n    if (f) {\n      g ? i.closePath() : Ys(i, s, d, n);\n      const m = !!s.pathSegment(i, c, { move: g, reverse: !0 });\n      p = g && m, p || Ys(i, s, h, n);\n    }\n    i.closePath(), i.fill(p ? \"evenodd\" : \"nonzero\"), i.restore();\n  }\n}\nfunction gc(i, t, e) {\n  const { top: s, bottom: n } = t.chart.chartArea, { property: o, start: r, end: a } = e || {};\n  o === \"x\" && (i.beginPath(), i.rect(r, s, a - r, n - s), i.clip());\n}\nfunction Ys(i, t, e, s) {\n  const n = t.interpolate(e, s);\n  n && i.lineTo(n.x, n.y);\n}\nvar ho = {\n  id: \"filler\",\n  afterDatasetsUpdate(i, t, e) {\n    const s = (i.data.datasets || []).length, n = [];\n    let o, r, a, l;\n    for (r = 0; r < s; ++r)\n      o = i.getDatasetMeta(r), a = o.dataset, l = null, a && a.options && a instanceof gt && (l = {\n        visible: i.isDatasetVisible(r),\n        index: r,\n        fill: Ql(a, r, s),\n        chart: i,\n        axis: o.controller.options.indexAxis,\n        scale: o.vScale,\n        line: a\n      }), o.$filler = l, n.push(l);\n    for (r = 0; r < s; ++r)\n      l = n[r], !(!l || l.fill === !1) && (l.fill = Jl(n, r, e.propagate));\n  },\n  beforeDraw(i, t, e) {\n    const s = e.drawTime === \"beforeDraw\", n = i.getSortedVisibleDatasetMetas(), o = i.chartArea;\n    for (let r = n.length - 1; r >= 0; --r) {\n      const a = n[r].$filler;\n      a && (a.line.updateControlPoints(o, a.axis), s && a.fill && mi(i.ctx, a, o));\n    }\n  },\n  beforeDatasetsDraw(i, t, e) {\n    if (e.drawTime !== \"beforeDatasetsDraw\")\n      return;\n    const s = i.getSortedVisibleDatasetMetas();\n    for (let n = s.length - 1; n >= 0; --n) {\n      const o = s[n].$filler;\n      Hs(o) && mi(i.ctx, o, i.chartArea);\n    }\n  },\n  beforeDatasetDraw(i, t, e) {\n    const s = t.meta.$filler;\n    !Hs(s) || e.drawTime !== \"beforeDatasetDraw\" || mi(i.ctx, s, i.chartArea);\n  },\n  defaults: {\n    propagate: !0,\n    drawTime: \"beforeDatasetDraw\"\n  }\n};\nconst Xs = (i, t) => {\n  let { boxHeight: e = t, boxWidth: s = t } = i;\n  return i.usePointStyle && (e = Math.min(e, t), s = i.pointStyleWidth || Math.min(s, t)), {\n    boxWidth: s,\n    boxHeight: e,\n    itemHeight: Math.max(t, e)\n  };\n}, pc = (i, t) => i !== null && t !== null && i.datasetIndex === t.datasetIndex && i.index === t.index;\nclass Us extends st {\n  constructor(t) {\n    super(), this._added = !1, this.legendHitBoxes = [], this._hoveredItem = null, this.doughnutMode = !1, this.chart = t.chart, this.options = t.options, this.ctx = t.ctx, this.legendItems = void 0, this.columnSizes = void 0, this.lineWidths = void 0, this.maxHeight = void 0, this.maxWidth = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.height = void 0, this.width = void 0, this._margins = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0;\n  }\n  update(t, e, s) {\n    this.maxWidth = t, this.maxHeight = e, this._margins = s, this.setDimensions(), this.buildLabels(), this.fit();\n  }\n  setDimensions() {\n    this.isHorizontal() ? (this.width = this.maxWidth, this.left = this._margins.left, this.right = this.width) : (this.height = this.maxHeight, this.top = this._margins.top, this.bottom = this.height);\n  }\n  buildLabels() {\n    const t = this.options.labels || {};\n    let e = I(t.generateLabels, [this.chart], this) || [];\n    t.filter && (e = e.filter((s) => t.filter(s, this.chart.data))), t.sort && (e = e.sort((s, n) => t.sort(s, n, this.chart.data))), this.options.reverse && e.reverse(), this.legendItems = e;\n  }\n  fit() {\n    const { options: t, ctx: e } = this;\n    if (!t.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const s = t.labels, n = $(s.font), o = n.size, r = this._computeTitleHeight(), { boxWidth: a, itemHeight: l } = Xs(s, o);\n    let c, h;\n    e.font = n.string, this.isHorizontal() ? (c = this.maxWidth, h = this._fitRows(r, o, a, l) + 10) : (h = this.maxHeight, c = this._fitCols(r, o, a, l) + 10), this.width = Math.min(c, t.maxWidth || this.maxWidth), this.height = Math.min(h, t.maxHeight || this.maxHeight);\n  }\n  _fitRows(t, e, s, n) {\n    const { ctx: o, maxWidth: r, options: { labels: { padding: a } } } = this, l = this.legendHitBoxes = [], c = this.lineWidths = [0], h = n + a;\n    let d = t;\n    o.textAlign = \"left\", o.textBaseline = \"middle\";\n    let u = -1, f = -h;\n    return this.legendItems.forEach((g, p) => {\n      const m = s + e / 2 + o.measureText(g.text).width;\n      (p === 0 || c[c.length - 1] + m + 2 * a > r) && (d += h, c[c.length - (p > 0 ? 0 : 1)] = 0, f += h, u++), l[p] = { left: 0, top: f, row: u, width: m, height: n }, c[c.length - 1] += m + a;\n    }), d;\n  }\n  _fitCols(t, e, s, n) {\n    const { ctx: o, maxHeight: r, options: { labels: { padding: a } } } = this, l = this.legendHitBoxes = [], c = this.columnSizes = [], h = r - t;\n    let d = a, u = 0, f = 0, g = 0, p = 0;\n    return this.legendItems.forEach((m, b) => {\n      const x = s + e / 2 + o.measureText(m.text).width;\n      b > 0 && f + n + 2 * a > h && (d += u + a, c.push({ width: u, height: f }), g += u + a, p++, u = f = 0), l[b] = { left: g, top: f, col: p, width: x, height: n }, u = Math.max(u, x), f += n + a;\n    }), d += u, c.push({ width: u, height: f }), d;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display)\n      return;\n    const t = this._computeTitleHeight(), { legendHitBoxes: e, options: { align: s, labels: { padding: n }, rtl: o } } = this, r = zt(o, this.left, this.width);\n    if (this.isHorizontal()) {\n      let a = 0, l = U(s, this.left + n, this.right - this.lineWidths[a]);\n      for (const c of e)\n        a !== c.row && (a = c.row, l = U(s, this.left + n, this.right - this.lineWidths[a])), c.top += this.top + t + n, c.left = r.leftForLtr(r.x(l), c.width), l += c.width + n;\n    } else {\n      let a = 0, l = U(s, this.top + t + n, this.bottom - this.columnSizes[a].height);\n      for (const c of e)\n        c.col !== a && (a = c.col, l = U(s, this.top + t + n, this.bottom - this.columnSizes[a].height)), c.top = l, c.left += this.left + n, c.left = r.leftForLtr(r.x(c.left), c.width), l += c.height + n;\n    }\n  }\n  isHorizontal() {\n    return this.options.position === \"top\" || this.options.position === \"bottom\";\n  }\n  draw() {\n    if (this.options.display) {\n      const t = this.ctx;\n      Xe(t, this), this._draw(), Ue(t);\n    }\n  }\n  _draw() {\n    const { options: t, columnSizes: e, lineWidths: s, ctx: n } = this, { align: o, labels: r } = t, a = O.color, l = zt(t.rtl, this.left, this.width), c = $(r.font), { color: h, padding: d } = r, u = c.size, f = u / 2;\n    let g;\n    this.drawTitle(), n.textAlign = l.textAlign(\"left\"), n.textBaseline = \"middle\", n.lineWidth = 0.5, n.font = c.string;\n    const { boxWidth: p, boxHeight: m, itemHeight: b } = Xs(r, u), x = function(k, S, w) {\n      if (isNaN(p) || p <= 0 || isNaN(m) || m < 0)\n        return;\n      n.save();\n      const L = C(w.lineWidth, 1);\n      if (n.fillStyle = C(w.fillStyle, a), n.lineCap = C(w.lineCap, \"butt\"), n.lineDashOffset = C(w.lineDashOffset, 0), n.lineJoin = C(w.lineJoin, \"miter\"), n.lineWidth = L, n.strokeStyle = C(w.strokeStyle, a), n.setLineDash(C(w.lineDash, [])), r.usePointStyle) {\n        const R = {\n          radius: m * Math.SQRT2 / 2,\n          pointStyle: w.pointStyle,\n          rotation: w.rotation,\n          borderWidth: L\n        }, A = l.xPlus(k, p / 2), H = S + f;\n        Mn(n, R, A, H, r.pointStyleWidth && p);\n      } else {\n        const R = S + Math.max((u - m) / 2, 0), A = l.leftForLtr(k, p), H = Dt(w.borderRadius);\n        n.beginPath(), Object.values(H).some((q) => q !== 0) ? ae(n, {\n          x: A,\n          y: R,\n          w: p,\n          h: m,\n          radius: H\n        }) : n.rect(A, R, p, m), n.fill(), L !== 0 && n.stroke();\n      }\n      n.restore();\n    }, v = function(k, S, w) {\n      Tt(n, w.text, k, S + b / 2, c, {\n        strikethrough: w.hidden,\n        textAlign: l.textAlign(w.textAlign)\n      });\n    }, y = this.isHorizontal(), _ = this._computeTitleHeight();\n    y ? g = {\n      x: U(o, this.left + d, this.right - s[0]),\n      y: this.top + d + _,\n      line: 0\n    } : g = {\n      x: this.left + d,\n      y: U(o, this.top + _ + d, this.bottom - e[0].height),\n      line: 0\n    }, Tn(this.ctx, t.textDirection);\n    const M = b + d;\n    this.legendItems.forEach((k, S) => {\n      n.strokeStyle = k.fontColor || h, n.fillStyle = k.fontColor || h;\n      const w = n.measureText(k.text).width, L = l.textAlign(k.textAlign || (k.textAlign = r.textAlign)), R = p + f + w;\n      let A = g.x, H = g.y;\n      l.setWidth(this.width), y ? S > 0 && A + R + d > this.right && (H = g.y += M, g.line++, A = g.x = U(o, this.left + d, this.right - s[g.line])) : S > 0 && H + M > this.bottom && (A = g.x = A + e[g.line].width + d, g.line++, H = g.y = U(o, this.top + _ + d, this.bottom - e[g.line].height));\n      const q = l.x(A);\n      x(q, H, k), A = Io(L, A + p + f, y ? A + R : this.right, t.rtl), v(l.x(A), H, k), y ? g.x += R + d : g.y += M;\n    }), Ln(this.ctx, t.textDirection);\n  }\n  drawTitle() {\n    const t = this.options, e = t.title, s = $(e.font), n = K(e.padding);\n    if (!e.display)\n      return;\n    const o = zt(t.rtl, this.left, this.width), r = this.ctx, a = e.position, l = s.size / 2, c = n.top + l;\n    let h, d = this.left, u = this.width;\n    if (this.isHorizontal())\n      u = Math.max(...this.lineWidths), h = this.top + c, d = U(t.align, d, this.right - u);\n    else {\n      const g = this.columnSizes.reduce((p, m) => Math.max(p, m.height), 0);\n      h = c + U(t.align, this.top, this.bottom - g - t.labels.padding - this._computeTitleHeight());\n    }\n    const f = U(a, d, d + u);\n    r.textAlign = o.textAlign(Li(a)), r.textBaseline = \"middle\", r.strokeStyle = e.color, r.fillStyle = e.color, r.font = s.string, Tt(r, e.text, f, h, s);\n  }\n  _computeTitleHeight() {\n    const t = this.options.title, e = $(t.font), s = K(t.padding);\n    return t.display ? e.lineHeight + s.height : 0;\n  }\n  _getLegendItemAt(t, e) {\n    let s, n, o;\n    if (ut(t, this.left, this.right) && ut(e, this.top, this.bottom)) {\n      for (o = this.legendHitBoxes, s = 0; s < o.length; ++s)\n        if (n = o[s], ut(t, n.left, n.left + n.width) && ut(e, n.top, n.top + n.height))\n          return this.legendItems[s];\n    }\n    return null;\n  }\n  handleEvent(t) {\n    const e = this.options;\n    if (!mc(t.type, e))\n      return;\n    const s = this._getLegendItemAt(t.x, t.y);\n    if (t.type === \"mousemove\" || t.type === \"mouseout\") {\n      const n = this._hoveredItem, o = pc(n, s);\n      n && !o && I(e.onLeave, [t, n, this], this), this._hoveredItem = s, s && !o && I(e.onHover, [t, s, this], this);\n    } else\n      s && I(e.onClick, [t, s, this], this);\n  }\n}\nfunction mc(i, t) {\n  return !!((i === \"mousemove\" || i === \"mouseout\") && (t.onHover || t.onLeave) || t.onClick && (i === \"click\" || i === \"mouseup\"));\n}\nvar uo = {\n  id: \"legend\",\n  _element: Us,\n  start(i, t, e) {\n    const s = i.legend = new Us({ ctx: i.ctx, options: e, chart: i });\n    X.configure(i, s, e), X.addBox(i, s);\n  },\n  stop(i) {\n    X.removeBox(i, i.legend), delete i.legend;\n  },\n  beforeUpdate(i, t, e) {\n    const s = i.legend;\n    X.configure(i, s, e), s.options = e;\n  },\n  afterUpdate(i) {\n    const t = i.legend;\n    t.buildLabels(), t.adjustHitBoxes();\n  },\n  afterEvent(i, t) {\n    t.replay || i.legend.handleEvent(t.event);\n  },\n  defaults: {\n    display: !0,\n    position: \"top\",\n    align: \"center\",\n    fullSize: !0,\n    reverse: !1,\n    weight: 1e3,\n    onClick(i, t, e) {\n      const s = t.datasetIndex, n = e.chart;\n      n.isDatasetVisible(s) ? (n.hide(s), t.hidden = !0) : (n.show(s), t.hidden = !1);\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: (i) => i.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(i) {\n        const t = i.data.datasets, { labels: { usePointStyle: e, pointStyle: s, textAlign: n, color: o } } = i.legend.options;\n        return i._getSortedDatasetMetas().map((r) => {\n          const a = r.controller.getStyle(e ? 0 : void 0), l = K(a.borderWidth);\n          return {\n            text: t[r.index].label,\n            fillStyle: a.backgroundColor,\n            fontColor: o,\n            hidden: !r.visible,\n            lineCap: a.borderCapStyle,\n            lineDash: a.borderDash,\n            lineDashOffset: a.borderDashOffset,\n            lineJoin: a.borderJoinStyle,\n            lineWidth: (l.width + l.height) / 4,\n            strokeStyle: a.borderColor,\n            pointStyle: s || a.pointStyle,\n            rotation: a.rotation,\n            textAlign: n || a.textAlign,\n            borderRadius: 0,\n            datasetIndex: r.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: (i) => i.chart.options.color,\n      display: !1,\n      position: \"center\",\n      text: \"\"\n    }\n  },\n  descriptors: {\n    _scriptable: (i) => !i.startsWith(\"on\"),\n    labels: {\n      _scriptable: (i) => ![\"generateLabels\", \"filter\", \"sort\"].includes(i)\n    }\n  }\n};\nclass Yi extends st {\n  constructor(t) {\n    super(), this.chart = t.chart, this.options = t.options, this.ctx = t.ctx, this._padding = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0;\n  }\n  update(t, e) {\n    const s = this.options;\n    if (this.left = 0, this.top = 0, !s.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = t, this.height = this.bottom = e;\n    const n = z(s.text) ? s.text.length : 1;\n    this._padding = K(s.padding);\n    const o = n * $(s.font).lineHeight + this._padding.height;\n    this.isHorizontal() ? this.height = o : this.width = o;\n  }\n  isHorizontal() {\n    const t = this.options.position;\n    return t === \"top\" || t === \"bottom\";\n  }\n  _drawArgs(t) {\n    const { top: e, left: s, bottom: n, right: o, options: r } = this, a = r.align;\n    let l = 0, c, h, d;\n    return this.isHorizontal() ? (h = U(a, s, o), d = e + t, c = o - s) : (r.position === \"left\" ? (h = s + t, d = U(a, n, e), l = B * -0.5) : (h = o - t, d = U(a, e, n), l = B * 0.5), c = n - e), { titleX: h, titleY: d, maxWidth: c, rotation: l };\n  }\n  draw() {\n    const t = this.ctx, e = this.options;\n    if (!e.display)\n      return;\n    const s = $(e.font), o = s.lineHeight / 2 + this._padding.top, { titleX: r, titleY: a, maxWidth: l, rotation: c } = this._drawArgs(o);\n    Tt(t, e.text, 0, 0, s, {\n      color: e.color,\n      maxWidth: l,\n      rotation: c,\n      textAlign: Li(e.align),\n      textBaseline: \"middle\",\n      translation: [r, a]\n    });\n  }\n}\nfunction bc(i, t) {\n  const e = new Yi({\n    ctx: i.ctx,\n    options: t,\n    chart: i\n  });\n  X.configure(i, e, t), X.addBox(i, e), i.titleBlock = e;\n}\nvar fo = {\n  id: \"title\",\n  _element: Yi,\n  start(i, t, e) {\n    bc(i, e);\n  },\n  stop(i) {\n    const t = i.titleBlock;\n    X.removeBox(i, t), delete i.titleBlock;\n  },\n  beforeUpdate(i, t, e) {\n    const s = i.titleBlock;\n    X.configure(i, s, e), s.options = e;\n  },\n  defaults: {\n    align: \"center\",\n    display: !1,\n    font: {\n      weight: \"bold\"\n    },\n    fullSize: !0,\n    padding: 10,\n    position: \"top\",\n    text: \"\",\n    weight: 2e3\n  },\n  defaultRoutes: {\n    color: \"color\"\n  },\n  descriptors: {\n    _scriptable: !0,\n    _indexable: !1\n  }\n};\nconst Re = /* @__PURE__ */ new WeakMap();\nvar go = {\n  id: \"subtitle\",\n  start(i, t, e) {\n    const s = new Yi({\n      ctx: i.ctx,\n      options: e,\n      chart: i\n    });\n    X.configure(i, s, e), X.addBox(i, s), Re.set(i, s);\n  },\n  stop(i) {\n    X.removeBox(i, Re.get(i)), Re.delete(i);\n  },\n  beforeUpdate(i, t, e) {\n    const s = Re.get(i);\n    X.configure(i, s, e), s.options = e;\n  },\n  defaults: {\n    align: \"center\",\n    display: !1,\n    font: {\n      weight: \"normal\"\n    },\n    fullSize: !0,\n    padding: 0,\n    position: \"top\",\n    text: \"\",\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: \"color\"\n  },\n  descriptors: {\n    _scriptable: !0,\n    _indexable: !1\n  }\n};\nconst se = {\n  average(i) {\n    if (!i.length)\n      return !1;\n    let t, e, s = 0, n = 0, o = 0;\n    for (t = 0, e = i.length; t < e; ++t) {\n      const r = i[t].element;\n      if (r && r.hasValue()) {\n        const a = r.tooltipPosition();\n        s += a.x, n += a.y, ++o;\n      }\n    }\n    return {\n      x: s / o,\n      y: n / o\n    };\n  },\n  nearest(i, t) {\n    if (!i.length)\n      return !1;\n    let e = t.x, s = t.y, n = Number.POSITIVE_INFINITY, o, r, a;\n    for (o = 0, r = i.length; o < r; ++o) {\n      const l = i[o].element;\n      if (l && l.hasValue()) {\n        const c = l.getCenterPoint(), h = bi(t, c);\n        h < n && (n = h, a = l);\n      }\n    }\n    if (a) {\n      const l = a.tooltipPosition();\n      e = l.x, s = l.y;\n    }\n    return {\n      x: e,\n      y: s\n    };\n  }\n};\nfunction rt(i, t) {\n  return t && (z(t) ? Array.prototype.push.apply(i, t) : i.push(t)), i;\n}\nfunction ht(i) {\n  return (typeof i == \"string\" || i instanceof String) && i.indexOf(`\n`) > -1 ? i.split(`\n`) : i;\n}\nfunction xc(i, t) {\n  const { element: e, datasetIndex: s, index: n } = t, o = i.getDatasetMeta(s).controller, { label: r, value: a } = o.getLabelAndValue(n);\n  return {\n    chart: i,\n    label: r,\n    parsed: o.getParsed(n),\n    raw: i.data.datasets[s].data[n],\n    formattedValue: a,\n    dataset: o.getDataset(),\n    dataIndex: n,\n    datasetIndex: s,\n    element: e\n  };\n}\nfunction Ks(i, t) {\n  const e = i.chart.ctx, { body: s, footer: n, title: o } = i, { boxWidth: r, boxHeight: a } = t, l = $(t.bodyFont), c = $(t.titleFont), h = $(t.footerFont), d = o.length, u = n.length, f = s.length, g = K(t.padding);\n  let p = g.height, m = 0, b = s.reduce((y, _) => y + _.before.length + _.lines.length + _.after.length, 0);\n  if (b += i.beforeBody.length + i.afterBody.length, d && (p += d * c.lineHeight + (d - 1) * t.titleSpacing + t.titleMarginBottom), b) {\n    const y = t.displayColors ? Math.max(a, l.lineHeight) : l.lineHeight;\n    p += f * y + (b - f) * l.lineHeight + (b - 1) * t.bodySpacing;\n  }\n  u && (p += t.footerMarginTop + u * h.lineHeight + (u - 1) * t.footerSpacing);\n  let x = 0;\n  const v = function(y) {\n    m = Math.max(m, e.measureText(y).width + x);\n  };\n  return e.save(), e.font = c.string, E(i.title, v), e.font = l.string, E(i.beforeBody.concat(i.afterBody), v), x = t.displayColors ? r + 2 + t.boxPadding : 0, E(s, (y) => {\n    E(y.before, v), E(y.lines, v), E(y.after, v);\n  }), x = 0, e.font = h.string, E(i.footer, v), e.restore(), m += g.width, { width: m, height: p };\n}\nfunction _c(i, t) {\n  const { y: e, height: s } = t;\n  return e < s / 2 ? \"top\" : e > i.height - s / 2 ? \"bottom\" : \"center\";\n}\nfunction yc(i, t, e, s) {\n  const { x: n, width: o } = s, r = e.caretSize + e.caretPadding;\n  if (i === \"left\" && n + o + r > t.width || i === \"right\" && n - o - r < 0)\n    return !0;\n}\nfunction vc(i, t, e, s) {\n  const { x: n, width: o } = e, { width: r, chartArea: { left: a, right: l } } = i;\n  let c = \"center\";\n  return s === \"center\" ? c = n <= (a + l) / 2 ? \"left\" : \"right\" : n <= o / 2 ? c = \"left\" : n >= r - o / 2 && (c = \"right\"), yc(c, i, t, e) && (c = \"center\"), c;\n}\nfunction qs(i, t, e) {\n  const s = e.yAlign || t.yAlign || _c(i, e);\n  return {\n    xAlign: e.xAlign || t.xAlign || vc(i, t, e, s),\n    yAlign: s\n  };\n}\nfunction Mc(i, t) {\n  let { x: e, width: s } = i;\n  return t === \"right\" ? e -= s : t === \"center\" && (e -= s / 2), e;\n}\nfunction kc(i, t, e) {\n  let { y: s, height: n } = i;\n  return t === \"top\" ? s += e : t === \"bottom\" ? s -= n + e : s -= n / 2, s;\n}\nfunction Gs(i, t, e, s) {\n  const { caretSize: n, caretPadding: o, cornerRadius: r } = i, { xAlign: a, yAlign: l } = e, c = n + o, { topLeft: h, topRight: d, bottomLeft: u, bottomRight: f } = Dt(r);\n  let g = Mc(t, a);\n  const p = kc(t, l, c);\n  return l === \"center\" ? a === \"left\" ? g += c : a === \"right\" && (g -= c) : a === \"left\" ? g -= Math.max(h, u) + n : a === \"right\" && (g += Math.max(d, f) + n), {\n    x: Y(g, 0, s.width - t.width),\n    y: Y(p, 0, s.height - t.height)\n  };\n}\nfunction Ee(i, t, e) {\n  const s = K(e.padding);\n  return t === \"center\" ? i.x + i.width / 2 : t === \"right\" ? i.x + i.width - s.right : i.x + s.left;\n}\nfunction Zs(i) {\n  return rt([], ht(i));\n}\nfunction wc(i, t, e) {\n  return vt(i, {\n    tooltip: t,\n    tooltipItems: e,\n    type: \"tooltip\"\n  });\n}\nfunction Js(i, t) {\n  const e = t && t.dataset && t.dataset.tooltip && t.dataset.tooltip.callbacks;\n  return e ? i.override(e) : i;\n}\nclass Ci extends st {\n  constructor(t) {\n    super(), this.opacity = 0, this._active = [], this._eventPosition = void 0, this._size = void 0, this._cachedAnimations = void 0, this._tooltipItems = [], this.$animations = void 0, this.$context = void 0, this.chart = t.chart || t._chart, this._chart = this.chart, this.options = t.options, this.dataPoints = void 0, this.title = void 0, this.beforeBody = void 0, this.body = void 0, this.afterBody = void 0, this.footer = void 0, this.xAlign = void 0, this.yAlign = void 0, this.x = void 0, this.y = void 0, this.height = void 0, this.width = void 0, this.caretX = void 0, this.caretY = void 0, this.labelColors = void 0, this.labelPointStyles = void 0, this.labelTextColors = void 0;\n  }\n  initialize(t) {\n    this.options = t, this._cachedAnimations = void 0, this.$context = void 0;\n  }\n  _resolveAnimations() {\n    const t = this._cachedAnimations;\n    if (t)\n      return t;\n    const e = this.chart, s = this.options.setContext(this.getContext()), n = s.enabled && e.options.animation && s.animations, o = new Ni(this.chart, n);\n    return n._cacheable && (this._cachedAnimations = Object.freeze(o)), o;\n  }\n  getContext() {\n    return this.$context || (this.$context = wc(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(t, e) {\n    const { callbacks: s } = e, n = s.beforeTitle.apply(this, [t]), o = s.title.apply(this, [t]), r = s.afterTitle.apply(this, [t]);\n    let a = [];\n    return a = rt(a, ht(n)), a = rt(a, ht(o)), a = rt(a, ht(r)), a;\n  }\n  getBeforeBody(t, e) {\n    return Zs(e.callbacks.beforeBody.apply(this, [t]));\n  }\n  getBody(t, e) {\n    const { callbacks: s } = e, n = [];\n    return E(t, (o) => {\n      const r = {\n        before: [],\n        lines: [],\n        after: []\n      }, a = Js(s, o);\n      rt(r.before, ht(a.beforeLabel.call(this, o))), rt(r.lines, a.label.call(this, o)), rt(r.after, ht(a.afterLabel.call(this, o))), n.push(r);\n    }), n;\n  }\n  getAfterBody(t, e) {\n    return Zs(e.callbacks.afterBody.apply(this, [t]));\n  }\n  getFooter(t, e) {\n    const { callbacks: s } = e, n = s.beforeFooter.apply(this, [t]), o = s.footer.apply(this, [t]), r = s.afterFooter.apply(this, [t]);\n    let a = [];\n    return a = rt(a, ht(n)), a = rt(a, ht(o)), a = rt(a, ht(r)), a;\n  }\n  _createItems(t) {\n    const e = this._active, s = this.chart.data, n = [], o = [], r = [];\n    let a = [], l, c;\n    for (l = 0, c = e.length; l < c; ++l)\n      a.push(xc(this.chart, e[l]));\n    return t.filter && (a = a.filter((h, d, u) => t.filter(h, d, u, s))), t.itemSort && (a = a.sort((h, d) => t.itemSort(h, d, s))), E(a, (h) => {\n      const d = Js(t.callbacks, h);\n      n.push(d.labelColor.call(this, h)), o.push(d.labelPointStyle.call(this, h)), r.push(d.labelTextColor.call(this, h));\n    }), this.labelColors = n, this.labelPointStyles = o, this.labelTextColors = r, this.dataPoints = a, a;\n  }\n  update(t, e) {\n    const s = this.options.setContext(this.getContext()), n = this._active;\n    let o, r = [];\n    if (!n.length)\n      this.opacity !== 0 && (o = {\n        opacity: 0\n      });\n    else {\n      const a = se[s.position].call(this, n, this._eventPosition);\n      r = this._createItems(s), this.title = this.getTitle(r, s), this.beforeBody = this.getBeforeBody(r, s), this.body = this.getBody(r, s), this.afterBody = this.getAfterBody(r, s), this.footer = this.getFooter(r, s);\n      const l = this._size = Ks(this, s), c = Object.assign({}, a, l), h = qs(this.chart, s, c), d = Gs(s, c, h, this.chart);\n      this.xAlign = h.xAlign, this.yAlign = h.yAlign, o = {\n        opacity: 1,\n        x: d.x,\n        y: d.y,\n        width: l.width,\n        height: l.height,\n        caretX: a.x,\n        caretY: a.y\n      };\n    }\n    this._tooltipItems = r, this.$context = void 0, o && this._resolveAnimations().update(this, o), t && s.external && s.external.call(this, { chart: this.chart, tooltip: this, replay: e });\n  }\n  drawCaret(t, e, s, n) {\n    const o = this.getCaretPosition(t, s, n);\n    e.lineTo(o.x1, o.y1), e.lineTo(o.x2, o.y2), e.lineTo(o.x3, o.y3);\n  }\n  getCaretPosition(t, e, s) {\n    const { xAlign: n, yAlign: o } = this, { caretSize: r, cornerRadius: a } = s, { topLeft: l, topRight: c, bottomLeft: h, bottomRight: d } = Dt(a), { x: u, y: f } = t, { width: g, height: p } = e;\n    let m, b, x, v, y, _;\n    return o === \"center\" ? (y = f + p / 2, n === \"left\" ? (m = u, b = m - r, v = y + r, _ = y - r) : (m = u + g, b = m + r, v = y - r, _ = y + r), x = m) : (n === \"left\" ? b = u + Math.max(l, h) + r : n === \"right\" ? b = u + g - Math.max(c, d) - r : b = this.caretX, o === \"top\" ? (v = f, y = v - r, m = b - r, x = b + r) : (v = f + p, y = v + r, m = b + r, x = b - r), _ = v), { x1: m, x2: b, x3: x, y1: v, y2: y, y3: _ };\n  }\n  drawTitle(t, e, s) {\n    const n = this.title, o = n.length;\n    let r, a, l;\n    if (o) {\n      const c = zt(s.rtl, this.x, this.width);\n      for (t.x = Ee(this, s.titleAlign, s), e.textAlign = c.textAlign(s.titleAlign), e.textBaseline = \"middle\", r = $(s.titleFont), a = s.titleSpacing, e.fillStyle = s.titleColor, e.font = r.string, l = 0; l < o; ++l)\n        e.fillText(n[l], c.x(t.x), t.y + r.lineHeight / 2), t.y += r.lineHeight + a, l + 1 === o && (t.y += s.titleMarginBottom - a);\n    }\n  }\n  _drawColorBox(t, e, s, n, o) {\n    const r = this.labelColors[s], a = this.labelPointStyles[s], { boxHeight: l, boxWidth: c, boxPadding: h } = o, d = $(o.bodyFont), u = Ee(this, \"left\", o), f = n.x(u), g = l < d.lineHeight ? (d.lineHeight - l) / 2 : 0, p = e.y + g;\n    if (o.usePointStyle) {\n      const m = {\n        radius: Math.min(c, l) / 2,\n        pointStyle: a.pointStyle,\n        rotation: a.rotation,\n        borderWidth: 1\n      }, b = n.leftForLtr(f, c) + c / 2, x = p + l / 2;\n      t.strokeStyle = o.multiKeyBackground, t.fillStyle = o.multiKeyBackground, yi(t, m, b, x), t.strokeStyle = r.borderColor, t.fillStyle = r.backgroundColor, yi(t, m, b, x);\n    } else {\n      t.lineWidth = D(r.borderWidth) ? Math.max(...Object.values(r.borderWidth)) : r.borderWidth || 1, t.strokeStyle = r.borderColor, t.setLineDash(r.borderDash || []), t.lineDashOffset = r.borderDashOffset || 0;\n      const m = n.leftForLtr(f, c - h), b = n.leftForLtr(n.xPlus(f, 1), c - h - 2), x = Dt(r.borderRadius);\n      Object.values(x).some((v) => v !== 0) ? (t.beginPath(), t.fillStyle = o.multiKeyBackground, ae(t, {\n        x: m,\n        y: p,\n        w: c,\n        h: l,\n        radius: x\n      }), t.fill(), t.stroke(), t.fillStyle = r.backgroundColor, t.beginPath(), ae(t, {\n        x: b,\n        y: p + 1,\n        w: c - 2,\n        h: l - 2,\n        radius: x\n      }), t.fill()) : (t.fillStyle = o.multiKeyBackground, t.fillRect(m, p, c, l), t.strokeRect(m, p, c, l), t.fillStyle = r.backgroundColor, t.fillRect(b, p + 1, c - 2, l - 2));\n    }\n    t.fillStyle = this.labelTextColors[s];\n  }\n  drawBody(t, e, s) {\n    const { body: n } = this, { bodySpacing: o, bodyAlign: r, displayColors: a, boxHeight: l, boxWidth: c, boxPadding: h } = s, d = $(s.bodyFont);\n    let u = d.lineHeight, f = 0;\n    const g = zt(s.rtl, this.x, this.width), p = function(S) {\n      e.fillText(S, g.x(t.x + f), t.y + u / 2), t.y += u + o;\n    }, m = g.textAlign(r);\n    let b, x, v, y, _, M, k;\n    for (e.textAlign = r, e.textBaseline = \"middle\", e.font = d.string, t.x = Ee(this, m, s), e.fillStyle = s.bodyColor, E(this.beforeBody, p), f = a && m !== \"right\" ? r === \"center\" ? c / 2 + h : c + 2 + h : 0, y = 0, M = n.length; y < M; ++y) {\n      for (b = n[y], x = this.labelTextColors[y], e.fillStyle = x, E(b.before, p), v = b.lines, a && v.length && (this._drawColorBox(e, t, y, g, s), u = Math.max(d.lineHeight, l)), _ = 0, k = v.length; _ < k; ++_)\n        p(v[_]), u = d.lineHeight;\n      E(b.after, p);\n    }\n    f = 0, u = d.lineHeight, E(this.afterBody, p), t.y -= o;\n  }\n  drawFooter(t, e, s) {\n    const n = this.footer, o = n.length;\n    let r, a;\n    if (o) {\n      const l = zt(s.rtl, this.x, this.width);\n      for (t.x = Ee(this, s.footerAlign, s), t.y += s.footerMarginTop, e.textAlign = l.textAlign(s.footerAlign), e.textBaseline = \"middle\", r = $(s.footerFont), e.fillStyle = s.footerColor, e.font = r.string, a = 0; a < o; ++a)\n        e.fillText(n[a], l.x(t.x), t.y + r.lineHeight / 2), t.y += r.lineHeight + s.footerSpacing;\n    }\n  }\n  drawBackground(t, e, s, n) {\n    const { xAlign: o, yAlign: r } = this, { x: a, y: l } = t, { width: c, height: h } = s, { topLeft: d, topRight: u, bottomLeft: f, bottomRight: g } = Dt(n.cornerRadius);\n    e.fillStyle = n.backgroundColor, e.strokeStyle = n.borderColor, e.lineWidth = n.borderWidth, e.beginPath(), e.moveTo(a + d, l), r === \"top\" && this.drawCaret(t, e, s, n), e.lineTo(a + c - u, l), e.quadraticCurveTo(a + c, l, a + c, l + u), r === \"center\" && o === \"right\" && this.drawCaret(t, e, s, n), e.lineTo(a + c, l + h - g), e.quadraticCurveTo(a + c, l + h, a + c - g, l + h), r === \"bottom\" && this.drawCaret(t, e, s, n), e.lineTo(a + f, l + h), e.quadraticCurveTo(a, l + h, a, l + h - f), r === \"center\" && o === \"left\" && this.drawCaret(t, e, s, n), e.lineTo(a, l + d), e.quadraticCurveTo(a, l, a + d, l), e.closePath(), e.fill(), n.borderWidth > 0 && e.stroke();\n  }\n  _updateAnimationTarget(t) {\n    const e = this.chart, s = this.$animations, n = s && s.x, o = s && s.y;\n    if (n || o) {\n      const r = se[t.position].call(this, this._active, this._eventPosition);\n      if (!r)\n        return;\n      const a = this._size = Ks(this, t), l = Object.assign({}, r, this._size), c = qs(e, t, l), h = Gs(t, l, c, e);\n      (n._to !== h.x || o._to !== h.y) && (this.xAlign = c.xAlign, this.yAlign = c.yAlign, this.width = a.width, this.height = a.height, this.caretX = r.x, this.caretY = r.y, this._resolveAnimations().update(this, h));\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(t) {\n    const e = this.options.setContext(this.getContext());\n    let s = this.opacity;\n    if (!s)\n      return;\n    this._updateAnimationTarget(e);\n    const n = {\n      width: this.width,\n      height: this.height\n    }, o = {\n      x: this.x,\n      y: this.y\n    };\n    s = Math.abs(s) < 1e-3 ? 0 : s;\n    const r = K(e.padding), a = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    e.enabled && a && (t.save(), t.globalAlpha = s, this.drawBackground(o, t, n, e), Tn(t, e.textDirection), o.y += r.top, this.drawTitle(o, t, e), this.drawBody(o, t, e), this.drawFooter(o, t, e), Ln(t, e.textDirection), t.restore());\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(t, e) {\n    const s = this._active, n = t.map(({ datasetIndex: a, index: l }) => {\n      const c = this.chart.getDatasetMeta(a);\n      if (!c)\n        throw new Error(\"Cannot find a dataset at index \" + a);\n      return {\n        datasetIndex: a,\n        element: c.data[l],\n        index: l\n      };\n    }), o = !ze(s, n), r = this._positionChanged(n, e);\n    (o || r) && (this._active = n, this._eventPosition = e, this._ignoreReplayEvents = !0, this.update(!0));\n  }\n  handleEvent(t, e, s = !0) {\n    if (e && this._ignoreReplayEvents)\n      return !1;\n    this._ignoreReplayEvents = !1;\n    const n = this.options, o = this._active || [], r = this._getActiveElements(t, o, e, s), a = this._positionChanged(r, t), l = e || !ze(r, o) || a;\n    return l && (this._active = r, (n.enabled || n.external) && (this._eventPosition = {\n      x: t.x,\n      y: t.y\n    }, this.update(!0, e))), l;\n  }\n  _getActiveElements(t, e, s, n) {\n    const o = this.options;\n    if (t.type === \"mouseout\")\n      return [];\n    if (!n)\n      return e;\n    const r = this.chart.getElementsAtEventForMode(t, o.mode, o, s);\n    return o.reverse && r.reverse(), r;\n  }\n  _positionChanged(t, e) {\n    const { caretX: s, caretY: n, options: o } = this, r = se[o.position].call(this, t, e);\n    return r !== !1 && (s !== r.x || n !== r.y);\n  }\n}\nCi.positioners = se;\nvar po = {\n  id: \"tooltip\",\n  _element: Ci,\n  positioners: se,\n  afterInit(i, t, e) {\n    e && (i.tooltip = new Ci({ chart: i, options: e }));\n  },\n  beforeUpdate(i, t, e) {\n    i.tooltip && i.tooltip.initialize(e);\n  },\n  reset(i, t, e) {\n    i.tooltip && i.tooltip.initialize(e);\n  },\n  afterDraw(i) {\n    const t = i.tooltip;\n    if (t && t._willRender()) {\n      const e = {\n        tooltip: t\n      };\n      if (i.notifyPlugins(\"beforeTooltipDraw\", e) === !1)\n        return;\n      t.draw(i.ctx), i.notifyPlugins(\"afterTooltipDraw\", e);\n    }\n  },\n  afterEvent(i, t) {\n    if (i.tooltip) {\n      const e = t.replay;\n      i.tooltip.handleEvent(t.event, e, t.inChartArea) && (t.changed = !0);\n    }\n  },\n  defaults: {\n    enabled: !0,\n    external: null,\n    position: \"average\",\n    backgroundColor: \"rgba(0,0,0,0.8)\",\n    titleColor: \"#fff\",\n    titleFont: {\n      weight: \"bold\"\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: \"left\",\n    bodyColor: \"#fff\",\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: \"left\",\n    footerColor: \"#fff\",\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: \"bold\"\n    },\n    footerAlign: \"left\",\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (i, t) => t.bodyFont.size,\n    boxWidth: (i, t) => t.bodyFont.size,\n    multiKeyBackground: \"#fff\",\n    displayColors: !0,\n    boxPadding: 0,\n    borderColor: \"rgba(0,0,0,0)\",\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: \"easeOutQuart\"\n    },\n    animations: {\n      numbers: {\n        type: \"number\",\n        properties: [\"x\", \"y\", \"width\", \"height\", \"caretX\", \"caretY\"]\n      },\n      opacity: {\n        easing: \"linear\",\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: ct,\n      title(i) {\n        if (i.length > 0) {\n          const t = i[0], e = t.chart.data.labels, s = e ? e.length : 0;\n          if (this && this.options && this.options.mode === \"dataset\")\n            return t.dataset.label || \"\";\n          if (t.label)\n            return t.label;\n          if (s > 0 && t.dataIndex < s)\n            return e[t.dataIndex];\n        }\n        return \"\";\n      },\n      afterTitle: ct,\n      beforeBody: ct,\n      beforeLabel: ct,\n      label(i) {\n        if (this && this.options && this.options.mode === \"dataset\")\n          return i.label + \": \" + i.formattedValue || i.formattedValue;\n        let t = i.dataset.label || \"\";\n        t && (t += \": \");\n        const e = i.formattedValue;\n        return T(e) || (t += e), t;\n      },\n      labelColor(i) {\n        const e = i.chart.getDatasetMeta(i.datasetIndex).controller.getStyle(i.dataIndex);\n        return {\n          borderColor: e.borderColor,\n          backgroundColor: e.backgroundColor,\n          borderWidth: e.borderWidth,\n          borderDash: e.borderDash,\n          borderDashOffset: e.borderDashOffset,\n          borderRadius: 0\n        };\n      },\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle(i) {\n        const e = i.chart.getDatasetMeta(i.datasetIndex).controller.getStyle(i.dataIndex);\n        return {\n          pointStyle: e.pointStyle,\n          rotation: e.rotation\n        };\n      },\n      afterLabel: ct,\n      afterBody: ct,\n      beforeFooter: ct,\n      footer: ct,\n      afterFooter: ct\n    }\n  },\n  defaultRoutes: {\n    bodyFont: \"font\",\n    footerFont: \"font\",\n    titleFont: \"font\"\n  },\n  descriptors: {\n    _scriptable: (i) => i !== \"filter\" && i !== \"itemSort\" && i !== \"external\",\n    _indexable: !1,\n    callbacks: {\n      _scriptable: !1,\n      _indexable: !1\n    },\n    animation: {\n      _fallback: !1\n    },\n    animations: {\n      _fallback: \"animation\"\n    }\n  },\n  additionalOptionScopes: [\"interaction\"]\n}, mo = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  Decimation: ao,\n  Filler: ho,\n  Legend: uo,\n  SubTitle: go,\n  Title: fo,\n  Tooltip: po\n});\nconst Sc = (i, t, e, s) => (typeof t == \"string\" ? (e = i.push(t) - 1, s.unshift({ index: e, label: t })) : isNaN(t) && (e = null), e);\nfunction Pc(i, t, e, s) {\n  const n = i.indexOf(t);\n  if (n === -1)\n    return Sc(i, t, e, s);\n  const o = i.lastIndexOf(t);\n  return n !== o ? e : n;\n}\nconst Cc = (i, t) => i === null ? null : Y(Math.round(i), 0, t);\nclass ce extends Mt {\n  constructor(t) {\n    super(t), this._startValue = void 0, this._valueRange = 0, this._addedLabels = [];\n  }\n  init(t) {\n    const e = this._addedLabels;\n    if (e.length) {\n      const s = this.getLabels();\n      for (const { index: n, label: o } of e)\n        s[n] === o && s.splice(n, 1);\n      this._addedLabels = [];\n    }\n    super.init(t);\n  }\n  parse(t, e) {\n    if (T(t))\n      return null;\n    const s = this.getLabels();\n    return e = isFinite(e) && s[e] === t ? e : Pc(s, t, C(e, t), this._addedLabels), Cc(e, s.length - 1);\n  }\n  determineDataLimits() {\n    const { minDefined: t, maxDefined: e } = this.getUserBounds();\n    let { min: s, max: n } = this.getMinMax(!0);\n    this.options.bounds === \"ticks\" && (t || (s = 0), e || (n = this.getLabels().length - 1)), this.min = s, this.max = n;\n  }\n  buildTicks() {\n    const t = this.min, e = this.max, s = this.options.offset, n = [];\n    let o = this.getLabels();\n    o = t === 0 && e === o.length - 1 ? o : o.slice(t, e + 1), this._valueRange = Math.max(o.length - (s ? 0 : 1), 1), this._startValue = this.min - (s ? 0.5 : 0);\n    for (let r = t; r <= e; r++)\n      n.push({ value: r });\n    return n;\n  }\n  getLabelForValue(t) {\n    const e = this.getLabels();\n    return t >= 0 && t < e.length ? e[t] : t;\n  }\n  configure() {\n    super.configure(), this.isHorizontal() || (this._reversePixels = !this._reversePixels);\n  }\n  getPixelForValue(t) {\n    return typeof t != \"number\" && (t = this.parse(t)), t === null ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(t) {\n    const e = this.ticks;\n    return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t].value);\n  }\n  getValueForPixel(t) {\n    return Math.round(this._startValue + this.getDecimalForPixel(t) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nce.id = \"category\";\nce.defaults = {\n  ticks: {\n    callback: ce.prototype.getLabelForValue\n  }\n};\nfunction Dc(i, t) {\n  const e = [], { bounds: n, step: o, min: r, max: a, precision: l, count: c, maxTicks: h, maxDigits: d, includeBounds: u } = i, f = o || 1, g = h - 1, { min: p, max: m } = t, b = !T(r), x = !T(a), v = !T(c), y = (m - p) / (d + 1);\n  let _ = qi((m - p) / g / f) * f, M, k, S, w;\n  if (_ < 1e-14 && !b && !x)\n    return [{ value: p }, { value: m }];\n  w = Math.ceil(m / _) - Math.floor(p / _), w > g && (_ = qi(w * _ / g / f) * f), T(l) || (M = Math.pow(10, l), _ = Math.ceil(_ * M) / M), n === \"ticks\" ? (k = Math.floor(p / _) * _, S = Math.ceil(m / _) * _) : (k = p, S = m), b && x && o && Oo((a - r) / o, _ / 1e3) ? (w = Math.round(Math.min((a - r) / _, h)), _ = (a - r) / w, k = r, S = a) : v ? (k = b ? r : k, S = x ? a : S, w = c - 1, _ = (S - k) / w) : (w = (S - k) / _, te(w, Math.round(w), _ / 1e3) ? w = Math.round(w) : w = Math.ceil(w));\n  const L = Math.max(\n    Gi(_),\n    Gi(k)\n  );\n  M = Math.pow(10, T(l) ? L : l), k = Math.round(k * M) / M, S = Math.round(S * M) / M;\n  let R = 0;\n  for (b && (u && k !== r ? (e.push({ value: r }), k < r && R++, te(Math.round((k + R * _) * M) / M, r, Qs(r, y, i)) && R++) : k < r && R++); R < w; ++R)\n    e.push({ value: Math.round((k + R * _) * M) / M });\n  return x && u && S !== a ? e.length && te(e[e.length - 1].value, a, Qs(a, y, i)) ? e[e.length - 1].value = a : e.push({ value: a }) : (!x || S === a) && e.push({ value: S }), e;\n}\nfunction Qs(i, t, { horizontal: e, minRotation: s }) {\n  const n = nt(s), o = (e ? Math.sin(n) : Math.cos(n)) || 1e-3, r = 0.75 * t * (\"\" + i).length;\n  return Math.min(t / o, r);\n}\nclass Ye extends Mt {\n  constructor(t) {\n    super(t), this.start = void 0, this.end = void 0, this._startValue = void 0, this._endValue = void 0, this._valueRange = 0;\n  }\n  parse(t, e) {\n    return T(t) || (typeof t == \"number\" || t instanceof Number) && !isFinite(+t) ? null : +t;\n  }\n  handleTickRangeOptions() {\n    const { beginAtZero: t } = this.options, { minDefined: e, maxDefined: s } = this.getUserBounds();\n    let { min: n, max: o } = this;\n    const r = (l) => n = e ? n : l, a = (l) => o = s ? o : l;\n    if (t) {\n      const l = lt(n), c = lt(o);\n      l < 0 && c < 0 ? a(0) : l > 0 && c > 0 && r(0);\n    }\n    if (n === o) {\n      let l = 1;\n      (o >= Number.MAX_SAFE_INTEGER || n <= Number.MIN_SAFE_INTEGER) && (l = Math.abs(o * 0.05)), a(o + l), t || r(n - l);\n    }\n    this.min = n, this.max = o;\n  }\n  getTickLimit() {\n    const t = this.options.ticks;\n    let { maxTicksLimit: e, stepSize: s } = t, n;\n    return s ? (n = Math.ceil(this.max / s) - Math.floor(this.min / s) + 1, n > 1e3 && (console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${n} ticks. Limiting to 1000.`), n = 1e3)) : (n = this.computeTickLimit(), e = e || 11), e && (n = Math.min(e, n)), n;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const t = this.options, e = t.ticks;\n    let s = this.getTickLimit();\n    s = Math.max(2, s);\n    const n = {\n      maxTicks: s,\n      bounds: t.bounds,\n      min: t.min,\n      max: t.max,\n      precision: e.precision,\n      step: e.stepSize,\n      count: e.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: e.minRotation || 0,\n      includeBounds: e.includeBounds !== !1\n    }, o = this._range || this, r = Dc(n, o);\n    return t.bounds === \"ticks\" && cn(r, this, \"value\"), t.reverse ? (r.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), r;\n  }\n  configure() {\n    const t = this.ticks;\n    let e = this.min, s = this.max;\n    if (super.configure(), this.options.offset && t.length) {\n      const n = (s - e) / Math.max(t.length - 1, 1) / 2;\n      e -= n, s += n;\n    }\n    this._startValue = e, this._endValue = s, this._valueRange = s - e;\n  }\n  getLabelForValue(t) {\n    return de(t, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass Ge extends Ye {\n  determineDataLimits() {\n    const { min: t, max: e } = this.getMinMax(!0);\n    this.min = N(t) ? t : 0, this.max = N(e) ? e : 1, this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const t = this.isHorizontal(), e = t ? this.width : this.height, s = nt(this.options.ticks.minRotation), n = (t ? Math.sin(s) : Math.cos(s)) || 1e-3, o = this._resolveTickFontOptions(0);\n    return Math.ceil(e / Math.min(40, o.lineHeight / n));\n  }\n  getPixelForValue(t) {\n    return t === null ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(t) {\n    return this._startValue + this.getDecimalForPixel(t) * this._valueRange;\n  }\n}\nGe.id = \"linear\";\nGe.defaults = {\n  ticks: {\n    callback: be.formatters.numeric\n  }\n};\nfunction tn(i) {\n  return i / Math.pow(10, Math.floor(tt(i))) === 1;\n}\nfunction Oc(i, t) {\n  const e = Math.floor(tt(t.max)), s = Math.ceil(t.max / Math.pow(10, e)), n = [];\n  let o = Q(i.min, Math.pow(10, Math.floor(tt(t.min)))), r = Math.floor(tt(o)), a = Math.floor(o / Math.pow(10, r)), l = r < 0 ? Math.pow(10, Math.abs(r)) : 1;\n  do\n    n.push({ value: o, major: tn(o) }), ++a, a === 10 && (a = 1, ++r, l = r >= 0 ? 1 : l), o = Math.round(a * Math.pow(10, r) * l) / l;\n  while (r < e || r === e && a < s);\n  const c = Q(i.max, o);\n  return n.push({ value: c, major: tn(o) }), n;\n}\nclass Ze extends Mt {\n  constructor(t) {\n    super(t), this.start = void 0, this.end = void 0, this._startValue = void 0, this._valueRange = 0;\n  }\n  parse(t, e) {\n    const s = Ye.prototype.parse.apply(this, [t, e]);\n    if (s === 0) {\n      this._zero = !0;\n      return;\n    }\n    return N(s) && s > 0 ? s : null;\n  }\n  determineDataLimits() {\n    const { min: t, max: e } = this.getMinMax(!0);\n    this.min = N(t) ? Math.max(0, t) : null, this.max = N(e) ? Math.max(0, e) : null, this.options.beginAtZero && (this._zero = !0), this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const { minDefined: t, maxDefined: e } = this.getUserBounds();\n    let s = this.min, n = this.max;\n    const o = (l) => s = t ? s : l, r = (l) => n = e ? n : l, a = (l, c) => Math.pow(10, Math.floor(tt(l)) + c);\n    s === n && (s <= 0 ? (o(1), r(10)) : (o(a(s, -1)), r(a(n, 1)))), s <= 0 && o(a(n, -1)), n <= 0 && r(a(s, 1)), this._zero && this.min !== this._suggestedMin && s === a(this.min, 0) && o(a(s, -1)), this.min = s, this.max = n;\n  }\n  buildTicks() {\n    const t = this.options, e = {\n      min: this._userMin,\n      max: this._userMax\n    }, s = Oc(e, this);\n    return t.bounds === \"ticks\" && cn(s, this, \"value\"), t.reverse ? (s.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), s;\n  }\n  getLabelForValue(t) {\n    return t === void 0 ? \"0\" : de(t, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const t = this.min;\n    super.configure(), this._startValue = tt(t), this._valueRange = tt(this.max) - tt(t);\n  }\n  getPixelForValue(t) {\n    return (t === void 0 || t === 0) && (t = this.min), t === null || isNaN(t) ? NaN : this.getPixelForDecimal(t === this.min ? 0 : (tt(t) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(t) {\n    const e = this.getDecimalForPixel(t);\n    return Math.pow(10, this._startValue + e * this._valueRange);\n  }\n}\nZe.id = \"logarithmic\";\nZe.defaults = {\n  ticks: {\n    callback: be.formatters.logarithmic,\n    major: {\n      enabled: !0\n    }\n  }\n};\nfunction Di(i) {\n  const t = i.ticks;\n  if (t.display && i.display) {\n    const e = K(t.backdropPadding);\n    return C(t.font && t.font.size, O.font.size) + e.height;\n  }\n  return 0;\n}\nfunction Ac(i, t, e) {\n  return e = z(e) ? e : [e], {\n    w: ar(i, t.string, e),\n    h: e.length * t.lineHeight\n  };\n}\nfunction en(i, t, e, s, n) {\n  return i === s || i === n ? {\n    start: t - e / 2,\n    end: t + e / 2\n  } : i < s || i > n ? {\n    start: t - e,\n    end: t\n  } : {\n    start: t,\n    end: t + e\n  };\n}\nfunction Tc(i) {\n  const t = {\n    l: i.left + i._padding.left,\n    r: i.right - i._padding.right,\n    t: i.top + i._padding.top,\n    b: i.bottom - i._padding.bottom\n  }, e = Object.assign({}, t), s = [], n = [], o = i._pointLabels.length, r = i.options.pointLabels, a = r.centerPointLabels ? B / o : 0;\n  for (let l = 0; l < o; l++) {\n    const c = r.setContext(i.getPointLabelContext(l));\n    n[l] = c.padding;\n    const h = i.getPointPosition(l, i.drawingArea + n[l], a), d = $(c.font), u = Ac(i.ctx, d, i._pointLabels[l]);\n    s[l] = u;\n    const f = Z(i.getIndexAngle(l) + a), g = Math.round(Ai(f)), p = en(g, h.x, u.w, 0, 180), m = en(g, h.y, u.h, 90, 270);\n    Lc(e, t, f, p, m);\n  }\n  i.setCenterPoint(\n    t.l - e.l,\n    e.r - t.r,\n    t.t - e.t,\n    e.b - t.b\n  ), i._pointLabelItems = Rc(i, s, n);\n}\nfunction Lc(i, t, e, s, n) {\n  const o = Math.abs(Math.sin(e)), r = Math.abs(Math.cos(e));\n  let a = 0, l = 0;\n  s.start < t.l ? (a = (t.l - s.start) / o, i.l = Math.min(i.l, t.l - a)) : s.end > t.r && (a = (s.end - t.r) / o, i.r = Math.max(i.r, t.r + a)), n.start < t.t ? (l = (t.t - n.start) / r, i.t = Math.min(i.t, t.t - l)) : n.end > t.b && (l = (n.end - t.b) / r, i.b = Math.max(i.b, t.b + l));\n}\nfunction Rc(i, t, e) {\n  const s = [], n = i._pointLabels.length, o = i.options, r = Di(o) / 2, a = i.drawingArea, l = o.pointLabels.centerPointLabels ? B / n : 0;\n  for (let c = 0; c < n; c++) {\n    const h = i.getPointPosition(c, a + r + e[c], l), d = Math.round(Ai(Z(h.angle + V))), u = t[c], f = Ic(h.y, u.h, d), g = Ec(d), p = Fc(h.x, u.w, g);\n    s.push({\n      x: h.x,\n      y: f,\n      textAlign: g,\n      left: p,\n      top: f,\n      right: p + u.w,\n      bottom: f + u.h\n    });\n  }\n  return s;\n}\nfunction Ec(i) {\n  return i === 0 || i === 180 ? \"center\" : i < 180 ? \"left\" : \"right\";\n}\nfunction Fc(i, t, e) {\n  return e === \"right\" ? i -= t : e === \"center\" && (i -= t / 2), i;\n}\nfunction Ic(i, t, e) {\n  return e === 90 || e === 270 ? i -= t / 2 : (e > 270 || e < 90) && (i -= t), i;\n}\nfunction zc(i, t) {\n  const { ctx: e, options: { pointLabels: s } } = i;\n  for (let n = t - 1; n >= 0; n--) {\n    const o = s.setContext(i.getPointLabelContext(n)), r = $(o.font), { x: a, y: l, textAlign: c, left: h, top: d, right: u, bottom: f } = i._pointLabelItems[n], { backdropColor: g } = o;\n    if (!T(g)) {\n      const p = Dt(o.borderRadius), m = K(o.backdropPadding);\n      e.fillStyle = g;\n      const b = h - m.left, x = d - m.top, v = u - h + m.width, y = f - d + m.height;\n      Object.values(p).some((_) => _ !== 0) ? (e.beginPath(), ae(e, {\n        x: b,\n        y: x,\n        w: v,\n        h: y,\n        radius: p\n      }), e.fill()) : e.fillRect(b, x, v, y);\n    }\n    Tt(\n      e,\n      i._pointLabels[n],\n      a,\n      l + r.lineHeight / 2,\n      r,\n      {\n        color: o.color,\n        textAlign: c,\n        textBaseline: \"middle\"\n      }\n    );\n  }\n}\nfunction bo(i, t, e, s) {\n  const { ctx: n } = i;\n  if (e)\n    n.arc(i.xCenter, i.yCenter, t, 0, F);\n  else {\n    let o = i.getPointPosition(0, t);\n    n.moveTo(o.x, o.y);\n    for (let r = 1; r < s; r++)\n      o = i.getPointPosition(r, t), n.lineTo(o.x, o.y);\n  }\n}\nfunction Bc(i, t, e, s) {\n  const n = i.ctx, o = t.circular, { color: r, lineWidth: a } = t;\n  !o && !s || !r || !a || e < 0 || (n.save(), n.strokeStyle = r, n.lineWidth = a, n.setLineDash(t.borderDash), n.lineDashOffset = t.borderDashOffset, n.beginPath(), bo(i, e, o, s), n.closePath(), n.stroke(), n.restore());\n}\nfunction Vc(i, t, e) {\n  return vt(i, {\n    label: e,\n    index: t,\n    type: \"pointLabel\"\n  });\n}\nclass Nt extends Ye {\n  constructor(t) {\n    super(t), this.xCenter = void 0, this.yCenter = void 0, this.drawingArea = void 0, this._pointLabels = [], this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const t = this._padding = K(Di(this.options) / 2), e = this.width = this.maxWidth - t.width, s = this.height = this.maxHeight - t.height;\n    this.xCenter = Math.floor(this.left + e / 2 + t.left), this.yCenter = Math.floor(this.top + s / 2 + t.top), this.drawingArea = Math.floor(Math.min(e, s) / 2);\n  }\n  determineDataLimits() {\n    const { min: t, max: e } = this.getMinMax(!1);\n    this.min = N(t) && !isNaN(t) ? t : 0, this.max = N(e) && !isNaN(e) ? e : 0, this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / Di(this.options));\n  }\n  generateTickLabels(t) {\n    Ye.prototype.generateTickLabels.call(this, t), this._pointLabels = this.getLabels().map((e, s) => {\n      const n = I(this.options.pointLabels.callback, [e, s], this);\n      return n || n === 0 ? n : \"\";\n    }).filter((e, s) => this.chart.getDataVisibility(s));\n  }\n  fit() {\n    const t = this.options;\n    t.display && t.pointLabels.display ? Tc(this) : this.setCenterPoint(0, 0, 0, 0);\n  }\n  setCenterPoint(t, e, s, n) {\n    this.xCenter += Math.floor((t - e) / 2), this.yCenter += Math.floor((s - n) / 2), this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(t, e, s, n));\n  }\n  getIndexAngle(t) {\n    const e = F / (this._pointLabels.length || 1), s = this.options.startAngle || 0;\n    return Z(t * e + nt(s));\n  }\n  getDistanceFromCenterForValue(t) {\n    if (T(t))\n      return NaN;\n    const e = this.drawingArea / (this.max - this.min);\n    return this.options.reverse ? (this.max - t) * e : (t - this.min) * e;\n  }\n  getValueForDistanceFromCenter(t) {\n    if (T(t))\n      return NaN;\n    const e = t / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - e : this.min + e;\n  }\n  getPointLabelContext(t) {\n    const e = this._pointLabels || [];\n    if (t >= 0 && t < e.length) {\n      const s = e[t];\n      return Vc(this.getContext(), t, s);\n    }\n  }\n  getPointPosition(t, e, s = 0) {\n    const n = this.getIndexAngle(t) - V + s;\n    return {\n      x: Math.cos(n) * e + this.xCenter,\n      y: Math.sin(n) * e + this.yCenter,\n      angle: n\n    };\n  }\n  getPointPositionForValue(t, e) {\n    return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));\n  }\n  getBasePosition(t) {\n    return this.getPointPositionForValue(t || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(t) {\n    const { left: e, top: s, right: n, bottom: o } = this._pointLabelItems[t];\n    return {\n      left: e,\n      top: s,\n      right: n,\n      bottom: o\n    };\n  }\n  drawBackground() {\n    const { backgroundColor: t, grid: { circular: e } } = this.options;\n    if (t) {\n      const s = this.ctx;\n      s.save(), s.beginPath(), bo(this, this.getDistanceFromCenterForValue(this._endValue), e, this._pointLabels.length), s.closePath(), s.fillStyle = t, s.fill(), s.restore();\n    }\n  }\n  drawGrid() {\n    const t = this.ctx, e = this.options, { angleLines: s, grid: n } = e, o = this._pointLabels.length;\n    let r, a, l;\n    if (e.pointLabels.display && zc(this, o), n.display && this.ticks.forEach((c, h) => {\n      if (h !== 0) {\n        a = this.getDistanceFromCenterForValue(c.value);\n        const d = n.setContext(this.getContext(h - 1));\n        Bc(this, d, a, o);\n      }\n    }), s.display) {\n      for (t.save(), r = o - 1; r >= 0; r--) {\n        const c = s.setContext(this.getPointLabelContext(r)), { color: h, lineWidth: d } = c;\n        !d || !h || (t.lineWidth = d, t.strokeStyle = h, t.setLineDash(c.borderDash), t.lineDashOffset = c.borderDashOffset, a = this.getDistanceFromCenterForValue(e.ticks.reverse ? this.min : this.max), l = this.getPointPosition(r, a), t.beginPath(), t.moveTo(this.xCenter, this.yCenter), t.lineTo(l.x, l.y), t.stroke());\n      }\n      t.restore();\n    }\n  }\n  drawBorder() {\n  }\n  drawLabels() {\n    const t = this.ctx, e = this.options, s = e.ticks;\n    if (!s.display)\n      return;\n    const n = this.getIndexAngle(0);\n    let o, r;\n    t.save(), t.translate(this.xCenter, this.yCenter), t.rotate(n), t.textAlign = \"center\", t.textBaseline = \"middle\", this.ticks.forEach((a, l) => {\n      if (l === 0 && !e.reverse)\n        return;\n      const c = s.setContext(this.getContext(l)), h = $(c.font);\n      if (o = this.getDistanceFromCenterForValue(this.ticks[l].value), c.showLabelBackdrop) {\n        t.font = h.string, r = t.measureText(a.label).width, t.fillStyle = c.backdropColor;\n        const d = K(c.backdropPadding);\n        t.fillRect(\n          -r / 2 - d.left,\n          -o - h.size / 2 - d.top,\n          r + d.width,\n          h.size + d.height\n        );\n      }\n      Tt(t, a.label, 0, -o, h, {\n        color: c.color\n      });\n    }), t.restore();\n  }\n  drawTitle() {\n  }\n}\nNt.id = \"radialLinear\";\nNt.defaults = {\n  display: !0,\n  animate: !0,\n  position: \"chartArea\",\n  angleLines: {\n    display: !0,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0\n  },\n  grid: {\n    circular: !1\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: !0,\n    callback: be.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: void 0,\n    backdropPadding: 2,\n    display: !0,\n    font: {\n      size: 10\n    },\n    callback(i) {\n      return i;\n    },\n    padding: 5,\n    centerPointLabels: !1\n  }\n};\nNt.defaultRoutes = {\n  \"angleLines.color\": \"borderColor\",\n  \"pointLabels.color\": \"color\",\n  \"ticks.color\": \"color\"\n};\nNt.descriptors = {\n  angleLines: {\n    _fallback: \"grid\"\n  }\n};\nconst Je = {\n  millisecond: { common: !0, size: 1, steps: 1e3 },\n  second: { common: !0, size: 1e3, steps: 60 },\n  minute: { common: !0, size: 6e4, steps: 60 },\n  hour: { common: !0, size: 36e5, steps: 24 },\n  day: { common: !0, size: 864e5, steps: 30 },\n  week: { common: !1, size: 6048e5, steps: 4 },\n  month: { common: !0, size: 2628e6, steps: 12 },\n  quarter: { common: !1, size: 7884e6, steps: 4 },\n  year: { common: !0, size: 3154e7 }\n}, G = Object.keys(Je);\nfunction Wc(i, t) {\n  return i - t;\n}\nfunction sn(i, t) {\n  if (T(t))\n    return null;\n  const e = i._adapter, { parser: s, round: n, isoWeekday: o } = i._parseOpts;\n  let r = t;\n  return typeof s == \"function\" && (r = s(r)), N(r) || (r = typeof s == \"string\" ? e.parse(r, s) : e.parse(r)), r === null ? null : (n && (r = n === \"week\" && (Bt(o) || o === !0) ? e.startOf(r, \"isoWeek\", o) : e.startOf(r, n)), +r);\n}\nfunction nn(i, t, e, s) {\n  const n = G.length;\n  for (let o = G.indexOf(i); o < n - 1; ++o) {\n    const r = Je[G[o]], a = r.steps ? r.steps : Number.MAX_SAFE_INTEGER;\n    if (r.common && Math.ceil((e - t) / (a * r.size)) <= s)\n      return G[o];\n  }\n  return G[n - 1];\n}\nfunction Nc(i, t, e, s, n) {\n  for (let o = G.length - 1; o >= G.indexOf(e); o--) {\n    const r = G[o];\n    if (Je[r].common && i._adapter.diff(n, s, r) >= t - 1)\n      return r;\n  }\n  return G[e ? G.indexOf(e) : 0];\n}\nfunction Hc(i) {\n  for (let t = G.indexOf(i) + 1, e = G.length; t < e; ++t)\n    if (Je[G[t]].common)\n      return G[t];\n}\nfunction on(i, t, e) {\n  if (!e)\n    i[t] = !0;\n  else if (e.length) {\n    const { lo: s, hi: n } = Ti(e, t), o = e[s] >= t ? e[s] : e[n];\n    i[o] = !0;\n  }\n}\nfunction jc(i, t, e, s) {\n  const n = i._adapter, o = +n.startOf(t[0].value, s), r = t[t.length - 1].value;\n  let a, l;\n  for (a = o; a <= r; a = +n.add(a, 1, s))\n    l = e[a], l >= 0 && (t[l].major = !0);\n  return t;\n}\nfunction rn(i, t, e) {\n  const s = [], n = {}, o = t.length;\n  let r, a;\n  for (r = 0; r < o; ++r)\n    a = t[r], n[a] = r, s.push({\n      value: a,\n      major: !1\n    });\n  return o === 0 || !e ? s : jc(i, s, n, e);\n}\nclass Ht extends Mt {\n  constructor(t) {\n    super(t), this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    }, this._unit = \"day\", this._majorUnit = void 0, this._offsets = {}, this._normalized = !1, this._parseOpts = void 0;\n  }\n  init(t, e) {\n    const s = t.time || (t.time = {}), n = this._adapter = new Nn._date(t.adapters.date);\n    n.init(e), Qt(s.displayFormats, n.formats()), this._parseOpts = {\n      parser: s.parser,\n      round: s.round,\n      isoWeekday: s.isoWeekday\n    }, super.init(t), this._normalized = e.normalized;\n  }\n  parse(t, e) {\n    return t === void 0 ? null : sn(this, t);\n  }\n  beforeLayout() {\n    super.beforeLayout(), this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const t = this.options, e = this._adapter, s = t.time.unit || \"day\";\n    let { min: n, max: o, minDefined: r, maxDefined: a } = this.getUserBounds();\n    function l(c) {\n      !r && !isNaN(c.min) && (n = Math.min(n, c.min)), !a && !isNaN(c.max) && (o = Math.max(o, c.max));\n    }\n    (!r || !a) && (l(this._getLabelBounds()), (t.bounds !== \"ticks\" || t.ticks.source !== \"labels\") && l(this.getMinMax(!1))), n = N(n) && !isNaN(n) ? n : +e.startOf(Date.now(), s), o = N(o) && !isNaN(o) ? o : +e.endOf(Date.now(), s) + 1, this.min = Math.min(n, o - 1), this.max = Math.max(n + 1, o);\n  }\n  _getLabelBounds() {\n    const t = this.getLabelTimestamps();\n    let e = Number.POSITIVE_INFINITY, s = Number.NEGATIVE_INFINITY;\n    return t.length && (e = t[0], s = t[t.length - 1]), { min: e, max: s };\n  }\n  buildTicks() {\n    const t = this.options, e = t.time, s = t.ticks, n = s.source === \"labels\" ? this.getLabelTimestamps() : this._generate();\n    t.bounds === \"ticks\" && n.length && (this.min = this._userMin || n[0], this.max = this._userMax || n[n.length - 1]);\n    const o = this.min, r = this.max, a = Ro(n, o, r);\n    return this._unit = e.unit || (s.autoSkip ? nn(e.minUnit, this.min, this.max, this._getLabelCapacity(o)) : Nc(this, a.length, e.minUnit, this.min, this.max)), this._majorUnit = !s.major.enabled || this._unit === \"year\" ? void 0 : Hc(this._unit), this.initOffsets(n), t.reverse && a.reverse(), rn(this, a, this._majorUnit);\n  }\n  afterAutoSkip() {\n    this.options.offsetAfterAutoskip && this.initOffsets(this.ticks.map((t) => +t.value));\n  }\n  initOffsets(t) {\n    let e = 0, s = 0, n, o;\n    this.options.offset && t.length && (n = this.getDecimalForValue(t[0]), t.length === 1 ? e = 1 - n : e = (this.getDecimalForValue(t[1]) - n) / 2, o = this.getDecimalForValue(t[t.length - 1]), t.length === 1 ? s = o : s = (o - this.getDecimalForValue(t[t.length - 2])) / 2);\n    const r = t.length < 3 ? 0.5 : 0.25;\n    e = Y(e, 0, r), s = Y(s, 0, r), this._offsets = { start: e, end: s, factor: 1 / (e + 1 + s) };\n  }\n  _generate() {\n    const t = this._adapter, e = this.min, s = this.max, n = this.options, o = n.time, r = o.unit || nn(o.minUnit, e, s, this._getLabelCapacity(e)), a = C(o.stepSize, 1), l = r === \"week\" ? o.isoWeekday : !1, c = Bt(l) || l === !0, h = {};\n    let d = e, u, f;\n    if (c && (d = +t.startOf(d, \"isoWeek\", l)), d = +t.startOf(d, c ? \"day\" : r), t.diff(s, e, r) > 1e5 * a)\n      throw new Error(e + \" and \" + s + \" are too far apart with stepSize of \" + a + \" \" + r);\n    const g = n.ticks.source === \"data\" && this.getDataTimestamps();\n    for (u = d, f = 0; u < s; u = +t.add(u, a, r), f++)\n      on(h, u, g);\n    return (u === s || n.bounds === \"ticks\" || f === 1) && on(h, u, g), Object.keys(h).sort((p, m) => p - m).map((p) => +p);\n  }\n  getLabelForValue(t) {\n    const e = this._adapter, s = this.options.time;\n    return s.tooltipFormat ? e.format(t, s.tooltipFormat) : e.format(t, s.displayFormats.datetime);\n  }\n  _tickFormatFunction(t, e, s, n) {\n    const o = this.options, r = o.time.displayFormats, a = this._unit, l = this._majorUnit, c = a && r[a], h = l && r[l], d = s[e], u = l && h && d && d.major, f = this._adapter.format(t, n || (u ? h : c)), g = o.ticks.callback;\n    return g ? I(g, [f, e, s], this) : f;\n  }\n  generateTickLabels(t) {\n    let e, s, n;\n    for (e = 0, s = t.length; e < s; ++e)\n      n = t[e], n.label = this._tickFormatFunction(n.value, e, t);\n  }\n  getDecimalForValue(t) {\n    return t === null ? NaN : (t - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(t) {\n    const e = this._offsets, s = this.getDecimalForValue(t);\n    return this.getPixelForDecimal((e.start + s) * e.factor);\n  }\n  getValueForPixel(t) {\n    const e = this._offsets, s = this.getDecimalForPixel(t) / e.factor - e.end;\n    return this.min + s * (this.max - this.min);\n  }\n  _getLabelSize(t) {\n    const e = this.options.ticks, s = this.ctx.measureText(t).width, n = nt(this.isHorizontal() ? e.maxRotation : e.minRotation), o = Math.cos(n), r = Math.sin(n), a = this._resolveTickFontOptions(0).size;\n    return {\n      w: s * o + a * r,\n      h: s * r + a * o\n    };\n  }\n  _getLabelCapacity(t) {\n    const e = this.options.time, s = e.displayFormats, n = s[e.unit] || s.millisecond, o = this._tickFormatFunction(t, 0, rn(this, [t], this._majorUnit), n), r = this._getLabelSize(o), a = Math.floor(this.isHorizontal() ? this.width / r.w : this.height / r.h) - 1;\n    return a > 0 ? a : 1;\n  }\n  getDataTimestamps() {\n    let t = this._cache.data || [], e, s;\n    if (t.length)\n      return t;\n    const n = this.getMatchingVisibleMetas();\n    if (this._normalized && n.length)\n      return this._cache.data = n[0].controller.getAllParsedValues(this);\n    for (e = 0, s = n.length; e < s; ++e)\n      t = t.concat(n[e].controller.getAllParsedValues(this));\n    return this._cache.data = this.normalize(t);\n  }\n  getLabelTimestamps() {\n    const t = this._cache.labels || [];\n    let e, s;\n    if (t.length)\n      return t;\n    const n = this.getLabels();\n    for (e = 0, s = n.length; e < s; ++e)\n      t.push(sn(this, n[e]));\n    return this._cache.labels = this._normalized ? t : this.normalize(t);\n  }\n  normalize(t) {\n    return un(t.sort(Wc));\n  }\n}\nHt.id = \"time\";\nHt.defaults = {\n  bounds: \"data\",\n  adapters: {},\n  time: {\n    parser: !1,\n    unit: !1,\n    round: !1,\n    isoWeekday: !1,\n    minUnit: \"millisecond\",\n    displayFormats: {}\n  },\n  ticks: {\n    source: \"auto\",\n    major: {\n      enabled: !1\n    }\n  }\n};\nfunction Fe(i, t, e) {\n  let s = 0, n = i.length - 1, o, r, a, l;\n  e ? (t >= i[s].pos && t <= i[n].pos && ({ lo: s, hi: n } = ft(i, \"pos\", t)), { pos: o, time: a } = i[s], { pos: r, time: l } = i[n]) : (t >= i[s].time && t <= i[n].time && ({ lo: s, hi: n } = ft(i, \"time\", t)), { time: o, pos: a } = i[s], { time: r, pos: l } = i[n]);\n  const c = r - o;\n  return c ? a + (l - a) * (t - o) / c : a;\n}\nclass Qe extends Ht {\n  constructor(t) {\n    super(t), this._table = [], this._minPos = void 0, this._tableRange = void 0;\n  }\n  initOffsets() {\n    const t = this._getTimestampsForTable(), e = this._table = this.buildLookupTable(t);\n    this._minPos = Fe(e, this.min), this._tableRange = Fe(e, this.max) - this._minPos, super.initOffsets(t);\n  }\n  buildLookupTable(t) {\n    const { min: e, max: s } = this, n = [], o = [];\n    let r, a, l, c, h;\n    for (r = 0, a = t.length; r < a; ++r)\n      c = t[r], c >= e && c <= s && n.push(c);\n    if (n.length < 2)\n      return [\n        { time: e, pos: 0 },\n        { time: s, pos: 1 }\n      ];\n    for (r = 0, a = n.length; r < a; ++r)\n      h = n[r + 1], l = n[r - 1], c = n[r], Math.round((h + l) / 2) !== c && o.push({ time: c, pos: r / (a - 1) });\n    return o;\n  }\n  _getTimestampsForTable() {\n    let t = this._cache.all || [];\n    if (t.length)\n      return t;\n    const e = this.getDataTimestamps(), s = this.getLabelTimestamps();\n    return e.length && s.length ? t = this.normalize(e.concat(s)) : t = e.length ? e : s, t = this._cache.all = t, t;\n  }\n  getDecimalForValue(t) {\n    return (Fe(this._table, t) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(t) {\n    const e = this._offsets, s = this.getDecimalForPixel(t) / e.factor - e.end;\n    return Fe(this._table, s * this._tableRange + this._minPos, !0);\n  }\n}\nQe.id = \"timeseries\";\nQe.defaults = Ht.defaults;\nvar xo = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  CategoryScale: ce,\n  LinearScale: Ge,\n  LogarithmicScale: Ze,\n  RadialLinearScale: Nt,\n  TimeScale: Ht,\n  TimeSeriesScale: Qe\n});\nconst $c = [\n  Wn,\n  oo,\n  mo,\n  xo\n], Yc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  Animation: In,\n  Animations: Ni,\n  ArcElement: ye,\n  BarController: ue,\n  BarElement: Me,\n  BasePlatform: Hi,\n  BasicPlatform: Yn,\n  BubbleController: fe,\n  CategoryScale: ce,\n  Chart: ji,\n  DatasetController: it,\n  Decimation: ao,\n  DomPlatform: Kn,\n  DoughnutController: Lt,\n  Element: st,\n  Filler: ho,\n  Interaction: Hn,\n  Legend: uo,\n  LineController: ge,\n  LineElement: gt,\n  LinearScale: Ge,\n  LogarithmicScale: Ze,\n  PieController: qe,\n  PointElement: ve,\n  PolarAreaController: pe,\n  RadarController: me,\n  RadialLinearScale: Nt,\n  Scale: Mt,\n  ScatterController: xe,\n  SubTitle: go,\n  Ticks: be,\n  TimeScale: Ht,\n  TimeSeriesScale: Qe,\n  Title: fo,\n  Tooltip: po,\n  _adapters: Nn,\n  _detectPlatform: qn,\n  animator: at,\n  controllers: Wn,\n  defaults: O,\n  elements: oo,\n  layouts: X,\n  plugins: mo,\n  registerables: $c,\n  registry: ot,\n  scales: xo\n}, Symbol.toStringTag, { value: \"Module\" }));\n\n//# sourceMappingURL=chart.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tw-elements/dist/js/chart.es.js\n");

/***/ })

}]);